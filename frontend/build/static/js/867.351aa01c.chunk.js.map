{"version":3,"file":"static/js/867.351aa01c.chunk.js","mappings":"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","sources":["component/popups/BrokerFormPopup.jsx","component/pages/SettingsPage.jsx","component/table/CustomTable.jsx","config/AxiosCofig.js"],"sourcesContent":["import { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Button, TextField, Typography, Modal, Box } from \"@mui/material\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Validation Schema\r\nconst brokerValidationSchema = Yup.object().shape({\r\n  brokerName: Yup.string().required(\"Broker Name is required\"),\r\n  grossFund: Yup.number()\r\n    .typeError(\"Gross Fund must be a number\")\r\n    .min(0, \"Gross Fund must be greater than or equal to 0\")\r\n    .required(\"Gross Fund is required\"),\r\n  grossFundInterest: Yup.number()\r\n    .typeError(\"Gross Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Gross Fund Interest is required\"),\r\n  grossFundSharing: Yup.number()\r\n    .typeError(\"Gross Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Gross Fund Sharing is required\"),\r\n\r\n  arbitrageFund: Yup.number()\r\n    .typeError(\"Arbitrage Fund must be a number\")\r\n    .min(0, \"Arbitrage Fund must be greater than or equal to 0\")\r\n    .required(\"Arbitrage Fund is required\"),\r\n  arbitrageFundInterest: Yup.number()\r\n    .typeError(\"Arbitrage Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Arbitrage Fund Interest is required\"),\r\n  arbitrageFundSharing: Yup.number()\r\n    .typeError(\"Arbitrage Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Arbitrage Fund Sharing is required\"),\r\n\r\n  propFund: Yup.number()\r\n    .typeError(\"Prop Fund must be a number\")\r\n    .min(0, \"Prop Fund must be greater than or equal to 0\")\r\n    .required(\"Prop Fund is required\"),\r\n  propFundInterest: Yup.number()\r\n    .typeError(\"Prop Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Prop Fund Interest is required\"),\r\n  propFundSharing: Yup.number()\r\n    .typeError(\"Prop Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Prop Fund Sharing is required\"),\r\n\r\n  costPerCr: Yup.number()\r\n    .typeError(\"Cost must be a number\")\r\n    .min(0, \"Cost must be greater than or equal to 0\")\r\n    .required(\"Cost is required\"),\r\n});\r\n\r\n// Broker Form Popup Component\r\nconst BrokerFormPopup = ({ open, handleClose, onFormSubmit, brokerData }) => {\r\n  const initialValues = {\r\n    id: brokerData?.id || null,\r\n    brokerName: brokerData?.brokerName || \"\",\r\n    grossFund: brokerData?.grossFund || 0,\r\n    grossFundInterest: brokerData?.grossFundInterest || 0,\r\n    grossFundSharing: brokerData?.grossFundSharing || 0,\r\n    arbitrageFund: brokerData?.arbitrageFund || 0,\r\n    arbitrageFundInterest: brokerData?.arbitrageFundInterest || 0,\r\n    arbitrageFundSharing: brokerData?.arbitrageFundSharing || 0,\r\n    propFund: brokerData?.propFund || 0,\r\n    propFundInterest: brokerData?.propFundInterest || 0,\r\n    propFundSharing: brokerData?.propFundSharing || 0,\r\n    costPerCr: brokerData?.costPerCr || 0,\r\n  };\r\n\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      if (values.id) {\r\n        await api.put(`/updateBroker/${values.id}`, values);\r\n        toast.success(\"Broker updated successfully.\");\r\n      } else {\r\n        await api.post(\"/createBroker\", values);\r\n        toast.success(\"Broker added successfully.\");\r\n      }\r\n      onFormSubmit();\r\n      resetForm();\r\n      handleClose();\r\n    } catch (error) {\r\n      console.error(error?.response?.data);\r\n      toast.error(error?.response?.data?.detail || \"An error occurred.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal open={open} onClose={handleClose}>\r\n      <Box\r\n        sx={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: 600,\r\n          bgcolor: \"background.paper\",\r\n          boxShadow: 24,\r\n          p: 4,\r\n          borderRadius: 2,\r\n          overflowY: \"auto\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h6\" sx={{ marginBottom: \"20px\" }}>\r\n          {initialValues.id ? \"Update Broker\" : \"Add Broker\"}\r\n        </Typography>\r\n\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={brokerValidationSchema}\r\n          onSubmit={handleSubmit}\r\n          enableReinitialize\r\n        >\r\n          {({ values, errors, touched, handleChange, handleBlur }) => (\r\n            <Form>\r\n              <div className=\"flex flex-col gap-4\">\r\n                {/* Broker Name */}\r\n                <TextField\r\n                  name=\"brokerName\"\r\n                  label=\"Broker Name\"\r\n                  value={values.brokerName}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  error={touched.brokerName && Boolean(errors.brokerName)}\r\n                  helperText={touched.brokerName && errors.brokerName}\r\n                  fullWidth\r\n                />\r\n\r\n                {/* Gross Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"grossFund\"\r\n                    label=\"Gross Fund (1Cr)\"\r\n                    value={values.grossFund}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.grossFund && Boolean(errors.grossFund)}\r\n                    helperText={touched.grossFund && errors.grossFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"grossFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.grossFundInterest}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.grossFundInterest &&\r\n                      Boolean(errors.grossFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.grossFundInterest && errors.grossFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"grossFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.grossFundSharing}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.grossFundSharing &&\r\n                      Boolean(errors.grossFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.grossFundSharing && errors.grossFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* Arbitrage Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"arbitrageFund\"\r\n                    label=\"Arbitrage Fund (1Cr)\"\r\n                    value={values.arbitrageFund}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.arbitrageFund && Boolean(errors.arbitrageFund)}\r\n                    helperText={\r\n                      touched.arbitrageFund && errors.arbitrageFund\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"arbitrageFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.arbitrageFundInterest}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.arbitrageFundInterest &&\r\n                      Boolean(errors.arbitrageFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.arbitrageFundInterest &&\r\n                      errors.arbitrageFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"arbitrageFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.arbitrageFundSharing}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.arbitrageFundSharing &&\r\n                      Boolean(errors.arbitrageFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.arbitrageFundSharing &&\r\n                      errors.arbitrageFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* Prop Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"propFund\"\r\n                    label=\"Prop Fund (1Cr)\"\r\n                    value={values.propFund}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.propFund && Boolean(errors.propFund)}\r\n                    helperText={touched.propFund && errors.propFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"propFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.propFundInterest}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.propFundInterest && Boolean(errors.propFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.propFundInterest && errors.propFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"propFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.propFundSharing}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.propFundSharing && Boolean(errors.propFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.propFundSharing && errors.propFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* Cost Per Cr */}\r\n                <TextField\r\n                  name=\"costPerCr\"\r\n                  label=\"Cost Per Cr\"\r\n                  value={values.costPerCr}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  error={touched.costPerCr && Boolean(errors.costPerCr)}\r\n                  helperText={touched.costPerCr && errors.costPerCr}\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                />\r\n\r\n                {/* Action Buttons */}\r\n                <div className=\"flex justify-end gap-4 mt-4\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={handleClose}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                    {initialValues.id ? \"Update Broker\" : \"Add Broker\"}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BrokerFormPopup;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { Button, TextField, IconButton } from \"@mui/material\";\r\nimport CustomTable from \"../table/CustomTable.jsx\";\r\nimport AdminLayout from \"../layouts/AdminLayout.jsx\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport BrokerFormPopup from \"../popups/BrokerFormPopup.jsx\";\r\nimport { Card } from \"@nextui-org/react\";\r\nimport { IoSearch, IoAddCircleOutline } from \"react-icons/io5\";\r\nimport { CiMenuKebab } from \"react-icons/ci\";\r\nimport {\r\n  Dropdown,\r\n  DropdownTrigger,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"@nextui-org/react\";\r\n\r\n// Column Titles\r\n// const brokerTableTitle = [\r\n//   \"Broker Name\",\r\n//   \"Start Date\",\r\n//   \"Release Date\",\r\n//   \"Gross Fund\",\r\n//   \"Arbitrage Fund\",\r\n//   \"Total Fund\",\r\n//   \"Prop Fund\",\r\n//   \"Action\",\r\n// ];\r\n\r\nconst brokerTableTitle = [\r\n  \"BrokerName\",\r\n  \"GrossFund\",\r\n  \"ArbitrageFund\",\r\n  \"PropFund\",\r\n  // \"Interest\",\r\n  // \"Sharing\",\r\n  \"CostPerCr\",\r\n  \"Total Fund\",\r\n  \"Start Date\",\r\n  \"Realease Date\",\r\n  \"Action\",\r\n];\r\n\r\nconst AdminSettings = () => {\r\n  const [brokerData, setBrokerData] = useState([]);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [loader, setLoader] = useState(false);\r\n  const [selectedBroker, setSelectedBroker] = useState(null);\r\n\r\n  // Fetch Brokers Data\r\n  const getBrokerData = useCallback(async () => {\r\n    setLoader(true);\r\n    try {\r\n      const response = await api.get(\"/getAllBroker\");\r\n      if (response.status === 200) {\r\n        const formattedData = response.data?.data?.map((broker) => ({\r\n          \"Broker Name\": broker.brokerName,\r\n          \"Gross Fund\":\r\n            broker.grossFund !== undefined\r\n              ? `I ${broker.grossFundInterest} | F ${broker.grossFund} | S ${broker.grossFundSharing}`\r\n              : \"-\",\r\n\r\n          // Arbitrage Fund (Merged: Fund | Interest | Sharing)\r\n          \"Arbitrage Fund\":\r\n            broker.arbitrageFund !== undefined\r\n              ? `I ${broker.arbitrageFundInterest} | F ${broker.arbitrageFund} | S ${broker.arbitrageFundSharing}`\r\n              : \"-\",\r\n\r\n          // Prop Fund (Merged: Fund | Interest | Sharing)\r\n          \"Prop Fund\":\r\n            broker.propFund !== undefined\r\n              ? `I ${broker.propFundInterest} | F ${broker.propFund} | S ${broker.propFundSharing}`\r\n              : \"-\",\r\n\r\n          \"Cost Per Cr\": broker.costPerCr || \"-\",\r\n\r\n          // Total Fund Calculation (Summing all fund values)\r\n          \"Total Fund\":\r\n            broker.grossFund !== undefined &&\r\n            broker.arbitrageFund !== undefined &&\r\n            broker.propFund !== undefined\r\n              ? broker.grossFund + broker.arbitrageFund + broker.propFund\r\n              : \"-\",\r\n\r\n          \"Start Date\": broker.startDate || \"-\",\r\n          \"Release Date\": broker.releaseDate || \"-\",\r\n\r\n          Action: (\r\n            <Dropdown>\r\n              <DropdownTrigger>\r\n                <IconButton>\r\n                  <CiMenuKebab />\r\n                </IconButton>\r\n              </DropdownTrigger>\r\n              <DropdownMenu\r\n                aria-label=\"Action menu\"\r\n                onAction={(key) => handleDropdownAction(key, broker)}\r\n              >\r\n                <DropdownItem key=\"release\" isDisabled={broker.status === 3}>\r\n                  Release\r\n                </DropdownItem>\r\n                <DropdownItem key=\"edit\" isDisabled={broker.status === 3}>\r\n                  Edit\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          ),\r\n        }));\r\n        setBrokerData(formattedData);\r\n      } else {\r\n        toast.error(\"Failed to fetch broker data.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching broker data.\");\r\n    } finally {\r\n      setLoader(false);\r\n    }\r\n  }, []);\r\n\r\n  // Handle Dropdown Actions\r\n  const handleDropdownAction = (action, broker) => {\r\n    if (action === \"release\") {\r\n      releaseBroker(broker);\r\n    } else if (action === \"edit\") {\r\n      setSelectedBroker(broker);\r\n      setAnchorEl(document.body);\r\n    }\r\n  };\r\n\r\n  // Release Broker\r\n  const releaseBroker = async (broker) => {\r\n    try {\r\n      const response = await api.put(`/releaseBroker/${broker.id}/3`);\r\n      if (response.status === 200) {\r\n        toast.success(`Broker \"${broker.brokerName}\" released successfully.`);\r\n        getBrokerData();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error releasing broker.\");\r\n    }\r\n  };\r\n\r\n  // Open and Close Popover\r\n  const handleClickPopover = (event) => setAnchorEl(event.currentTarget);\r\n  const handleClosePopover = () => {\r\n    setAnchorEl(null);\r\n    setSelectedBroker(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrokerData();\r\n  }, [getBrokerData]);\r\n\r\n  return (\r\n    <AdminLayout\r\n      pageTitle=\"Brokers\"\r\n      pageSubtitle=\"Add, view, and release brokers\"\r\n    >\r\n      <Card\r\n        className=\"settings-mainCard\"\r\n        style={{ marginTop: \"1rem\", width: \"100%\", overflowY: \"scroll\" }}\r\n      >\r\n        <div className=\"flex justify-between p-4 align-middle broker-form\">\r\n          <TextField\r\n            className=\"searchUser\"\r\n            placeholder=\"Search\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <IoSearch />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleClickPopover}\r\n            startIcon={<IoAddCircleOutline />}\r\n          >\r\n            Add Broker\r\n          </Button>\r\n        </div>\r\n\r\n        <BrokerFormPopup\r\n          anchorEl={anchorEl}\r\n          open={Boolean(anchorEl)}\r\n          handleClose={handleClosePopover}\r\n          onFormSubmit={getBrokerData}\r\n          brokerData={selectedBroker}\r\n        />\r\n\r\n        <div className=\"mt-4\">\r\n          <CustomTable\r\n            columnWidths={[\r\n              \"10%\",\r\n              \"10%\",\r\n              \"10%\",\r\n              \"10%\",\r\n              \"15%\",\r\n              \"10%\",\r\n              \"10%\",\r\n              \"10%\",\r\n              \"40%\",\r\n              \"15%\",\r\n              \"10%\",\r\n            ]}\r\n            title={brokerTableTitle}\r\n            tableData={brokerData}\r\n            loading={loader}\r\n          />\r\n        </div>\r\n      </Card>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminSettings;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\n\r\nconst CustomTable = ({\r\n  title = [],\r\n  columnWidths = [],\r\n  tableData = [],\r\n  renderAction,\r\n  loading,\r\n}) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n\r\n  const handleChangePage = (event, newPage) => setPage(newPage);\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending =\r\n        prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n    return [...tableData].sort((a, b) => {\r\n      if (a[sortConfig.key] < b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      }\r\n      if (a[sortConfig.key] > b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  const paginatedData = sortedData.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const handleButtonClick = (status, id) => {\r\n    if (status === 1) {\r\n      renderAction(id);\r\n    } else {\r\n      renderAction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper className=\"custom\">\r\n      <TableContainer>\r\n        <Table className=\"tble-custom\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {title.map((header, index) => {\r\n                // Merge \"Gross Fund\" if it exists\r\n                if (header === \"Gross Fund\") {\r\n                  return (\r\n                    <TableCell\r\n                      key=\"grossFund\"\r\n                      align=\"center\"\r\n                      sx={{ fontWeight: \"bold\", minWidth: 200, maxWidth: 300 }}\r\n                    >\r\n                      <TableSortLabel\r\n                        active={sortConfig.key === \"grossFund\"}\r\n                        direction={\r\n                          sortConfig.key === \"grossFund\"\r\n                            ? sortConfig.direction\r\n                            : \"asc\"\r\n                        }\r\n                        onClick={() => handleSort(\"grossFund\")}\r\n                      >\r\n                        Gross Fund (Fund | Interest | Sharing)\r\n                      </TableSortLabel>\r\n                    </TableCell>\r\n                  );\r\n                }\r\n                return (\r\n                  <TableCell\r\n                    key={index}\r\n                    align=\"center\"\r\n                    sx={{\r\n                      fontWeight: \"bold\",\r\n                      width: columnWidths[index] || \"auto\",\r\n                      minWidth: columnWidths[index] || 150,\r\n                      maxWidth: columnWidths[index] || 300,\r\n                    }}\r\n                  >\r\n                    <TableSortLabel\r\n                      active={sortConfig.key === header.toLowerCase()}\r\n                      direction={\r\n                        sortConfig.key === header.toLowerCase()\r\n                          ? sortConfig.direction\r\n                          : \"asc\"\r\n                      }\r\n                      onClick={() => handleSort(header.toLowerCase())}\r\n                    >\r\n                      {header}\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            {loading && (\r\n              <TableRow>\r\n                <TableCell colSpan={title.length} className=\"middle-noData\">\r\n                  <CircularProgress />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n            {paginatedData.map((rowData, rowIndex) => (\r\n              <TableRow key={rowIndex}>\r\n                {Object.keys(rowData).map((key, colIndex) => {\r\n                  if (\r\n                    [\r\n                      \"status\",\r\n                      \"id\",\r\n                      \"brokerId\",\r\n                      \"fundAllocated\",\r\n                      \"Record Id\",\r\n                    ].includes(key)\r\n                  )\r\n                    return null;\r\n\r\n                  // Merge \"Gross Fund\" columns dynamically\r\n                  if (key === \"grossFund\") {\r\n                    return (\r\n                      <TableCell\r\n                        key={`${rowIndex}-grossFund`}\r\n                        align=\"center\"\r\n                        sx={{\r\n                          minWidth: 200,\r\n                          maxWidth: 300,\r\n                          whiteSpace: \"nowrap\",\r\n                          overflow: \"hidden\",\r\n                          textOverflow: \"ellipsis\",\r\n                        }}\r\n                      >\r\n                        {`${rowData[\"grossFund\"]} | ${rowData[\"grossFundInterest\"]} | ${rowData[\"grossFundSharing\"]}`}\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  return (\r\n                    <TableCell\r\n                      key={`${rowIndex}-${colIndex}`}\r\n                      align=\"center\"\r\n                      sx={{\r\n                        width: columnWidths[colIndex] || \"auto\",\r\n                        minWidth: columnWidths[colIndex] || 150,\r\n                        maxWidth: columnWidths[colIndex] || 300,\r\n                        whiteSpace: \"nowrap\",\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\",\r\n                      }}\r\n                    >\r\n                      {key === \"action\" && renderAction ? (\r\n                        <Button\r\n                          isDisabled={rowData[\"status\"] === 3}\r\n                          onPress={() =>\r\n                            handleButtonClick(rowData[\"status\"], rowData[\"id\"])\r\n                          }\r\n                        >\r\n                          {rowData[\"status\"] === 1 ? \"Release\" : \"Released\"}\r\n                        </Button>\r\n                      ) : (\r\n                        rowData[key]\r\n                      )}\r\n                    </TableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n            {!loading && paginatedData.length === 0 && (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={title.length}\r\n                  className=\"middle-noData\"\r\n                  align=\"center\"\r\n                >\r\n                  No data found.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={tableData.length}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        rowsPerPage={rowsPerPage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 15]}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:'http://43.204.150.47:8000',\r\n  timeout:5000\r\n})\r\n\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api"],"names":["brokerValidationSchema","Yup","shape","brokerName","required","grossFund","typeError","min","grossFundInterest","max","grossFundSharing","arbitrageFund","arbitrageFundInterest","arbitrageFundSharing","propFund","propFundInterest","propFundSharing","costPerCr","_ref","open","handleClose","onFormSubmit","brokerData","initialValues","id","_jsx","Modal","onClose","children","_jsxs","Box","sx","position","top","left","transform","width","bgcolor","boxShadow","p","borderRadius","overflowY","Typography","variant","marginBottom","Formik","validationSchema","onSubmit","async","values","_ref2","resetForm","api","put","concat","toast","success","post","error","_error$response","_error$response2","_error$response2$data","console","response","data","detail","enableReinitialize","_ref3","errors","touched","handleChange","handleBlur","Form","className","TextField","name","label","value","onChange","onBlur","Boolean","helperText","fullWidth","margin","Button","color","onClick","type","brokerTableTitle","AdminSettings","setBrokerData","useState","anchorEl","setAnchorEl","loader","setLoader","selectedBroker","setSelectedBroker","getBrokerData","useCallback","get","status","_response$data","_response$data$data","formattedData","map","broker","undefined","startDate","releaseDate","Action","Dropdown","DropdownTrigger","IconButton","CiMenuKebab","DropdownMenu","onAction","key","handleDropdownAction","DropdownItem","isDisabled","action","releaseBroker","document","body","useEffect","AdminLayout","pageTitle","pageSubtitle","Card","style","marginTop","placeholder","InputProps","startAdornment","InputAdornment","IoSearch","event","currentTarget","startIcon","IoAddCircleOutline","BrokerFormPopup","handleClosePopover","CustomTable","columnWidths","title","tableData","loading","renderAction","page","setPage","rowsPerPage","setRowsPerPage","sortConfig","setSortConfig","direction","handleSort","columnKey","prevConfig","isAscending","paginatedData","React","sort","a","b","slice","Paper","TableContainer","Table","TableHead","TableRow","header","index","TableCell","align","fontWeight","minWidth","maxWidth","TableSortLabel","active","toLowerCase","TableBody","colSpan","length","CircularProgress","rowData","rowIndex","Object","keys","colIndex","includes","whiteSpace","overflow","textOverflow","onPress","handleButtonClick","TablePagination","component","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","axios","create","baseURL","timeout","interceptors","request","use","config","headers","Authorization","localStorage","getItem","Promise","reject","log","message"],"sourceRoot":""}