{"version":3,"file":"static/js/867.f56f9de3.chunk.js","mappings":"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","sources":["component/popups/BrokerFormPopup.jsx","component/pages/SettingsPage.jsx","component/table/CustomTable.jsx","config/AxiosCofig.js"],"sourcesContent":["import { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Button, TextField, Typography, Modal, Box } from \"@mui/material\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Validation Schema\r\nconst brokerValidationSchema = Yup.object().shape({\r\n  brokerName: Yup.string().required(\"Broker Name is required\"),\r\n  grossFund: Yup.number()\r\n    .typeError(\"Gross Fund must be a number\")\r\n    .required(\"Gross Fund is required\"),\r\n  arbitrageFund: Yup.number()\r\n    .typeError(\"Arbitrage Fund must be a number\")\r\n    .required(\"Arbitrage Fund is required\"),\r\n  propFund: Yup.number()\r\n    .typeError(\"Prop Fund must be a number\")\r\n    .required(\"Prop Fund is required\"),\r\n});\r\n\r\nconst BrokerFormPopup = ({ open, handleClose, onFormSubmit }) => {\r\n  const initialValues = {\r\n    brokerName: \"\",\r\n    grossFund: \"\",\r\n    arbitrageFund: \"\",\r\n    propFund: \"\",\r\n  };\r\n\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      await api.post(\"/createBroker\", values);\r\n      toast.success(\"Broker added successfully.\");\r\n      onFormSubmit();\r\n      resetForm();\r\n      handleClose(); // Close the modal after successful submission\r\n    } catch (error) {\r\n      toast.error(\"Error adding broker.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal open={open} onClose={handleClose}>\r\n      <Box\r\n        sx={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: 600,\r\n          bgcolor: \"background.paper\",\r\n          boxShadow: 24,\r\n          p: 4,\r\n          borderRadius: 2,\r\n          overflowY: \"scroll\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h6\" sx={{ marginBottom: \"20px\" }}>\r\n          Add Broker\r\n        </Typography>\r\n\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={brokerValidationSchema}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            setFieldValue,\r\n          }) => (\r\n            <Form>\r\n              <div className=\"flex flex-col gap-2\">\r\n                <TextField\r\n                  name=\"brokerName\"\r\n                  label=\"Broker Name\"\r\n                  value={values.brokerName}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  error={touched.brokerName && Boolean(errors.brokerName)}\r\n                  helperText={touched.brokerName && errors.brokerName}\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                />\r\n                <TextField\r\n                  name=\"grossFund\"\r\n                  label=\"Gross Fund\"\r\n                  value={values.grossFund}\r\n                  onChange={(e) => {\r\n                    const numericValue = e.target.value.replace(/[^0-9]/g, \"\");\r\n                    setFieldValue(\"grossFund\", numericValue);\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  error={touched.grossFund && Boolean(errors.grossFund)}\r\n                  helperText={touched.grossFund && errors.grossFund}\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                />\r\n                <TextField\r\n                  name=\"arbitrageFund\"\r\n                  label=\"Arbitrage Fund\"\r\n                  value={values.arbitrageFund}\r\n                  onChange={(e) => {\r\n                    const numericValue = e.target.value.replace(/[^0-9]/g, \"\");\r\n                    setFieldValue(\"arbitrageFund\", numericValue);\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  error={touched.arbitrageFund && Boolean(errors.arbitrageFund)}\r\n                  helperText={touched.arbitrageFund && errors.arbitrageFund}\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                />\r\n                <TextField\r\n                  name=\"propFund\"\r\n                  label=\"Prop Fund\"\r\n                  value={values.propFund}\r\n                  onChange={(e) => {\r\n                    const numericValue = e.target.value.replace(/[^0-9]/g, \"\");\r\n                    setFieldValue(\"propFund\", numericValue);\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  error={touched.propFund && Boolean(errors.propFund)}\r\n                  helperText={touched.propFund && errors.propFund}\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                />\r\n              </div>\r\n\r\n              <div style={{ marginTop: \"20px\" }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  onClick={handleClose}\r\n                  style={{ marginRight: \"10px\" }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                  Add Broker\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BrokerFormPopup;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport CustomTable from \"../table/CustomTable.jsx\";\r\nimport AdminLayout from \"../layouts/AdminLayout.jsx\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport BrokerFormPopup from \"../popups/BrokerFormPopup.jsx\";\r\nimport { Card } from \"@nextui-org/react\";\r\nimport { IoSearch } from \"react-icons/io5\";\r\n\r\n// Column Titles\r\nconst brokerTableTitle = [\r\n  \"Broker Name\",\r\n  \"Start Date\",\r\n  \"Release Date\",\r\n  \"Gross Fund\",\r\n  \"Arbitrage Fund\",\r\n  \"Total Fund\",\r\n  \"Prop Fund\",\r\n  \"Action\",\r\n];\r\n\r\nconst AdminSettings = () => {\r\n  const [brokerData, setBrokerData] = useState([]);\r\n  const [anchorEl, setAnchorEl] = useState(null); // State for Popover anchor\r\n\r\n  // Fetch Brokers Data\r\n  const getBrokerData = async () => {\r\n    try {\r\n      const response = await api.get(\"/getAllBroker\");\r\n      if (response.status === 200) {\r\n        const formattedData = response?.data?.data.map((broker) => ({\r\n          \"Broker Name\": broker.brokerName,\r\n          \"Start Date\": broker.startDate || \"-\",\r\n          \"Release Date\": broker.releaseDate || \"-\",\r\n          \"Gross Fund\": broker.grossfund || \"-\",\r\n          \"Arbitrage Fund\": broker.arbitragefund || \"-\",\r\n          \"Prop Fund\": broker.propfund || \"-\",\r\n          \"Total Fund\": broker.grossfund + broker.arbitragefund || \"-\",\r\n          Action: (\r\n            <div key={`action-${broker.id}`} className=\"action-buttons\">\r\n              <Button\r\n                key={`release-${broker.id}`}\r\n                onClick={() => releaseBroker(broker)}\r\n                size=\"small\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={broker.status === 3}\r\n              >\r\n                {broker.status === 3 ? \"Released\" : \"Release\"}\r\n              </Button>\r\n            </div>\r\n          ),\r\n        }));\r\n        setBrokerData(formattedData);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching broker data.\");\r\n    }\r\n  };\r\n\r\n  // Release Broker Function\r\n  const releaseBroker = async (broker) => {\r\n    try {\r\n      console.log(broker.id, \"====================\");\r\n      const response = await api.put(`/releaseBroker/${broker.id}/3`);\r\n      if (response.status === 200) {\r\n        toast.success(`Released broker: ${broker.brokerName}`);\r\n        getBrokerData();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error releasing broker.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrokerData();\r\n  }, []);\r\n\r\n  // Handle Popover Open and Close\r\n  const handleClickPopover = (event) => {\r\n    setAnchorEl(event.currentTarget); // Open the popover\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setAnchorEl(null); // Close the popover\r\n  };\r\n\r\n  return (\r\n    <AdminLayout\r\n      pageTitle=\"Brokers\"\r\n      pageSubtitle=\"Add, view and release brokers\"\r\n    >\r\n      <Card classNames=\"settings-mainCard\" style={{ marginTop: \"1rem\" }}>\r\n        {/* Button to Open Popover */}\r\n        <div className=\"flex justify-between p-4 align-middle broker-form\">\r\n          <TextField\r\n            className=\"searchUser\"\r\n            placeholder=\"Search\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <IoSearch />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleClickPopover}\r\n          >\r\n            Add Broker\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Broker Form Popover Component */}\r\n        <BrokerFormPopup\r\n          anchorEl={anchorEl}\r\n          open={Boolean(anchorEl)}\r\n          handleClose={handleClosePopover}\r\n          onFormSubmit={getBrokerData} // Refresh broker data after form submission\r\n        />\r\n\r\n        {/* Table of Brokers */}\r\n        <div className=\"mt-4\">\r\n          <CustomTable title={brokerTableTitle} tableData={brokerData} />\r\n        </div>\r\n      </Card>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminSettings;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  TableSortLabel,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\n\r\nconst CustomTable = ({ title = [], tableData = [], renderAction }) => {\r\n  // State for pagination\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  // State for sorting\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n\r\n  // Handle page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  // Handle rows per page change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Handle sorting\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending =\r\n        prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  // Sort data based on the sort configuration\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n    return [...tableData].sort((a, b) => {\r\n      if (a[sortConfig.key] < b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      }\r\n      if (a[sortConfig.key] > b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  // Paginate the sorted data\r\n  const paginatedData = sortedData.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const handleButtonClick = (status, id) => {\r\n    if (status === 1) {\r\n      renderAction(id);\r\n    } else {\r\n      renderAction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper} className=\"custom\">\r\n      <Table>\r\n        {/* Table Header with Sorting */}\r\n        <TableHead>\r\n          <TableRow>\r\n            {title.map((header, index) => (\r\n              <TableCell key={index} align=\"center\" sx={{ fontWeight: \"bold\" }}>\r\n                <TableSortLabel\r\n                  active={sortConfig.key === header.toLowerCase()}\r\n                  direction={\r\n                    sortConfig.key === header.toLowerCase()\r\n                      ? sortConfig.direction\r\n                      : \"asc\"\r\n                  }\r\n                  onClick={() => handleSort(header.toLowerCase())}\r\n                >\r\n                  {header}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        {/* Table Body */}\r\n        <TableBody>\r\n          {paginatedData.map((rowData, rowIndex) => (\r\n            <TableRow key={rowIndex}>\r\n              {Object.keys(rowData).map((key, colIndex) => {\r\n                // Skip specific keys dynamically\r\n                \r\n                if ([\"status\", \"id\", \"brokerId\", \"fundAllocated\", \"Record Id\"].includes(key)) return null;\r\n                return (\r\n                  <TableCell key={`${rowIndex}-${colIndex}`} align=\"center\">\r\n                    {key === \"action\" && renderAction ? (\r\n                      <Button\r\n                        isDisabled={rowData[\"status\"] === 3}\r\n                        onPress={() =>\r\n                          handleButtonClick(rowData[\"status\"], rowData[\"id\"])\r\n                        }\r\n                      >\r\n                        {rowData[\"status\"] === 1 ? \"Release\" : \"Released\"}\r\n                      </Button>\r\n                    ) : (\r\n                      rowData[key]\r\n                    )}\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n          {\r\n            paginatedData && paginatedData.length === 0 && (\r\n              <TableRow style={{ textAlign: 'center' }}>\r\n                <TableCell colSpan={title.length} className=\"middle-noData\">No data found.</TableCell>\r\n              </TableRow>\r\n            )\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* Pagination Controls */}\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={tableData.length}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        rowsPerPage={rowsPerPage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 15]}\r\n      />\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:'http://43.204.150.47:8000',\r\n  timeout:5000\r\n})\r\n\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api"],"names":["brokerValidationSchema","Yup","shape","brokerName","required","grossFund","typeError","arbitrageFund","propFund","_ref","open","handleClose","onFormSubmit","_jsx","Modal","onClose","children","_jsxs","Box","sx","position","top","left","transform","width","bgcolor","boxShadow","p","borderRadius","overflowY","Typography","variant","marginBottom","Formik","initialValues","validationSchema","onSubmit","async","values","_ref2","resetForm","api","post","toast","success","error","_ref3","errors","touched","handleChange","handleBlur","setFieldValue","Form","className","TextField","name","label","value","onChange","onBlur","Boolean","helperText","fullWidth","margin","e","numericValue","target","replace","style","marginTop","Button","color","onClick","marginRight","type","brokerTableTitle","AdminSettings","brokerData","setBrokerData","useState","anchorEl","setAnchorEl","getBrokerData","response","get","status","_response$data","formattedData","data","map","broker","startDate","releaseDate","grossfund","arbitragefund","propfund","Action","releaseBroker","size","disabled","concat","id","console","log","put","useEffect","AdminLayout","pageTitle","pageSubtitle","Card","classNames","placeholder","InputProps","startAdornment","InputAdornment","IoSearch","event","currentTarget","BrokerFormPopup","handleClosePopover","CustomTable","title","tableData","renderAction","page","setPage","rowsPerPage","setRowsPerPage","sortConfig","setSortConfig","key","direction","paginatedData","React","sort","a","b","slice","TableContainer","component","Paper","Table","TableHead","TableRow","header","index","TableCell","align","fontWeight","TableSortLabel","active","toLowerCase","handleSort","columnKey","prevConfig","isAscending","TableBody","rowData","rowIndex","Object","keys","colIndex","includes","isDisabled","onPress","handleButtonClick","length","textAlign","colSpan","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","axios","create","baseURL","timeout","interceptors","request","use","config","headers","Authorization","localStorage","getItem","Promise","reject","message"],"sourceRoot":""}