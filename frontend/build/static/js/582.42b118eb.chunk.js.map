{"version":3,"file":"static/js/582.42b118eb.chunk.js","mappings":"2RAYA,MAuCA,EAvCoBA,IAAmD,IAAlD,MAAEC,EAAQ,GAAE,UAAEC,EAAY,GAAE,aAAEC,GAAcH,EAC/D,OACEI,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAOC,UAAU,SAAQC,UAClDC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAF,SAAA,EAEJL,EAAAA,EAAAA,KAACQ,EAAAA,EAAS,CAAAH,UACRL,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,CAAAJ,SACNR,EAAMa,KAAI,CAACC,EAAQC,KAClBZ,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CAAaC,MAAM,SAASC,GAAI,CAAEC,WAAY,QAASX,SAC9DM,GADaC,UAOtBZ,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CAAAZ,SACPP,EAAUY,KAAI,CAACQ,EAASC,KACvBnB,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,CAAAJ,SACNe,OAAOC,KAAKH,GAASR,KAAI,CAACY,EAAKC,IAClB,WAARD,GACQ,OAARA,EADyB,MAG3BtB,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CAAiCC,MAAM,SAAQT,SAC9C,WAARiB,GAAoBvB,GAChBC,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACC,WAAiC,GAArBP,EAAgB,OAAQQ,QAASA,KACjC,GAArBR,EAAgB,OAASnB,EAAamB,EAAY,IAAKnB,GAAc,EACrEM,SAAwB,GAArBa,EAAgB,OAAS,UAAY,aACxCA,EAAQI,IAAI,GAAAK,OALCR,EAAQ,KAAAQ,OAAIJ,OALtBJ,WAkBN,E,oDCrCrB,MAAMS,EAAyBC,EAAAA,KAAaC,MAAM,CAChDC,SAAUF,EAAAA,KAAaG,SAAS,kBAChCC,WAAYJ,EAAAA,KAAaG,SAAS,2BAClCE,cAAeL,EAAAA,KACZM,UAAU,oCACVH,SAAS,iCAGRI,EAAmB,CACvB,KACA,cACA,kBACA,aACA,eACA,UAiJF,EA7IsBC,KACpB,MAAOC,EAAWC,IAAiBC,EAAAA,EAAAA,UAAS,IAEtCC,EAAgBC,UACpB,IACEC,QAAQC,IAAIN,GACZ,MAAMO,QAAoBC,EAAAA,EAAIC,IAAI,kBAADpB,OAAmBqB,EAAU,IAAI,IAClEL,QAAQC,IAAIC,GACe,MAAvBA,EAAYI,SACdC,IACAC,EAAAA,GAAMC,KAAK,qBAADzB,OAAsBqB,IAEpC,CAAE,MAAOK,GACPV,QAAQW,MAAMD,GACdF,EAAAA,GAAMG,MAAMD,EAAIE,QAClB,CACAZ,QAAQa,KAAK,oBAAqBR,EAAW,EAoBzCE,EAAgBR,UACpB,IACE,MACMe,SADmBX,EAAAA,EAAIY,IAAI,kBACAC,KAAKA,KAAKjD,KAAKkD,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC/CD,GAAI,IACPE,OAAQA,IAAMrB,EAAcmB,OAE9BrB,EAAckB,EAChB,CAAE,MAAOH,GACPX,QAAQW,MAAMA,GACdH,EAAAA,GAAMG,MAAMA,EAAMC,QACpB,IAGFQ,EAAAA,EAAAA,YAAU,KACRb,GAAe,GACd,IAsBH,OACElD,EAAAA,EAAAA,KAACgE,EAAAA,EAAW,CAACC,UAAU,WAAWC,aAAa,0BAAyB7D,UACtEL,EAAAA,EAAAA,KAACmE,EAAAA,EAAI,CAAC/D,UAAU,oBAAmBC,UACjCC,EAAAA,EAAAA,MAAC6D,EAAAA,EAAI,CAAA9D,SAAA,EACHL,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAACC,QAAQ,KAAKjE,UAAU,eAAcC,SAAC,aAGlDL,EAAAA,EAAAA,KAACsE,EAAAA,GAAM,CACLC,cA5BY,CACpBxC,SAAU,GACVE,WAAY,GACZC,cAAe,IA0BPsC,iBAAkB5C,EAClB6C,SAxBW/B,MAAOgC,EAAM9E,KAAqB,IAAnB,UAAE+E,GAAW/E,EAC/C,IACE,MAAMgF,QAAY9B,EAAAA,EAAI+B,KAAK,gBAAiBH,GACzB,MAAfE,EAAI3B,SACNE,EAAAA,GAAM2B,QAAQF,EAAIjB,KAAKJ,SACvBL,KAEFyB,GACF,CAAE,MAAOtB,GACPV,QAAQW,MAAMD,GACdF,EAAAA,GAAMG,MAAM,sBACd,GAa+BjD,SAEtB0E,IAAA,IAAC,OAAEL,EAAM,OAAEM,EAAM,QAAEC,EAAO,aAAEC,EAAY,WAAEC,GAAYJ,EAAA,OACrDzE,EAAAA,EAAAA,MAAC8E,EAAAA,GAAI,CAAChF,UAAU,yBAAwBC,SAAA,EACtCL,EAAAA,EAAAA,KAAA,OAAKI,UAAU,SAAQC,UACrBL,EAAAA,EAAAA,KAACqF,EAAAA,EAAK,CACJC,KAAK,WACLC,MAAM,KACNC,MAAOd,EAAO3C,SACd0D,SAAUP,EACVQ,OAAQP,EACR7B,MAAO2B,EAAQlD,UAAYiD,EAAOjD,SAClC4D,WAAYV,EAAQlD,UAAYiD,EAAOjD,cAG3C/B,EAAAA,EAAAA,KAAA,OAAKI,UAAU,SAAQC,UACrBL,EAAAA,EAAAA,KAACqF,EAAAA,EAAK,CACJC,KAAK,aACLC,MAAM,cACNC,MAAOd,EAAOzC,WACdwD,SAAUP,EACVQ,OAAQP,EACR7B,MAAO2B,EAAQhD,YAAc+C,EAAO/C,WACpC0D,WAAYV,EAAQhD,YAAc+C,EAAO/C,gBAG7CjC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,SAAQC,UACrBL,EAAAA,EAAAA,KAACqF,EAAAA,EAAK,CACJC,KAAK,gBACLC,MAAM,kBACNC,MAAOd,EAAOxC,cACduD,SAAUP,EACVQ,OAAQP,EACR7B,MAAO2B,EAAQ/C,eAAiB8C,EAAO9C,cACvCyD,WAAYV,EAAQ/C,eAAiB8C,EAAO9C,mBAGhDlC,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACoE,KAAK,SAASxF,UAAU,aAAYC,SAAC,iBAGxC,KAIXL,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAMC,UACnBL,EAAAA,EAAAA,KAAC6F,EAAW,CACVhG,MAAOuC,EACPtC,UAAWwC,EACXvC,aAAc0C,YAKV,C,kCCnKlB,MAAMK,E,QAAMgD,EAAMC,OAAO,CACvBC,QAAQ,4BACRC,QAAQ,MAGVnD,EAAIoD,aAAaC,QAAQC,KACtBC,IACCA,EAAOC,QAAQC,cAAa,UAAA5E,OAAa6E,aAAaC,QAAQ,UACvDJ,KAER/C,IAECX,QAAQW,MAAM,6BAA8BA,GACrCoD,QAAQC,OAAOrD,MAI1BR,EAAIoD,aAAaU,SAASR,KACvBQ,IACCjE,QAAQC,IAAI,2CACLgE,KAERtD,IACKA,EAAMsD,UAAsC,MAA1BtD,EAAMsD,SAAS3D,OACnCN,QAAQW,MAAM,oEAEdX,QAAQW,MAAM,8BAA+BA,EAAMC,SAE9CmD,QAAQC,OAAOrD,MAI1B,S","sources":["component/table/CustomTable.jsx","component/pages/SettingsPage.jsx","config/AxiosCofig.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\n\r\nconst CustomTable = ({ title = [], tableData = [], renderAction }) => {\r\n  return (\r\n    <TableContainer component={Paper} className=\"custom\">\r\n      <Table>\r\n        {/* Table Header */}\r\n        <TableHead>\r\n          <TableRow>\r\n            {title.map((header, index) => (\r\n              <TableCell key={index} align=\"center\" sx={{ fontWeight: \"bold\" }}>\r\n                {header}\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        {/* Table Body */}\r\n        <TableBody>\r\n          {tableData.map((rowData, rowIndex) => (\r\n            <TableRow key={rowIndex}>\r\n              {Object.keys(rowData).map((key, colIndex) => {\r\n                if (key === \"status\") return null; \r\n                if (key === \"id\") return null;// Skip \"status\" key\r\n                return (\r\n                  <TableCell key={`${rowIndex}-${colIndex}`} align=\"center\">\r\n                    {key === \"action\" && renderAction\r\n                      ? (<Button isDisabled={rowData[\"status\"] == 3} onPress={()=>{\r\n                        rowData[\"status\"] == 1 ? renderAction(rowData[\"id\"]) : renderAction()\r\n                      }}>{ rowData[\"status\"] == 1 ? \"Release\" : \"Released\"}</Button>) // Pass the full `rowData` to the action renderer\r\n                      : rowData[key]}\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Typography } from \"@mui/material\";\r\nimport CustomTable from \"../table/CustomTable.jsx\";\r\nimport AdminLayout from \"../layouts/AdminLayout.jsx\";\r\nimport { Card, Button, Input } from \"@nextui-org/react\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst brokerValidationSchema = Yup.object().shape({\r\n  brokerId: Yup.string().required(\"ID is required\"),\r\n  brokerName: Yup.string().required(\"Broker Name is required\"),\r\n  fundAllocated: Yup.number()\r\n    .typeError(\"Funds Allocated must be a number\")\r\n    .required(\"Funds Allocated is required\"),\r\n});\r\n\r\nconst brokerTableTitle = [\r\n  \"ID\",\r\n  \"Broker Name\",\r\n  \"Funds Allocated\",\r\n  \"Start Date\",\r\n  \"Release Date\",\r\n  \"Action\",\r\n];\r\n\r\n\r\nconst AdminSettings = () => {\r\n  const [bokerData, setBrokerData] = useState([]);\r\n\r\n  const releaseBroker = async (brokerData) => {\r\n    try {\r\n      console.log(bokerData)\r\n      const releaseData = await api.put(`/releaseBroker/${brokerData}/${3}`);\r\n      console.log(releaseData)\r\n      if (releaseData.status === 200) {\r\n        getBrokerData();\r\n        toast.info(`Releasing broker: ${brokerData}`);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(err.message);\r\n    }\r\n    console.warn(\"Releasing Broker:\", brokerData);\r\n    // You can perform additional actions here, such as making an API call\r\n  };\r\n\r\n  const unreleaseBroker = async (brokerData) => {\r\n    try {\r\n      const releaseData = api.put(`/releaseBroker/${brokerData.id}/1`);\r\n      console.log(releaseData)\r\n      if (releaseData.status === 200) {\r\n        toast.info(`Releasing broker: ${brokerData.brokerName}`);\r\n        getBrokerData();\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(err.message);\r\n    }\r\n    console.warn(\"Releasing Broker:\", brokerData);\r\n    // You can perform additional actions here, such as making an API call\r\n  };\r\n\r\n  const getBrokerData = async () => {\r\n    try {\r\n      const brokerData = await api.get(\"/getAllBroker\");\r\n      const formattedData = brokerData.data.data.map((rest) => ({\r\n        ...rest,\r\n        action: () => releaseBroker(rest), // Pass the entire row data\r\n      }));\r\n      setBrokerData(formattedData);\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrokerData();\r\n  }, []);\r\n\r\n  const initialValues = {\r\n    brokerId: \"\",\r\n    brokerName: \"\",\r\n    fundAllocated: \"\",\r\n  };\r\n\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      const res = await api.post(\"/createBroker\", values);\r\n      if (res.status === 200) {\r\n        toast.success(res.data.message);\r\n        getBrokerData();\r\n      }\r\n      resetForm();\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(\"Error adding broker\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AdminLayout pageTitle=\"Settings\" pageSubtitle=\"Configurable parameters\">\r\n      <Card className=\"settings-mainCard\">\r\n        <Card>\r\n          <Typography variant=\"h6\" className=\"broker-title\">\r\n            Brokers\r\n          </Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={brokerValidationSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({ values, errors, touched, handleChange, handleBlur }) => (\r\n              <Form className=\"broker-form flex gap-3\">\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    name=\"brokerId\"\r\n                    label=\"ID\"\r\n                    value={values.brokerId}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.brokerId && errors.brokerId}\r\n                    helperText={touched.brokerId && errors.brokerId}\r\n                  />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    name=\"brokerName\"\r\n                    label=\"Broker Name\"\r\n                    value={values.brokerName}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.brokerName && errors.brokerName}\r\n                    helperText={touched.brokerName && errors.brokerName}\r\n                  />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    name=\"fundAllocated\"\r\n                    label=\"Funds Allocated\"\r\n                    value={values.fundAllocated}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.fundAllocated && errors.fundAllocated}\r\n                    helperText={touched.fundAllocated && errors.fundAllocated}\r\n                  />\r\n                </div>\r\n                <Button type=\"submit\" className=\"submit-btn\">\r\n                  Add Broker\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n\r\n          <div className=\"mt-4\">\r\n            <CustomTable\r\n              title={brokerTableTitle}\r\n              tableData={bokerData}\r\n              renderAction={releaseBroker}\r\n            />\r\n          </div>\r\n        </Card>\r\n      </Card>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminSettings;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:'http://13.201.22.103:8000',\r\n  timeout:5000\r\n})\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api"],"names":["_ref","title","tableData","renderAction","_jsx","TableContainer","component","Paper","className","children","_jsxs","Table","TableHead","TableRow","map","header","index","TableCell","align","sx","fontWeight","TableBody","rowData","rowIndex","Object","keys","key","colIndex","Button","isDisabled","onPress","concat","brokerValidationSchema","Yup","shape","brokerId","required","brokerName","fundAllocated","typeError","brokerTableTitle","AdminSettings","bokerData","setBrokerData","useState","releaseBroker","async","console","log","releaseData","api","put","brokerData","status","getBrokerData","toast","info","err","error","message","warn","formattedData","get","data","rest","_objectSpread","action","useEffect","AdminLayout","pageTitle","pageSubtitle","Card","Typography","variant","Formik","initialValues","validationSchema","onSubmit","values","resetForm","res","post","success","_ref2","errors","touched","handleChange","handleBlur","Form","Input","name","label","value","onChange","onBlur","helperText","type","CustomTable","axios","create","baseURL","timeout","interceptors","request","use","config","headers","Authorization","localStorage","getItem","Promise","reject","response"],"sourceRoot":""}