{"version":3,"file":"static/js/295.8efac360.chunk.js","mappings":"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","sources":["component/pages/IdPage.jsx","component/table/CustomTable.jsx","config/AxiosCofig.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Modal,\r\n  TextField,\r\n  IconButton,\r\n  Button,\r\n  MenuItem,\r\n  InputAdornment,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  FormHelperText,\r\n} from \"@mui/material\";\r\nimport CustomTable from \"../table/CustomTable.jsx\";\r\nimport AdminLayout from \"../layouts/AdminLayout.jsx\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Card } from \"@nextui-org/react\";\r\nimport { IoSearch, IoAddCircleOutline } from \"react-icons/io5\";\r\nimport { CiMenuKebab } from \"react-icons/ci\";\r\nimport {\r\n  Dropdown,\r\n  DropdownTrigger,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"@nextui-org/react\";\r\n\r\nconst brokerValidationSchema = Yup.object().shape({\r\n  brokerName: Yup.string().required(\"Broker Name is required\"),\r\n  id: Yup.string().required(\"ID is required\"),\r\n  startDate: Yup.date().required(\"Start Date is required\"),\r\n  employee: Yup.string().required(\"Dealer is required\"),\r\n  nism: Yup.string().required(\"NISM is required\"),\r\n  idType: Yup.string().required(\"ID Type is required\"),\r\n});\r\n\r\nconst brokerTableTitle = [\r\n  \"Id\",\r\n  \"Broker Name\",\r\n  // \"Start Date\",\r\n  // \"Releases Date\",\r\n  \"Employee\",\r\n  \"Nism\",\r\n  \"IdType\",\r\n  \"Action\",\r\n];\r\n\r\nconst AdminSettings = () => {\r\n  const [brokerData, setBrokerData] = useState([]);\r\n  const [selectedBrokerFilter, setSelectedBrokerFilter] = useState(\"\");\r\n  const [idData, setIdData] = useState([]);\r\n  const [filteredIdData, setFilteredIdData] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [getUserList, setGetUserList] = useState([]);\r\n  const [selectedBroker, setSelectedBroker] = useState(null);\r\n  const [loader, setLoader] = useState(false);\r\n  const [idType] = useState([\r\n    \"Manual-ODIN\",\r\n    \"Manual-GREEK\",\r\n    \"Manual-XTS\",\r\n    \"Convex\",\r\n    \"XTS-API\",\r\n  ]);\r\n\r\n  const getBrokerData = async () => {\r\n    try {\r\n      const response = await api.get(\"/getAllBroker\");\r\n      if (response.status === 200) {\r\n        setBrokerData(response?.data?.data.filter((data) => data.status === 1));\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching broker data.\");\r\n    }\r\n  };\r\n\r\n  const getIdData = async () => {\r\n    try {\r\n      setLoader(true);\r\n      const response = await api.get(\"/getIds\");\r\n      if (response.status === 200) {\r\n        const structureData = response.data.data.map((data) => ({\r\n          Id: data.idNumber,\r\n          \"Broker Name\": data.brokerName,\r\n          // \"Start Date\": data.startDate,\r\n          // \"Releases Date\": data.releaseDate || \"-\",\r\n          \"Record Id\": data.recordId,\r\n          Employee: data?.employeeId || \"-\",\r\n          Nism: data.nism,\r\n          IdType: data.idType,\r\n          Action: (\r\n            <Dropdown>\r\n              <DropdownTrigger>\r\n                <IconButton>\r\n                  <CiMenuKebab />\r\n                </IconButton>\r\n              </DropdownTrigger>\r\n              <DropdownMenu\r\n                aria-label=\"Action event example\"\r\n                onAction={(key) => {\r\n                  if (key === \"release\") {\r\n                    releaseId(data);\r\n                  } else if (key === \"edit\") {\r\n                    editBroker(data);\r\n                  }\r\n                }}\r\n              >\r\n                <DropdownItem key=\"release\" isDisabled={data.status === 3}>\r\n                  Release\r\n                </DropdownItem>\r\n                <DropdownItem key=\"edit\" isDisabled={data.status === 3}>\r\n                  Edit\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          ),\r\n        }));\r\n        setIdData(structureData);\r\n        setFilteredIdData(structureData);\r\n        setLoader(false);\r\n      }\r\n    } catch (error) {\r\n      setLoader(false);\r\n      console.error(error);\r\n      // toast.error(\"Error fetching ID data.\");\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = (event) => {\r\n    const selectedBroker = event.target.value;\r\n    setSelectedBrokerFilter(selectedBroker);\r\n\r\n    if (selectedBroker) {\r\n      const filteredData = idData.filter(\r\n        (data) => data[\"Broker Name\"] === selectedBroker\r\n      );\r\n      setFilteredIdData(filteredData);\r\n    } else {\r\n      setFilteredIdData(idData);\r\n    }\r\n  };\r\n\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setEditMode(false);\r\n    setSelectedBroker(null);\r\n  };\r\n\r\n  const getuserData = async () => {\r\n    try {\r\n      const response = await api.get(\"/users\");\r\n      if (response.status === 200) {\r\n        setGetUserList(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      // toast.error(\"Error fetching user data.\");\r\n    }\r\n  };\r\n\r\n  const editBroker = (broker) => {\r\n    setSelectedBroker(broker);\r\n    setEditMode(true);\r\n    handleOpen();\r\n  };\r\n\r\n  const releaseId = async (broker) => {\r\n    try {\r\n      await api.put(`/releaseId/${broker.recordId}/3`);\r\n      toast.success(`Released Id: ${broker.recordId}`);\r\n      getIdData();\r\n    } catch (error) {\r\n      toast.error(\"Error releasing broker.\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      if (editMode) {\r\n        await api.put(`/updateId/${selectedBroker.recordId}`, values);\r\n        toast.success(\"ID updated successfully.\");\r\n      } else {\r\n        await api.post(\"/createId\", values);\r\n        toast.success(\"ID added successfully.\");\r\n      }\r\n      getIdData();\r\n      resetForm();\r\n      handleClose();\r\n    } catch (error) {\r\n      console.error(error?.response?.data?.detail);\r\n      toast.error(error?.response?.data?.detail);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getuserData();\r\n    getIdData();\r\n    getBrokerData();\r\n  }, []);\r\n\r\n  const initialValues = {\r\n    brokerName: selectedBroker?.brokerId || \"\",\r\n    id: selectedBroker?.idNumber || \"\",\r\n    startDate: selectedBroker?.startDate || \"\",\r\n    employee: selectedBroker?.employeeId || \"\",\r\n    nism: selectedBroker?.nism || \"\",\r\n    idType: selectedBroker?.idType || \"\",\r\n  };\r\n\r\n  return (\r\n    <AdminLayout pageTitle=\"ID Management\" pageSubtitle=\"Manage ID details\">\r\n      <Card style={{ marginTop: \"1rem\" }}>\r\n        <div className=\"flex justify-between p-4 align-middle\">\r\n          <div className=\"flex gap-3\">\r\n            <TextField\r\n              className=\"searchUser\"\r\n              placeholder=\"Search\"\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <IoSearch />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            <FormControl style={{ minWidth: 200, marginRight: \"1rem\" }}>\r\n              {/* <InputLabel id=\"brokerFilter-label\">Filter by Broker</InputLabel> */}\r\n              <Select\r\n                // labelId=\"brokerFilter-label\"\r\n                value={selectedBrokerFilter}\r\n                onChange={handleFilterChange}\r\n                // label=\"Filter by Broker\"\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\">All Brokers</MenuItem>\r\n                {brokerData.map((broker, index) => (\r\n                  <MenuItem key={index} value={broker.brokerName}>\r\n                    {broker.brokerName}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n\r\n          <Button\r\n            onClick={handleOpen}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<IoAddCircleOutline />}\r\n          >\r\n            Add ID\r\n          </Button>\r\n        </div>\r\n\r\n        <Box mt={4}>\r\n          <CustomTable\r\n            title={brokerTableTitle}\r\n            tableData={filteredIdData}\r\n            loading={loader}\r\n          />\r\n        </Box>\r\n      </Card>\r\n\r\n      <Modal open={open} onClose={handleClose}>\r\n        <Box\r\n          className=\"modal-box\"\r\n          sx={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: 600,\r\n            bgcolor: \"background.paper\",\r\n            boxShadow: 24,\r\n            p: 4,\r\n            borderRadius: 2,\r\n            overflowY: \"scroll\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\">\r\n            {editMode ? \"Edit ID\" : \"Add New ID\"}\r\n          </Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={brokerValidationSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({ values, handleChange, errors, touched, handleBlur }) => (\r\n              <Form>\r\n                <div className=\"flex gap-2\">\r\n                  <TextField\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    name=\"id\"\r\n                    label=\"ID\"\r\n                    value={values.id || \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.id && Boolean(errors.id)}\r\n                    helperText={touched.id && errors.id}\r\n                    inputProps={{ style: { textTransform: \"uppercase\" } }}\r\n                  />\r\n                  <FormControl\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    error={touched.brokerName && Boolean(errors.brokerName)}\r\n                  >\r\n                    <InputLabel id=\"brokerName-label\">Broker Name</InputLabel>\r\n                    <Select\r\n                      labelId=\"brokerName-label\"\r\n                      id=\"brokerName\"\r\n                      name=\"brokerName\"\r\n                      label=\"Broker Name\"\r\n                      value={values.brokerName || \"\"}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    >\r\n                      {brokerData.map((data, index) => (\r\n                        <MenuItem key={index} value={data.id}>\r\n                          {data.brokerName}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    {touched.brokerName && Boolean(errors.brokerName) && (\r\n                      <FormHelperText>{errors.brokerName}</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <TextField\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    name=\"startDate\"\r\n                    label=\"Start Date\"\r\n                    type=\"date\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={values.startDate || \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.startDate && Boolean(errors.startDate)}\r\n                    helperText={touched.startDate && errors.startDate}\r\n                  />\r\n                  <FormControl\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    error={touched.employee && Boolean(errors.employee)}\r\n                  >\r\n                    <InputLabel id=\"employee-label\">Dealer</InputLabel>\r\n                    <Select\r\n                      labelId=\"employee-label\"\r\n                      id=\"employee\"\r\n                      name=\"employee\"\r\n                      label=\"Dealer\"\r\n                      value={values.employee || \"\"}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    >\r\n                      {getUserList.map((data, index) => (\r\n                        <MenuItem key={index} value={data.id}>\r\n                          {data.firstName + \" \" + data.lastName}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    {touched.employee && errors.employee && (\r\n                      <FormHelperText>{errors.employee}</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <TextField\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    name=\"nism\"\r\n                    label=\"NISM\"\r\n                    value={values.nism || \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.nism && Boolean(errors.nism)}\r\n                    helperText={touched.nism && errors.nism}\r\n                    inputProps={{ style: { textTransform: \"uppercase\" } }}\r\n                  />\r\n                  <FormControl\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    error={touched.idType && Boolean(errors.idType)}\r\n                  >\r\n                    <InputLabel id=\"IDType\">ID Type</InputLabel>\r\n                    <Select\r\n                      labelId=\"IDType\"\r\n                      id=\"IDType\"\r\n                      name=\"idType\"\r\n                      label=\"ID Type\"\r\n                      value={values.idType || \"\"}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    >\r\n                      {idType !== undefined &&\r\n                        idType?.map((data, index) => (\r\n                          <MenuItem key={index} value={data}>\r\n                            {data}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                    {touched.idType && Boolean(errors.idType) && (\r\n                      <FormHelperText>{errors.idType}</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </div>\r\n                <div className=\"flex justify-end gap-4 mt-6\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"error\"\r\n                    onClick={handleClose}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                    {editMode ? \"Update\" : \"Add\"}\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </Modal>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminSettings;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\n\r\nconst CustomTable = ({\r\n  title = [],\r\n  columnWidths = [],\r\n  tableData = [],\r\n  renderAction,\r\n  loading,\r\n}) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n\r\n  const handleChangePage = (event, newPage) => setPage(newPage);\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending =\r\n        prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n    return [...tableData].sort((a, b) => {\r\n      if (a[sortConfig.key] < b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      }\r\n      if (a[sortConfig.key] > b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  const paginatedData = sortedData.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const handleButtonClick = (status, id) => {\r\n    if (status === 1) {\r\n      renderAction(id);\r\n    } else {\r\n      renderAction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper className=\"custom\">\r\n      <TableContainer>\r\n        <Table className=\"tble-custom\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {title.map((header, index) => {\r\n                // Merge \"Gross Fund\" if it exists\r\n                if (header === \"Gross Fund\") {\r\n                  return (\r\n                    <TableCell\r\n                      key=\"grossFund\"\r\n                      align=\"center\"\r\n                      sx={{ fontWeight: \"bold\", minWidth: 200, maxWidth: 300 }}\r\n                    >\r\n                      <TableSortLabel\r\n                        active={sortConfig.key === \"grossFund\"}\r\n                        direction={\r\n                          sortConfig.key === \"grossFund\"\r\n                            ? sortConfig.direction\r\n                            : \"asc\"\r\n                        }\r\n                        onClick={() => handleSort(\"grossFund\")}\r\n                      >\r\n                        Gross Fund (Fund | Interest | Sharing)\r\n                      </TableSortLabel>\r\n                    </TableCell>\r\n                  );\r\n                }\r\n                return (\r\n                  <TableCell\r\n                    key={index}\r\n                    align=\"center\"\r\n                    sx={{\r\n                      fontWeight: \"bold\",\r\n                      width: columnWidths[index] || \"auto\",\r\n                      minWidth: columnWidths[index] || 150,\r\n                      maxWidth: columnWidths[index] || 300,\r\n                    }}\r\n                  >\r\n                    <TableSortLabel\r\n                      active={sortConfig.key === header.toLowerCase()}\r\n                      direction={\r\n                        sortConfig.key === header.toLowerCase()\r\n                          ? sortConfig.direction\r\n                          : \"asc\"\r\n                      }\r\n                      onClick={() => handleSort(header.toLowerCase())}\r\n                    >\r\n                      {header}\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            {loading && (\r\n              <TableRow>\r\n                <TableCell colSpan={title.length} className=\"middle-noData\">\r\n                  <CircularProgress />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n            {paginatedData.map((rowData, rowIndex) => (\r\n              <TableRow key={rowIndex}>\r\n                {Object.keys(rowData).map((key, colIndex) => {\r\n                  if (\r\n                    [\r\n                      \"status\",\r\n                      \"id\",\r\n                      \"brokerId\",\r\n                      \"fundAllocated\",\r\n                      \"Record Id\",\r\n                    ].includes(key)\r\n                  )\r\n                    return null;\r\n\r\n                  // Merge \"Gross Fund\" columns dynamically\r\n                  if (key === \"grossFund\") {\r\n                    return (\r\n                      <TableCell\r\n                        key={`${rowIndex}-grossFund`}\r\n                        align=\"center\"\r\n                        sx={{\r\n                          minWidth: 200,\r\n                          maxWidth: 300,\r\n                          whiteSpace: \"nowrap\",\r\n                          overflow: \"hidden\",\r\n                          textOverflow: \"ellipsis\",\r\n                        }}\r\n                      >\r\n                        {`${rowData[\"grossFund\"]} | ${rowData[\"grossFundInterest\"]} | ${rowData[\"grossFundSharing\"]}`}\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  return (\r\n                    <TableCell\r\n                      key={`${rowIndex}-${colIndex}`}\r\n                      align=\"center\"\r\n                      sx={{\r\n                        width: columnWidths[colIndex] || \"auto\",\r\n                        minWidth: columnWidths[colIndex] || 150,\r\n                        maxWidth: columnWidths[colIndex] || 300,\r\n                        whiteSpace: \"nowrap\",\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\",\r\n                      }}\r\n                    >\r\n                      {key === \"action\" && renderAction ? (\r\n                        <Button\r\n                          isDisabled={rowData[\"status\"] === 3}\r\n                          onPress={() =>\r\n                            handleButtonClick(rowData[\"status\"], rowData[\"id\"])\r\n                          }\r\n                        >\r\n                          {rowData[\"status\"] === 1 ? \"Release\" : \"Released\"}\r\n                        </Button>\r\n                      ) : (\r\n                        rowData[key]\r\n                      )}\r\n                    </TableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n            {!loading && paginatedData.length === 0 && (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={title.length}\r\n                  className=\"middle-noData\"\r\n                  align=\"center\"\r\n                >\r\n                  No data found.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={tableData.length}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        rowsPerPage={rowsPerPage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 15]}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:'http://43.204.150.47:8000',\r\n  // baseURL:'http://localhost:8000',\r\n  timeout:5000\r\n})\r\n\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      window.location.href = \"/\";  \r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api"],"names":["brokerValidationSchema","Yup","shape","brokerName","required","id","startDate","employee","nism","idType","brokerTableTitle","AdminSettings","brokerData","setBrokerData","useState","selectedBrokerFilter","setSelectedBrokerFilter","idData","setIdData","filteredIdData","setFilteredIdData","open","setOpen","editMode","setEditMode","getUserList","setGetUserList","selectedBroker","setSelectedBroker","loader","setLoader","getIdData","async","response","api","get","status","structureData","data","map","Id","idNumber","recordId","Employee","employeeId","Nism","IdType","Action","_jsxs","Dropdown","children","_jsx","DropdownTrigger","IconButton","CiMenuKebab","DropdownMenu","onAction","key","releaseId","editBroker","DropdownItem","isDisabled","error","console","handleOpen","handleClose","broker","put","concat","toast","success","useEffect","getuserData","_response$data","filter","getBrokerData","initialValues","brokerId","AdminLayout","pageTitle","pageSubtitle","Card","style","marginTop","className","TextField","placeholder","InputProps","startAdornment","InputAdornment","position","IoSearch","FormControl","minWidth","marginRight","Select","value","onChange","event","target","filteredData","displayEmpty","MenuItem","index","Button","onClick","variant","color","startIcon","IoAddCircleOutline","Box","mt","CustomTable","title","tableData","loading","Modal","onClose","sx","top","left","transform","width","bgcolor","boxShadow","p","borderRadius","overflowY","Typography","Formik","validationSchema","onSubmit","values","_ref","resetForm","post","_error$response","_error$response$data","_error$response2","_error$response2$data","detail","_ref2","handleChange","errors","touched","handleBlur","Form","fullWidth","margin","name","label","onBlur","Boolean","helperText","inputProps","textTransform","InputLabel","labelId","FormHelperText","type","InputLabelProps","shrink","firstName","lastName","undefined","columnWidths","renderAction","page","setPage","rowsPerPage","setRowsPerPage","sortConfig","setSortConfig","direction","handleSort","columnKey","prevConfig","isAscending","paginatedData","React","sort","a","b","slice","Paper","TableContainer","Table","TableHead","TableRow","header","TableCell","align","fontWeight","maxWidth","TableSortLabel","active","toLowerCase","TableBody","colSpan","length","CircularProgress","rowData","rowIndex","Object","keys","colIndex","includes","whiteSpace","overflow","textOverflow","onPress","handleButtonClick","TablePagination","component","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","axios","create","baseURL","timeout","interceptors","request","use","config","headers","Authorization","localStorage","getItem","Promise","reject","log","window","location","href","message"],"sourceRoot":""}