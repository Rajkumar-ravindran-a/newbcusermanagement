{"version":3,"file":"static/js/994.dccfe840.chunk.js","mappings":"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","sources":["component/pages/SettingsPage.jsx","component/table/CustomTable.jsx","config/AxiosCofig.js","../node_modules/@react-aria/label/dist/packages/@react-aria/label/src/useField.ts","../node_modules/@react-aria/label/dist/packages/@react-aria/label/src/useLabel.ts"],"sourcesContent":["import { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Typography } from \"@mui/material\";\r\nimport CustomTable from \"../table/CustomTable.jsx\";\r\nimport AdminLayout from \"../layouts/AdminLayout.jsx\";\r\nimport { Card, Button, Input } from \"@nextui-org/react\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Validation Schema\r\nconst brokerValidationSchema = Yup.object().shape({\r\n  brokerName: Yup.string().required(\"Broker Name is required\"),\r\n  grossFund: Yup.number()\r\n    .typeError(\"Gross Fund must be a number\")\r\n    .required(\"Gross Fund is required\"),\r\n  arbitrageFund: Yup.number()\r\n    .typeError(\"arbitrageFund must be a number\")\r\n    .required(\"arbitrageFund is required\"),\r\n});\r\n\r\n// Column Titles\r\nconst brokerTableTitle = [\r\n  \"Broker Name\",\r\n  \"Start Date\",\r\n  \"Release Date\",\r\n  \"Gross Fund\",\r\n  \"Arbitrage Fund\",\r\n  \"Total Fund\",\r\n  \"Prop Fund\",\r\n  \"Action\",\r\n];\r\n\r\nconst AdminSettings = () => {\r\n  const [brokerData, setBrokerData] = useState([]);\r\n\r\n  // Fetch Brokers Data\r\n  const getBrokerData = async () => {\r\n    try {\r\n      const response = await api.get(\"/getAllBroker\");\r\n      if (response.status === 200) {\r\n        console.log(response.data.data);\r\n        const formattedData = response?.data?.data.map((broker) => ({\r\n          \"Broker Name\": broker.brokerName,\r\n          \"Start Date\": broker.startDate || \"N/A\",\r\n          \"Release Date\": broker.releaseDate || \"N/A\",\r\n          \"Gross Fund\": broker.grossfund || \"-\",\r\n          \"Arbitrage Fund\": broker.arbitragefund || \"-\",\r\n          \"Prop Fund\": broker.propfund || \"-\",\r\n          \"Total Fund\": broker.grossfund + broker.arbitragefund || \"-\",\r\n          Action: (\r\n            <div key={`action-${broker.id}`} className=\"action-buttons\">\r\n              <Button\r\n                key={`release-${broker.id}`}\r\n                onPress={() => releaseBroker(broker)}\r\n                size=\"small\"\r\n                className=\"submit-btn\"\r\n                isDisabled={broker.status === 3}\r\n              >\r\n                {broker.status === 3 ? \"Released\" : \"Release\"}\r\n              </Button>\r\n            </div>\r\n          ),\r\n        }));\r\n        setBrokerData(formattedData);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching broker data.\");\r\n    }\r\n  };\r\n\r\n  // Release Broker Function\r\n  const releaseBroker = async (broker) => {\r\n    try {\r\n      const response = await api.put(`/releaseBroker/${broker.id}/3`);\r\n      if (response.status === 200) {\r\n        toast.success(`Released broker: ${broker.brokerName}`);\r\n        getBrokerData();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error releasing broker.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await getBrokerData();\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Form Initial Values\r\n  const initialValues = {\r\n    brokerName: \"\",\r\n    grossFund: \"\",\r\n    arbitrageFund: \"\",\r\n    propFund: \"\",\r\n  };\r\n\r\n  // Form Submission Handler\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      const response = await api.post(\"/createBroker\", values);\r\n      if (response.status === 200) {\r\n        toast.success(\"Broker added successfully.\");\r\n        getBrokerData();\r\n        resetForm();\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Error adding broker.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AdminLayout\r\n      pageTitle=\"Brokers\"\r\n      pageSubtitle=\"Add, view and release brokers\"\r\n    >\r\n      <Card className=\"settings-mainCard\">\r\n        <Card>\r\n          {/* <Typography variant=\"h6\" className=\"broker-title\">\r\n            Brokers\r\n          </Typography> */}\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={brokerValidationSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              setFieldValue,\r\n            }) => (\r\n              <Form className=\"broker-form flex gap-3\">\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    name=\"brokerName\"\r\n                    label=\"Broker Name\"\r\n                    value={values.brokerName || \"\"}\r\n                    onChange={(e) => {\r\n                      const upperCaseValue = e.target.value.toUpperCase();\r\n                      setFieldValue(\"brokerName\", upperCaseValue);\r\n                    }}\r\n                    onBlur={handleBlur}\r\n                    status={\r\n                      touched.brokerName && errors.brokerName\r\n                        ? \"error\"\r\n                        : undefined\r\n                    }\r\n                    helperText={touched.brokerName && errors.brokerName}\r\n                  />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    name=\"grossFund\"\r\n                    label=\"Gross Fund\"\r\n                    value={values.grossFund || \"\"}\r\n                    onChange={(e) => {\r\n                      const numericValue = e.target.value.replace(/[^0-9]/g, \"\"); \r\n                      setFieldValue(\"grossFund\", numericValue);  \r\n                    }}\r\n                    onBlur={handleBlur}\r\n                    status={\r\n                      touched.grossFund && errors.grossFund\r\n                        ? \"error\"\r\n                        : undefined\r\n                    }\r\n                    helperText={touched.grossFund && errors.grossFund}\r\n                  />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    name=\"arbitrageFund\"\r\n                    label=\"Arbitrage Fund\"\r\n                    value={values.arbitrageFund || \"\"}\r\n                    onChange={(e) => {\r\n                      const numericValue = e.target.value.replace(/[^0-9]/g, \"\"); \r\n                      setFieldValue(\"arbitrageFund\", numericValue);  \r\n                    }}\r\n                    onBlur={handleBlur}\r\n                    status={\r\n                      touched.arbitrageFund && errors.arbitrageFund\r\n                        ? \"error\"\r\n                        : undefined\r\n                    }\r\n                    helperText={touched.arbitrageFund && errors.arbitrageFund}\r\n                  />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    name=\"propFund\"\r\n                    label=\"Prop Fund\"\r\n                    value={values.propFund || \"\"}\r\n                    onChange={(e) => {\r\n                      const numericValue = e.target.value.replace(/[^0-9]/g, \"\"); \r\n                      setFieldValue(\"propFund\", numericValue);  \r\n                    }}\r\n                    onBlur={handleBlur}\r\n                    status={\r\n                      touched.propFund && errors.propFund ? \"error\" : undefined\r\n                    }\r\n                    helperText={touched.propFund && errors.propFund}\r\n                  />\r\n                </div>\r\n                <Button type=\"submit\" className=\"submit-btn\">\r\n                  Add Broker\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n\r\n          <div className=\"mt-4\">\r\n            <CustomTable title={brokerTableTitle} tableData={brokerData} />\r\n          </div>\r\n        </Card>\r\n      </Card>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminSettings;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  TableSortLabel,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\n\r\nconst CustomTable = ({ title = [], tableData = [], renderAction }) => {\r\n  // State for pagination\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  // State for sorting\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n\r\n  // Handle page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  // Handle rows per page change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Handle sorting\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending =\r\n        prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  // Sort data based on the sort configuration\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n    return [...tableData].sort((a, b) => {\r\n      if (a[sortConfig.key] < b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      }\r\n      if (a[sortConfig.key] > b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  // Paginate the sorted data\r\n  const paginatedData = sortedData.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const handleButtonClick = (status, id) => {\r\n    if (status === 1) {\r\n      renderAction(id);\r\n    } else {\r\n      renderAction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper} className=\"custom\">\r\n      <Table>\r\n        {/* Table Header with Sorting */}\r\n        <TableHead>\r\n          <TableRow>\r\n            {title.map((header, index) => (\r\n              <TableCell key={index} align=\"center\" sx={{ fontWeight: \"bold\" }}>\r\n                <TableSortLabel\r\n                  active={sortConfig.key === header.toLowerCase()}\r\n                  direction={\r\n                    sortConfig.key === header.toLowerCase()\r\n                      ? sortConfig.direction\r\n                      : \"asc\"\r\n                  }\r\n                  onClick={() => handleSort(header.toLowerCase())}\r\n                >\r\n                  {header}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        {/* Table Body */}\r\n        <TableBody>\r\n          {paginatedData.map((rowData, rowIndex) => (\r\n            <TableRow key={rowIndex}>\r\n              {Object.keys(rowData).map((key, colIndex) => {\r\n                // Skip specific keys dynamically\r\n                if ([\"status\", \"id\", \"brokerId\",\"fundAllocated\"].includes(key)) return null;\r\n                return (\r\n                  <TableCell key={`${rowIndex}-${colIndex}`} align=\"center\">\r\n                    {key === \"action\" && renderAction ? (\r\n                      <Button\r\n                        isDisabled={rowData[\"status\"] === 3}\r\n                        onPress={() =>\r\n                          handleButtonClick(rowData[\"status\"], rowData[\"id\"])\r\n                        }\r\n                      >\r\n                        {rowData[\"status\"] === 1 ? \"Release\" : \"Released\"}\r\n                      </Button>\r\n                    ) : (\r\n                      rowData[key]\r\n                    )}\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n          {\r\n            paginatedData && paginatedData.length === 0 && (\r\n              <TableRow style={{ textAlign: 'center' }}>\r\n                <TableCell colSpan={title.length} className=\"middle-noData\">No data found.</TableCell>\r\n              </TableRow>\r\n            )\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* Pagination Controls */}\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={tableData.length}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        rowsPerPage={rowsPerPage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 15]}\r\n      />\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:'http://43.204.150.47:8000',\r\n  timeout:5000\r\n})\r\n\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, HelpTextProps, Validation} from '@react-types/shared';\nimport {LabelAria, LabelAriaProps, useLabel} from './useLabel';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\n\nexport interface AriaFieldProps extends LabelAriaProps, HelpTextProps, Omit<Validation<any>, 'isRequired'> {}\n\nexport interface FieldAria extends LabelAria {\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the accessibility implementation for input fields.\n * Fields accept user input, gain context from their label, and may display a description or error message.\n * @param props - Props for the Field.\n */\nexport function useField(props: AriaFieldProps): FieldAria {\n  let {description, errorMessage, isInvalid, validationState} = props;\n  let {labelProps, fieldProps} = useLabel(props);\n\n  let descriptionId = useSlotId([Boolean(description), Boolean(errorMessage), isInvalid, validationState]);\n  let errorMessageId = useSlotId([Boolean(description), Boolean(errorMessage), isInvalid, validationState]);\n\n  fieldProps = mergeProps(fieldProps, {\n    'aria-describedby': [\n      descriptionId,\n      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n      errorMessageId,\n      props['aria-describedby']\n    ].filter(Boolean).join(' ') || undefined\n  });\n\n  return {\n    labelProps,\n    fieldProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMAttributes, DOMProps, LabelableProps} from '@react-types/shared';\nimport {ElementType, LabelHTMLAttributes} from 'react';\nimport {useId, useLabels} from '@react-aria/utils';\n\nexport interface LabelAriaProps extends LabelableProps, DOMProps, AriaLabelingProps {\n  /**\n   * The HTML element used to render the label, e.g. 'label', or 'span'.\n   * @default 'label'\n   */\n  labelElementType?: ElementType\n}\n\nexport interface LabelAria {\n  /** Props to apply to the label container element. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to apply to the field container element being labeled. */\n  fieldProps: AriaLabelingProps & DOMProps\n}\n\n/**\n * Provides the accessibility implementation for labels and their associated elements.\n * Labels provide context for user inputs.\n * @param props - The props for labels and fields.\n */\nexport function useLabel(props: LabelAriaProps): LabelAria {\n  let {\n    id,\n    label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n\n  id = useId(id);\n  let labelId = useId();\n  let labelProps = {};\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? `${labelId} ${ariaLabelledby}` : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  let fieldProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n\n  return {\n    labelProps,\n    fieldProps\n  };\n}\n"],"names":["brokerValidationSchema","Yup","shape","brokerName","required","grossFund","typeError","arbitrageFund","brokerTableTitle","AdminSettings","brokerData","setBrokerData","useState","getBrokerData","async","response","api","get","status","_response$data","console","log","data","formattedData","map","broker","startDate","releaseDate","grossfund","arbitragefund","propfund","Action","_jsx","className","children","Button","onPress","releaseBroker","size","isDisabled","concat","id","error","toast","put","success","useEffect","fetchData","AdminLayout","pageTitle","pageSubtitle","Card","_jsxs","Formik","initialValues","propFund","validationSchema","onSubmit","values","_ref","resetForm","post","_ref2","errors","touched","handleChange","handleBlur","setFieldValue","Form","Input","name","label","value","onChange","e","upperCaseValue","target","toUpperCase","onBlur","undefined","helperText","numericValue","replace","type","CustomTable","title","tableData","renderAction","page","setPage","rowsPerPage","setRowsPerPage","sortConfig","setSortConfig","key","direction","paginatedData","React","sort","a","b","slice","TableContainer","component","Paper","Table","TableHead","TableRow","header","index","TableCell","align","sx","fontWeight","TableSortLabel","active","toLowerCase","onClick","handleSort","columnKey","prevConfig","isAscending","TableBody","rowData","rowIndex","Object","keys","colIndex","includes","handleButtonClick","length","style","textAlign","colSpan","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","axios","create","baseURL","timeout","interceptors","request","use","config","headers","Authorization","localStorage","getItem","Promise","reject","message","$2baaea4c71418dea$export$294aa081a6c6f55d","props","description","errorMessage","isInvalid","validationState","labelProps","fieldProps","$d191a55c9702f145$export$8467354a121f1b9f","descriptionId","$2kC82$useSlotId","Boolean","errorMessageId","$2kC82$mergeProps","filter","join","descriptionProps","errorMessageProps","ariaLabelledby","ariaLabel","labelElementType","$83Elw$useId","labelId","htmlFor","warn","$83Elw$useLabels"],"sourceRoot":""}