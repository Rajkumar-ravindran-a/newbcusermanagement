{"version":3,"file":"static/js/375.cb26fb77.chunk.js","mappings":"sMAEA,MAAAA,EAAA,QAGA,IAAIC,EAAeC,OAAO,WAC1B,SAASC,EAAkBC,EAASC,GAClC,IAAIC,GAAMC,EAAAA,EAAAA,YAAWH,GACrB,GAAa,OAATC,EACF,OAAO,KAET,GAAIC,GAAsB,kBAARA,GAAoB,UAAWA,GAAOA,EAAIE,MAAO,CACjE,IAAIC,GAAiB,IAAIC,KAAKC,YAAaC,OAAOC,OAAOC,KAAKR,EAAIE,OAAOO,KAAKC,GAAC,IAAAC,OAASD,EAAC,QACzF,IAAKX,IAASC,EAAIE,MAAMP,GACtB,MAAM,IAAIiB,MAAM,iDAADD,OAAkDR,EAAc,MAEjF,IAAIU,EAAUd,GAAQJ,EACtB,IAAKK,EAAIE,MAAMW,GACb,MAAM,IAAID,MAAM,iBAADD,OAAkBZ,EAAI,4BAAAY,OAA2BR,EAAc,MAEhF,OAAOH,EAAIE,MAAMW,EACnB,CACA,OAAOb,CACT,CACA,SAASc,EAAgBC,EAAOC,EAAKlB,GACnC,IAAIE,EAAMH,EAAkBC,EAASiB,EAAMhB,OAAS,CAAC,GAC/CiB,IAAKC,GAAgCjB,EAAjBkB,GAAYC,EAAAA,EAAAA,GAAKnB,EAAGN,GAC1C0B,ECJC,SAAyBC,GAC9B,MAAMC,GAAqC,EAAAC,EAAAA,QAAU,MACrD,OAAO,EAAAC,EAAAA,UAAQ,KAAM,CACnB,WAAIC,GACF,OAAOH,EAAOG,OAChB,EACA,WAAIA,CAAQC,GACVJ,EAAOG,QAAUC,EACW,oBAAjBL,EACTA,EAAaK,GACJL,IACTA,EAAaI,QAAUC,EAE3B,KACE,CAACL,GACP,CDXkBM,EAAaC,EAAAA,EAAAA,UAAQ,KAAMC,EAAAA,EAAAA,GAAUb,EAAKC,IAAa,CAACD,EAAKC,KACzEa,GAAcC,EAAAA,EAAAA,GAAWb,EAAcH,GAa3C,MAZI,UAAWG,GAAgBA,EAAac,OAAS,UAAWjB,GAASA,EAAMiB,QAC3C,oBAAvBd,EAAac,OAA+C,oBAAhBjB,EAAMiB,MAC3DF,EAAYE,MAASC,IACnB,IAAIC,EAA6C,oBAAvBhB,EAAac,MAAuBd,EAAac,MAAMC,GAAef,EAAac,MACzGG,GAAYC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQH,EAAYE,cAAiBD,GACjDF,EAA+B,oBAAhBjB,EAAMiB,MAAuBjB,EAAMiB,OAAKI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIH,GAAW,IAAEE,kBAAkBpB,EAAMiB,MACtG,OAAAI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYD,GAAiBH,EAAK,EAGpCF,EAAYE,OAAKI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQlB,EAAac,OAAUjB,EAAMiB,QAGnD,CAACF,EAAaV,EACvB,C,sFErCIiB,GAAOC,E,QAAAA,IAAG,CACZC,KAAM,oC,SCNK,MAAA7C,EAAA,iEAUb,IAAI8C,GAAcC,EAAAA,EAAAA,eAAc,OACrBC,EAAAA,EAAAA,aAAW,SAAe3B,EAAOC,IACzCD,EAAOC,IAAOF,EAAAA,EAAAA,IAAgBC,EAAOC,EAAKwB,GAC3C,IAAI,iBAAEG,EAAgB,mBAAEC,EAAqB,SAAQ,SAAEC,EAAQ,UAAEC,GAA2B/B,EAAbgC,GAAQ5B,EAAAA,EAAAA,GAAKJ,EAAKrB,GACjG,MAAMsD,GAASpB,EAAAA,EAAAA,UAAQ,IAAMS,EAAK,CAAES,eAAc,CAACA,IACnD,OAAuBG,EAAAA,EAAAA,KAAI,QAAMb,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAIc,WAAmC,WAAvBN,GAAoCG,GAAQ,IAAE/B,MAAK8B,UAAWE,EAAQH,UAA0BI,EAAAA,EAAAA,KAAIT,EAAYW,SAAU,CAAEzB,OAAKU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOrB,GAAK,IAAE6B,uBAAsBC,UAA0BI,EAAAA,EAAAA,KAAIG,EAAAA,GAAsBD,SAAU,CAAEzB,MAA2B,MAApBiB,EAA2BA,EAAmB,CAAC,EAAGE,iBACjV,G,8ECQO,SAASQ,EAAqBtC,EAA+BuC,EAA4BtC,GAC9F,IAAI4B,mBAACA,EAAkBW,MAAEA,GAASxC,GAGlC,EAAAyC,EAAAA,IAAgB,KACd,GAA2B,WAAvBZ,IAAmC,OAAA5B,QAAA,IAAAA,OAAA,EAAAA,EAAKS,SAAS,CACnD,IAAIgC,EAAeH,EAAMI,mBAAmBC,UAAYL,EAAMI,mBAAmBf,iBAAiBiB,KAAK,MAAQ,iBAAmB,GAClI5C,EAAIS,QAAQoC,kBAAkBJ,GAIzBzC,EAAIS,QAAQqC,aAAa,WAC5B9C,EAAIS,QAAQsC,MAAQ,IAGjBT,EAAMI,mBAAmBC,WAC5BL,EAAMU,iBA2EL,CACLL,YAFuBM,EA1EsBjD,EAAIS,SA4E/ByC,SAASC,MAC3BC,kBAAmBC,EAAYJ,GAC/BtB,iBAAkBsB,EAAMK,kBAAoB,CAACL,EAAMK,mBAAqB,IA5ExE,CAwEJ,IAA2BL,CAxEvB,IAGF,IAAIM,GAAU,EAAAC,EAAAA,IAAe,KAC3BlB,EAAMmB,iBAAiB,IAGrBC,GAAY,EAAAF,EAAAA,IAAgBG,I,IAQnBC,EALNtB,EAAMuB,kBAAkBlB,WAC3BL,EAAMwB,mBAIR,IAAIzC,EAAO,OAAArB,QAAA,IAAAA,GAAY,QAAZ4D,EAAA5D,EAAKS,eAAL,IAAAmD,OAAA,EAAAA,EAAcvC,K,IAKrB0C,GAJCJ,EAAEK,kBAAoBhE,GAAOqB,GAgEtC,SAA8BA,GAC5B,IAAK,IAAI4C,EAAI,EAAGA,EAAI5C,EAAK6C,SAASC,OAAQF,IAAK,CAC7C,IAAIG,EAAU/C,EAAK6C,SAASD,GAC5B,IAAKG,EAAQlB,SAASC,MACpB,OAAOiB,CAEX,CAEA,OAAO,IACT,CAzE8CC,CAAqBhD,KAAUrB,EAAIS,UACvE8B,EACFA,IAEW,QAAXwB,EAAA/D,EAAIS,eAAJ,IAAAsD,GAAAA,EAAaxB,SAIf,EAAA+B,EAAAA,IAAuB,aAIzBX,EAAEY,gBAAgB,IAGhBC,GAAW,EAAAhB,EAAAA,IAAe,KAC5BlB,EAAMwB,kBAAkB,KAG1B,EAAAW,EAAAA,YAAU,KACR,IAAIxB,EAAQ,OAAAjD,QAAA,IAAAA,OAAA,EAAAA,EAAKS,QACjB,IAAKwC,EACH,OAGF,IAAI5B,EAAO4B,EAAM5B,KAIjB,OAHA4B,EAAMyB,iBAAiB,UAAWhB,GAClCT,EAAMyB,iBAAiB,SAAUF,GACjC,OAAAnD,QAAA,IAAAA,GAAAA,EAAMqD,iBAAiB,QAASnB,GACzB,KACLN,EAAO0B,oBAAoB,UAAWjB,GACtCT,EAAO0B,oBAAoB,SAAUH,GACrC,OAAAnD,QAAA,IAAAA,GAAAA,EAAMsD,oBAAoB,QAASpB,EAAA,CACpC,GACA,CAACvD,EAAK0D,EAAWc,EAAUjB,EAAS3B,GACzC,CAEA,SAASyB,EAAYJ,GAGnB,IAAIC,EAAWD,EAAMC,SACrB,MAAO,CACL0B,SAAU1B,EAAS0B,SACnBC,YAAa3B,EAAS2B,YACtBC,gBAAiB5B,EAAS4B,gBAC1BC,cAAe7B,EAAS6B,cACxBC,eAAgB9B,EAAS8B,eACzBC,aAAc/B,EAAS+B,aACvBC,QAAShC,EAASgC,QAClBC,SAAUjC,EAASiC,SACnBC,aAAclC,EAASkC,aACvBC,aAAcnC,EAASmC,aACvBlC,MAAOD,EAASC,MAEpB,C,yDChGO,SAASmC,EACdtF,EACAuF,EACAhC,GAEA,IAAIiC,GAAa,EAAAC,EAAAA,QAAOF,GACpBG,GAAc,EAAAC,EAAAA,IAAe,KAC3BpC,GACFA,EAAQiC,EAAW/E,QAAQ,KAI/B,EAAAmF,EAAAA,YAAU,K,IACGhC,EAAX,IAAIvC,EAAO,OAAArB,QAAA,IAAAA,GAAY,QAAZ4D,EAAA5D,EAAKS,eAAL,IAAAmD,OAAA,EAAAA,EAAcvC,KAEzB,OADA,OAAAA,QAAA,IAAAA,GAAAA,EAAMqD,iBAAiB,QAASgB,GACzB,KACL,OAAArE,QAAA,IAAAA,GAAAA,EAAMsD,oBAAoB,QAASe,EAAA,CACpC,GACA,CAAC1F,EAAK0F,GACX,C,sFCpBO,MAAMG,EAAsC,CACjDjB,UAAU,EACVC,aAAa,EACbC,iBAAiB,EACjBC,eAAe,EACfC,gBAAgB,EAChBC,cAAc,EACdC,SAAS,EACTC,UAAU,EACVC,cAAc,EACdC,cAAc,EACdlC,OAAO,GAGH2C,GAAA1E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDyE,GAAoB,IACvBhB,aAAa,EACb1B,OAAO,IAGI4C,EAA8C,CACzDpD,WAAW,EACXS,kBAAmByC,EACnBlE,iBAAkB,IAGPqE,GAAwB,EAAAC,EAAAA,eAAgC,CAAC,GAEzDC,EAA6B,wBAA0BC,KAAKC,MAqBlE,SAASC,EAA0BtG,GAExC,GAAIA,EAAMmG,GAA6B,CACrC,IAAIxD,mBAACA,EAAkBmB,kBAAEA,EAAiBb,iBAAEA,EAAgBS,gBAAEA,EAAeK,iBAAEA,GAAoB/D,EAAMmG,GACzG,MAAO,C,mBAACxD,E,kBAAoBmB,E,iBAAmBb,E,gBAAkBS,E,iBAAiBK,EACpF,CAGA,OAGF,SAAuC/D,GACrC,IAAI4C,UAACA,EAAS2D,gBAAEA,EAAeC,KAAEA,EAAI7F,MAAEA,EAAK8F,kBAAEA,EAAiBC,SAAEA,EAAQ,mBAAE7E,EAAqB,QAAU7B,EAGtGuG,IACF3D,IAAAA,EAAkC,YAApB2D,IAIhB,IAAII,OAAyDC,IAAdhE,EAA0B,C,UACvEA,EACAhB,iBAAkB,GAClByB,kBAAmB0C,GACjB,KAGAc,GAAuC,EAAAC,EAAAA,UAAQ,KACjD,IAAKJ,GAAqB,MAAT/F,EACf,OAAO,KAET,IAAIoG,EA0GR,SAAwBL,EAAiC/F,GACvD,GAAwB,oBAAb+F,EAAyB,CAClC,IAAI9C,EAAI8C,EAAS/F,GACjB,GAAIiD,GAAkB,mBAANA,EACd,OAAOoD,EAAQpD,EAEnB,CAEA,MAAO,EACT,CAnHyBqD,CAAYP,EAAU/F,GAC3C,OAAOuG,EAAoBH,EAAA,GAC1B,CAACL,EAAU/F,KAEV,OAAA8F,QAAA,IAAAA,OAAA,EAAAA,EAAmBpD,kBAAkBD,SACvCqD,OAAoBG,GAItB,IAAIO,GAAe,EAAAC,EAAAA,YAAWnB,GAC1BoB,GAAsB,EAAAP,EAAAA,UAAQ,IAC5BN,EACKc,MAAMC,QAAQf,GAAQA,EAAKgB,SAAQhB,GAAQQ,EAAQG,EAAaX,MAAUQ,EAAQG,EAAaX,IAEjG,IACN,CAACW,EAAcX,KAGbiB,EAAkBC,IAAuB,EAAAC,EAAAA,UAASR,IAClDS,EAAsBC,IAAyB,EAAAF,EAAAA,WAAS,GACzDR,IAAiBM,IACnBC,EAAoBP,GACpBU,GAAsB,IAGxB,IAAIC,GAAuC,EAAAhB,EAAAA,UAAQ,IACjDI,EAAoBU,EAAuB,GAAKP,IAChD,CAACO,EAAsBP,IAIrBU,GAAiB,EAAAC,EAAAA,QAAOhC,IACvBiC,EAAiBC,IAAsB,EAAAP,EAAAA,UAAS3B,GAEjDmC,GAAY,EAAAH,EAAAA,QAAOhC,GACnBjC,EAAmBA,KACrB,IAAKqE,EACH,OAGFC,GAAgB,GAChB,IAAIC,EAAQzB,GAAeJ,GAAqBsB,EAAerH,QAC1D6H,EAAkBD,EAAOH,EAAUzH,WACtCyH,EAAUzH,QAAU4H,EACpBJ,EAAmBI,GACrB,GAGGF,EAAcC,IAAmB,EAAAV,EAAAA,WAAS,GAW/C,OAVA,EAAAa,EAAAA,WAAUzE,GAUH,C,mBALkB4C,GAAmBmB,GAAejB,GAAeJ,GAAqBT,E,kBAChD,WAAvBnE,EACpB8E,GAAmBmB,GAAeG,EAClCtB,GAAmBmB,GAAejB,GAAeJ,GAAqBwB,EAKxEhF,gBAAAA,CAAiBtC,GAEY,SAAvBkB,GAAkC0G,EAAkBN,EAAiBtH,GAGvEoH,EAAerH,QAAUC,EAFzBuH,EAAmBvH,EAIvB,EACA+C,eAAAA,GAGE,IAAI4E,EAAQtC,EACPuC,EAAkBD,EAAOH,EAAUzH,WACtCyH,EAAUzH,QAAU4H,EACpBJ,EAAmBI,IAKM,WAAvBzG,GACFwG,GAAgB,GAGlBR,GAAsB,EACxB,EACA9D,gBAAAA,GAG6B,WAAvBlC,GACFwG,GAAgB,GAElBR,GAAsB,EACxB,EAEJ,CAvHSY,CAA2BzI,EACpC,CAwHA,SAASgH,EAAW0B,GAClB,OAAKA,EAIEpB,MAAMC,QAAQmB,GAAKA,EAAI,CAACA,GAHtB,EAIX,CAaA,SAASxB,EAAoByB,GAC3B,OAAOA,EAAOvE,OAAS,CACrBxB,WAAW,EACXhB,iBAAkB+G,EAClBtF,kBAAmB0C,GACjB,IACN,CAEA,SAASwC,EAAkBK,EAA4BC,GACrD,OAAID,IAAMC,KAIDD,KAAOC,GACXD,EAAEhG,YAAciG,EAAEjG,WAClBgG,EAAEhH,iBAAiBwC,SAAWyE,EAAEjH,iBAAiBwC,QACjDwE,EAAEhH,iBAAiBkH,OAAM,CAACF,EAAG1E,IAAM0E,IAAMC,EAAEjH,iBAAiBsC,MAC5D1E,OAAOuJ,QAAQH,EAAEvF,mBAAmByF,OAAME,IAAA,IAAEC,EAAGP,GAAEM,EAAA,OAAKH,EAAExF,kBAAkB4F,KAAOP,CAAA,GACxF,C","sources":["../node_modules/@nextui-org/form/dist/chunk-BSTJ7ZCN.mjs","../node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/useObjectRef.ts","../node_modules/@nextui-org/theme/dist/chunk-E257OVH3.mjs","../node_modules/@nextui-org/form/dist/chunk-YBBOLEEC.mjs","../node_modules/@react-aria/form/dist/packages/@react-aria/form/src/useFormValidation.ts","../node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/useFormReset.ts","../node_modules/@react-stately/form/dist/packages/@react-stately/form/src/useFormValidationState.ts"],"sourcesContent":["\"use client\";\n\n// src/utils.ts\nimport { useContext, useMemo } from \"react\";\nimport { mergeProps, mergeRefs, useObjectRef } from \"@react-aria/utils\";\nvar DEFAULT_SLOT = Symbol(\"default\");\nfunction useSlottedContext(context, slot) {\n  let ctx = useContext(context);\n  if (slot === null) {\n    return null;\n  }\n  if (ctx && typeof ctx === \"object\" && \"slots\" in ctx && ctx.slots) {\n    let availableSlots = new Intl.ListFormat().format(Object.keys(ctx.slots).map((p) => `\"${p}\"`));\n    if (!slot && !ctx.slots[DEFAULT_SLOT]) {\n      throw new Error(`A slot prop is required. Valid slot names are ${availableSlots}.`);\n    }\n    let slotKey = slot || DEFAULT_SLOT;\n    if (!ctx.slots[slotKey]) {\n      throw new Error(`Invalid slot \"${slot}\". Valid slot names are ${availableSlots}.`);\n    }\n    return ctx.slots[slotKey];\n  }\n  return ctx;\n}\nfunction useContextProps(props, ref, context) {\n  let ctx = useSlottedContext(context, props.slot) || {};\n  let { ref: contextRef, ...contextProps } = ctx;\n  let mergedRef = useObjectRef(useMemo(() => mergeRefs(ref, contextRef), [ref, contextRef]));\n  let mergedProps = mergeProps(contextProps, props);\n  if (\"style\" in contextProps && contextProps.style && \"style\" in props && props.style) {\n    if (typeof contextProps.style === \"function\" || typeof props.style === \"function\") {\n      mergedProps.style = (renderProps) => {\n        let contextStyle = typeof contextProps.style === \"function\" ? contextProps.style(renderProps) : contextProps.style;\n        let defaultStyle = { ...renderProps.defaultStyle, ...contextStyle };\n        let style = typeof props.style === \"function\" ? props.style({ ...renderProps, defaultStyle }) : props.style;\n        return { ...defaultStyle, ...style };\n      };\n    } else {\n      mergedProps.style = { ...contextProps.style, ...props.style };\n    }\n  }\n  return [mergedProps, mergedRef];\n}\n\nexport {\n  DEFAULT_SLOT,\n  useSlottedContext,\n  useContextProps\n};\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {MutableRefObject, useMemo, useRef} from 'react';\n\n/**\n * Offers an object ref for a given callback ref or an object ref. Especially\n * helfpul when passing forwarded refs (created using `React.forwardRef`) to\n * React Aria hooks.\n *\n * @param forwardedRef The original ref intended to be used.\n * @returns An object ref that updates the given ref.\n * @see https://reactjs.org/docs/forwarding-refs.html\n */\nexport function useObjectRef<T>(forwardedRef?: ((instance: T | null) => void) | MutableRefObject<T | null> | null): MutableRefObject<T | null> {\n  const objRef: MutableRefObject<T | null> = useRef<T>(null);\n  return useMemo(() => ({\n    get current() {\n      return objRef.current;\n    },\n    set current(value) {\n      objRef.current = value;\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(value);\n      } else if (forwardedRef) {\n        forwardedRef.current = value;\n      }\n    }\n  }), [forwardedRef]);\n}\n","import {\n  tv\n} from \"./chunk-UWE6H66T.mjs\";\n\n// src/components/form.ts\nvar form = tv({\n  base: \"flex flex-col gap-2 items-start\"\n});\n\nexport {\n  form\n};\n","\"use client\";\nimport {\n  useContextProps\n} from \"./chunk-BSTJ7ZCN.mjs\";\n\n// src/base-form.tsx\nimport { FormValidationContext } from \"@react-stately/form\";\nimport { createContext, forwardRef, useMemo } from \"react\";\nimport { form } from \"@nextui-org/theme\";\nimport { jsx } from \"react/jsx-runtime\";\nvar FormContext = createContext(null);\nvar Form = forwardRef(function Form2(props, ref) {\n  [props, ref] = useContextProps(props, ref, FormContext);\n  let { validationErrors, validationBehavior = \"native\", children, className, ...domProps } = props;\n  const styles = useMemo(() => form({ className }), [className]);\n  return /* @__PURE__ */ jsx(\"form\", { noValidate: validationBehavior !== \"native\", ...domProps, ref, className: styles, children: /* @__PURE__ */ jsx(FormContext.Provider, { value: { ...props, validationBehavior }, children: /* @__PURE__ */ jsx(FormValidationContext.Provider, { value: validationErrors != null ? validationErrors : {}, children }) }) });\n});\n\nexport {\n  FormContext,\n  Form\n};\n","/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormValidationState} from '@react-stately/form';\nimport {RefObject, Validation, ValidationResult} from '@react-types/shared';\nimport {setInteractionModality} from '@react-aria/interactions';\nimport {useEffect} from 'react';\nimport {useEffectEvent, useLayoutEffect} from '@react-aria/utils';\n\ntype ValidatableElement = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n\ninterface FormValidationProps<T> extends Validation<T> {\n  focus?: () => void\n}\n\nexport function useFormValidation<T>(props: FormValidationProps<T>, state: FormValidationState, ref: RefObject<ValidatableElement | null> | undefined) {\n  let {validationBehavior, focus} = props;\n\n  // This is a useLayoutEffect so that it runs before the useEffect in useFormValidationState, which commits the validation change.\n  useLayoutEffect(() => {\n    if (validationBehavior === 'native' && ref?.current) {\n      let errorMessage = state.realtimeValidation.isInvalid ? state.realtimeValidation.validationErrors.join(' ') || 'Invalid value.' : '';\n      ref.current.setCustomValidity(errorMessage);\n\n      // Prevent default tooltip for validation message.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=605277\n      if (!ref.current.hasAttribute('title')) {\n        ref.current.title = '';\n      }\n\n      if (!state.realtimeValidation.isInvalid) {\n        state.updateValidation(getNativeValidity(ref.current));\n      }\n    }\n  });\n\n  let onReset = useEffectEvent(() => {\n    state.resetValidation();\n  });\n\n  let onInvalid = useEffectEvent((e: Event) => {\n    // Only commit validation if we are not already displaying one.\n    // This avoids clearing server errors that the user didn't actually fix.\n    if (!state.displayValidation.isInvalid) {\n      state.commitValidation();\n    }\n\n    // Auto focus the first invalid input in a form, unless the error already had its default prevented.\n    let form = ref?.current?.form;\n    if (!e.defaultPrevented && ref && form && getFirstInvalidInput(form) === ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        ref.current?.focus();\n      }\n\n      // Always show focus ring.\n      setInteractionModality('keyboard');\n    }\n\n    // Prevent default browser error UI from appearing.\n    e.preventDefault();\n  });\n\n  let onChange = useEffectEvent(() => {\n    state.commitValidation();\n  });\n\n  useEffect(() => {\n    let input = ref?.current;\n    if (!input) {\n      return;\n    }\n\n    let form = input.form;\n    input.addEventListener('invalid', onInvalid);\n    input.addEventListener('change', onChange);\n    form?.addEventListener('reset', onReset);\n    return () => {\n      input!.removeEventListener('invalid', onInvalid);\n      input!.removeEventListener('change', onChange);\n      form?.removeEventListener('reset', onReset);\n    };\n  }, [ref, onInvalid, onChange, onReset, validationBehavior]);\n}\n\nfunction getValidity(input: ValidatableElement) {\n  // The native ValidityState object is live, meaning each property is a getter that returns the current state.\n  // We need to create a snapshot of the validity state at the time this function is called to avoid unpredictable React renders.\n  let validity = input.validity;\n  return {\n    badInput: validity.badInput,\n    customError: validity.customError,\n    patternMismatch: validity.patternMismatch,\n    rangeOverflow: validity.rangeOverflow,\n    rangeUnderflow: validity.rangeUnderflow,\n    stepMismatch: validity.stepMismatch,\n    tooLong: validity.tooLong,\n    tooShort: validity.tooShort,\n    typeMismatch: validity.typeMismatch,\n    valueMissing: validity.valueMissing,\n    valid: validity.valid\n  };\n}\n\nfunction getNativeValidity(input: ValidatableElement): ValidationResult {\n  return {\n    isInvalid: !input.validity.valid,\n    validationDetails: getValidity(input),\n    validationErrors: input.validationMessage ? [input.validationMessage] : []\n  };\n}\n\nfunction getFirstInvalidInput(form: HTMLFormElement): ValidatableElement | null {\n  for (let i = 0; i < form.elements.length; i++) {\n    let element = form.elements[i] as ValidatableElement;\n    if (!element.validity.valid) {\n      return element;\n    }\n  }\n\n  return null;\n}\n","/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject} from '@react-types/shared';\nimport {useEffect, useRef} from 'react';\nimport {useEffectEvent} from './useEffectEvent';\n\nexport function useFormReset<T>(\n  ref: RefObject<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement | null> | undefined,\n  initialValue: T,\n  onReset: (value: T) => void\n) {\n  let resetValue = useRef(initialValue);\n  let handleReset = useEffectEvent(() => {\n    if (onReset) {\n      onReset(resetValue.current);\n    }\n  });\n\n  useEffect(() => {\n    let form = ref?.current?.form;\n    form?.addEventListener('reset', handleReset);\n    return () => {\n      form?.removeEventListener('reset', handleReset);\n    };\n  }, [ref, handleReset]);\n}\n","/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createContext, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {Validation, ValidationErrors, ValidationFunction, ValidationResult} from '@react-types/shared';\n\nexport const VALID_VALIDITY_STATE: ValidityState = {\n  badInput: false,\n  customError: false,\n  patternMismatch: false,\n  rangeOverflow: false,\n  rangeUnderflow: false,\n  stepMismatch: false,\n  tooLong: false,\n  tooShort: false,\n  typeMismatch: false,\n  valueMissing: false,\n  valid: true\n};\n\nconst CUSTOM_VALIDITY_STATE: ValidityState = {\n  ...VALID_VALIDITY_STATE,\n  customError: true,\n  valid: false\n};\n\nexport const DEFAULT_VALIDATION_RESULT: ValidationResult = {\n  isInvalid: false,\n  validationDetails: VALID_VALIDITY_STATE,\n  validationErrors: []\n};\n\nexport const FormValidationContext = createContext<ValidationErrors>({});\n\nexport const privateValidationStateProp = '__formValidationState' + Date.now();\n\ninterface FormValidationProps<T> extends Validation<T> {\n  builtinValidation?: ValidationResult,\n  name?: string | string[],\n  value: T | null\n}\n\nexport interface FormValidationState {\n  /** Realtime validation results, updated as the user edits the value. */\n  realtimeValidation: ValidationResult,\n  /** Currently displayed validation results, updated when the user commits their changes. */\n  displayValidation: ValidationResult,\n  /** Updates the current validation result. Not displayed to the user until `commitValidation` is called. */\n  updateValidation(result: ValidationResult): void,\n  /** Resets the displayed validation state to valid when the user resets the form. */\n  resetValidation(): void,\n  /** Commits the realtime validation so it is displayed to the user. */\n  commitValidation(): void\n}\n\nexport function useFormValidationState<T>(props: FormValidationProps<T>): FormValidationState {\n  // Private prop for parent components to pass state to children.\n  if (props[privateValidationStateProp]) {\n    let {realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation} = props[privateValidationStateProp] as FormValidationState;\n    return {realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation};\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useFormValidationStateImpl(props);\n}\n\nfunction useFormValidationStateImpl<T>(props: FormValidationProps<T>): FormValidationState {\n  let {isInvalid, validationState, name, value, builtinValidation, validate, validationBehavior = 'aria'} = props;\n\n  // backward compatibility.\n  if (validationState) {\n    isInvalid ||= validationState === 'invalid';\n  }\n\n  // If the isInvalid prop is controlled, update validation result in realtime.\n  let controlledError: ValidationResult | null = isInvalid !== undefined ? {\n    isInvalid,\n    validationErrors: [],\n    validationDetails: CUSTOM_VALIDITY_STATE\n  } : null;\n\n  // Perform custom client side validation.\n  let clientError: ValidationResult | null = useMemo(() => {\n    if (!validate || value == null) {\n      return null;\n    }\n    let validateErrors = runValidate(validate, value);\n    return getValidationResult(validateErrors);\n  }, [validate, value]);\n\n  if (builtinValidation?.validationDetails.valid) {\n    builtinValidation = undefined;\n  }\n\n  // Get relevant server errors from the form.\n  let serverErrors = useContext(FormValidationContext);\n  let serverErrorMessages = useMemo(() => {\n    if (name) {\n      return Array.isArray(name) ? name.flatMap(name => asArray(serverErrors[name])) : asArray(serverErrors[name]);\n    }\n    return [];\n  }, [serverErrors, name]);\n\n  // Show server errors when the form gets a new value, and clear when the user changes the value.\n  let [lastServerErrors, setLastServerErrors] = useState(serverErrors);\n  let [isServerErrorCleared, setServerErrorCleared] = useState(false);\n  if (serverErrors !== lastServerErrors) {\n    setLastServerErrors(serverErrors);\n    setServerErrorCleared(false);\n  }\n\n  let serverError: ValidationResult | null = useMemo(() =>\n    getValidationResult(isServerErrorCleared ? [] : serverErrorMessages),\n    [isServerErrorCleared, serverErrorMessages]\n  );\n\n  // Track the next validation state in a ref until commitValidation is called.\n  let nextValidation = useRef(DEFAULT_VALIDATION_RESULT);\n  let [currentValidity, setCurrentValidity] = useState(DEFAULT_VALIDATION_RESULT);\n\n  let lastError = useRef(DEFAULT_VALIDATION_RESULT);\n  let commitValidation = () => {\n    if (!commitQueued) {\n      return;\n    }\n\n    setCommitQueued(false);\n    let error = clientError || builtinValidation || nextValidation.current;\n    if (!isEqualValidation(error, lastError.current)) {\n      lastError.current = error;\n      setCurrentValidity(error);\n    }\n  };\n\n  let [commitQueued, setCommitQueued] = useState(false);\n  useEffect(commitValidation);\n\n  // realtimeValidation is used to update the native input element's state based on custom validation logic.\n  // displayValidation is the currently displayed validation state that the user sees (e.g. on input change/form submit).\n  // With validationBehavior=\"aria\", all errors are displayed in realtime rather than on submit.\n  let realtimeValidation = controlledError || serverError || clientError || builtinValidation || DEFAULT_VALIDATION_RESULT;\n  let displayValidation = validationBehavior === 'native'\n    ? controlledError || serverError || currentValidity\n    : controlledError || serverError || clientError || builtinValidation || currentValidity;\n\n  return {\n    realtimeValidation,\n    displayValidation,\n    updateValidation(value) {\n      // If validationBehavior is 'aria', update in realtime. Otherwise, store in a ref until commit.\n      if (validationBehavior === 'aria' && !isEqualValidation(currentValidity, value)) {\n        setCurrentValidity(value);\n      } else {\n        nextValidation.current = value;\n      }\n    },\n    resetValidation() {\n      // Update the currently displayed validation state to valid on form reset,\n      // even if the native validity says it isn't. It'll show again on the next form submit.\n      let error = DEFAULT_VALIDATION_RESULT;\n      if (!isEqualValidation(error, lastError.current)) {\n        lastError.current = error;\n        setCurrentValidity(error);\n      }\n\n      // Do not commit validation after the next render. This avoids a condition where\n      // useSelect calls commitValidation inside an onReset handler.\n      if (validationBehavior === 'native') {\n        setCommitQueued(false);\n      }\n\n      setServerErrorCleared(true);\n    },\n    commitValidation() {\n      // Commit validation state so the user sees it on blur/change/submit. Also clear any server errors.\n      // Wait until after the next render to commit so that the latest value has been validated.\n      if (validationBehavior === 'native') {\n        setCommitQueued(true);\n      }\n      setServerErrorCleared(true);\n    }\n  };\n}\n\nfunction asArray<T>(v: T | T[]): T[] {\n  if (!v) {\n    return [];\n  }\n\n  return Array.isArray(v) ? v : [v];\n}\n\nfunction runValidate<T>(validate: ValidationFunction<T>, value: T): string[] {\n  if (typeof validate === 'function') {\n    let e = validate(value);\n    if (e && typeof e !== 'boolean') {\n      return asArray(e);\n    }\n  }\n\n  return [];\n}\n\nfunction getValidationResult(errors: string[]): ValidationResult | null {\n  return errors.length ? {\n    isInvalid: true,\n    validationErrors: errors,\n    validationDetails: CUSTOM_VALIDITY_STATE\n  } : null;\n}\n\nfunction isEqualValidation(a: ValidationResult | null, b: ValidationResult | null): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  return !!a && !!b\n    && a.isInvalid === b.isInvalid\n    && a.validationErrors.length === b.validationErrors.length\n    && a.validationErrors.every((a, i) => a === b.validationErrors[i])\n    && Object.entries(a.validationDetails).every(([k, v]) => b.validationDetails[k] === v);\n}\n\nexport function mergeValidation(...results: ValidationResult[]): ValidationResult {\n  let errors = new Set<string>();\n  let isInvalid = false;\n  let validationDetails = {\n    ...VALID_VALIDITY_STATE\n  };\n\n  for (let v of results) {\n    for (let e of v.validationErrors) {\n      errors.add(e);\n    }\n\n    // Only these properties apply for checkboxes.\n    isInvalid ||= v.isInvalid;\n    for (let key in validationDetails) {\n      validationDetails[key] ||= v.validationDetails[key];\n    }\n  }\n\n  validationDetails.valid = !isInvalid;\n  return {\n    isInvalid,\n    validationErrors: [...errors],\n    validationDetails\n  };\n}\n"],"names":["_excluded","DEFAULT_SLOT","Symbol","useSlottedContext","context","slot","ctx","useContext","slots","availableSlots","Intl","ListFormat","format","Object","keys","map","p","concat","Error","slotKey","useContextProps","props","ref","contextRef","contextProps","_objectWithoutProperties","mergedRef","forwardedRef","objRef","$gbmns$useRef","$gbmns$useMemo","current","value","useObjectRef","useMemo","mergeRefs","mergedProps","mergeProps","style","renderProps","contextStyle","defaultStyle","_objectSpread","form","tv","base","FormContext","createContext","forwardRef","validationErrors","validationBehavior","children","className","domProps","styles","jsx","noValidate","Provider","FormValidationContext","$e93e671b31057976$export$b8473d3665f3a75a","state","focus","$9Gacy$useLayoutEffect","errorMessage","realtimeValidation","isInvalid","join","setCustomValidity","hasAttribute","title","updateValidation","input","validity","valid","validationDetails","$e93e671b31057976$var$getValidity","validationMessage","onReset","$9Gacy$useEffectEvent","resetValidation","onInvalid","e","_ref_current","displayValidation","commitValidation","_ref_current1","defaultPrevented","i","elements","length","element","$e93e671b31057976$var$getFirstInvalidInput","$9Gacy$setInteractionModality","preventDefault","onChange","$9Gacy$useEffect","addEventListener","removeEventListener","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","$99facab73266f662$export$5add1d006293d136","initialValue","resetValue","$8rM3G$useRef","handleReset","$8ae05eaa5c114e9c$export$7f54fc3180508a52","$8rM3G$useEffect","$e5be200c675c3b3a$export$aca958c65c314e6c","$e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE","$e5be200c675c3b3a$export$dad6ae84456c676a","$e5be200c675c3b3a$export$571b5131b7e65c11","$69F46$createContext","$e5be200c675c3b3a$export$a763b9476acd3eb","Date","now","$e5be200c675c3b3a$export$fc1a364ae1f3ff10","validationState","name","builtinValidation","validate","controlledError","undefined","clientError","$69F46$useMemo","validateErrors","$e5be200c675c3b3a$var$asArray","$e5be200c675c3b3a$var$runValidate","$e5be200c675c3b3a$var$getValidationResult","serverErrors","$69F46$useContext","serverErrorMessages","Array","isArray","flatMap","lastServerErrors","setLastServerErrors","$69F46$useState","isServerErrorCleared","setServerErrorCleared","serverError","nextValidation","$69F46$useRef","currentValidity","setCurrentValidity","lastError","commitQueued","setCommitQueued","error","$e5be200c675c3b3a$var$isEqualValidation","$69F46$useEffect","$e5be200c675c3b3a$var$useFormValidationStateImpl","v","errors","a","b","every","entries","_ref","k"],"sourceRoot":""}