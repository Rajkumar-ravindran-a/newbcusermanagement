{"version":3,"file":"static/js/14.6ae2e6a7.chunk.js","mappings":"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","sources":["component/popups/BrokerFormPopup.jsx","component/table/CollapsableTable.jsx","component/popups/commonPopup/CommonPopup.jsx","component/pages/SettingsPage.jsx","../node_modules/@mui/material/internal/svg-icons/ArrowDownward.js","../node_modules/@mui/material/TableSortLabel/tableSortLabelClasses.js","../node_modules/@mui/material/TableSortLabel/TableSortLabel.js","component/table/CustomTable.jsx","config/AxiosCofig.js"],"sourcesContent":["import { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Button, TextField, Typography, Modal, Box } from \"@mui/material\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Validation Schema\r\nconst brokerValidationSchema = Yup.object().shape({\r\n  brokerName: Yup.string().required(\"Broker Name is required\"),\r\n  grossFund: Yup.number()\r\n    .typeError(\"Gross Fund must be a number\")\r\n    .min(0, \"Gross Fund must be greater than or equal to 0\")\r\n    .required(\"Gross Fund is required\"),\r\n  grossFundInterest: Yup.number()\r\n    .typeError(\"Gross Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Gross Fund Interest is required\"),\r\n  grossFundSharing: Yup.number()\r\n    .typeError(\"Gross Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Gross Fund Sharing is required\"),\r\n\r\n  arbitrageFund: Yup.number()\r\n    .typeError(\"Arbitrage Fund must be a number\")\r\n    .min(0, \"Arbitrage Fund must be greater than or equal to 0\")\r\n    .required(\"Arbitrage Fund is required\"),\r\n  arbitrageFundInterest: Yup.number()\r\n    .typeError(\"Arbitrage Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Arbitrage Fund Interest is required\"),\r\n  arbitrageFundSharing: Yup.number()\r\n    .typeError(\"Arbitrage Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Arbitrage Fund Sharing is required\"),\r\n\r\n  propFund: Yup.number()\r\n    .typeError(\"Prop Fund must be a number\")\r\n    .min(0, \"Prop Fund must be greater than or equal to 0\")\r\n    .required(\"Prop Fund is required\"),\r\n  propFundInterest: Yup.number()\r\n    .typeError(\"Prop Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Prop Fund Interest is required\"),\r\n  propFundSharing: Yup.number()\r\n    .typeError(\"Prop Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Prop Fund Sharing is required\"),\r\n\r\n  b2pFund: Yup.number()\r\n    .typeError(\"Client Fund must be a number\")\r\n    .min(0, \"Client Fund must be greater than or equal to 0\")\r\n    .required(\"Client Fund is required\"),\r\n  b2pFundInterest: Yup.number()\r\n    .typeError(\"Client Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Client Fund Interest is required\"),\r\n  b2pFundSharing: Yup.number()\r\n    .typeError(\"Client Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Client Fund Sharing is required\"),\r\n\r\n  clientFund: Yup.number()\r\n    .typeError(\"Client Fund must be a number\")\r\n    .min(0, \"Client Fund must be greater than or equal to 0\")\r\n    .required(\"Client Fund is required\"),\r\n  clientFundInterest: Yup.number()\r\n    .typeError(\"Client Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Client Fund Interest is required\"),\r\n  clientFundSharing: Yup.number()\r\n    .typeError(\"Client Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Client Fund Sharing is required\"),\r\n\r\n  costPerCr: Yup.number()\r\n    .typeError(\"Cost must be a number\")\r\n    .min(0, \"Cost must be greater than or equal to 0\")\r\n    .required(\"Cost is required\"),\r\n});\r\n\r\n// Broker Form Popup Component\r\nconst BrokerFormPopup = ({\r\n  open,\r\n  handleClose,\r\n  onFormSubmit,\r\n  brokerData,\r\n  isDisable,\r\n}) => {\r\n  const initialValues = {\r\n    id: brokerData?.id || null,\r\n    brokerName: brokerData?.brokerName || \"\",\r\n    grossFund: brokerData?.grossFund || 0,\r\n    grossFundInterest: brokerData?.grossFundInterest || 0,\r\n    grossFundSharing: brokerData?.grossFundSharing || 0,\r\n    arbitrageFund: brokerData?.arbitrageFund || 0,\r\n    arbitrageFundInterest: brokerData?.arbitrageFundInterest || 0,\r\n    arbitrageFundSharing: brokerData?.arbitrageFundSharing || 0,\r\n    propFund: brokerData?.propFund || 0,\r\n    propFundInterest: brokerData?.propFundInterest || 0,\r\n    propFundSharing: brokerData?.propFundSharing || 0,\r\n    b2pFund: brokerData?.b2pFund || 0,\r\n    b2pFundInterest: brokerData?.b2pFundInterest || 0,\r\n    b2pFundSharing: brokerData?.b2pFundSharing || 0,\r\n    clientFund: brokerData?.b2pFund || 0,\r\n    clientFundInterest: brokerData?.b2pFundInterest || 0,\r\n    clientFundSharing: brokerData?.b2pFundSharing || 0,\r\n    costPerCr: brokerData?.costPerCr || 0,\r\n  };\r\n\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      if (values.id) {\r\n        await api.put(`/updateBroker/${values.id}`, values);\r\n        toast.success(\"Broker updated successfully.\");\r\n      } else {\r\n        await api.post(\"/createBroker\", values);\r\n        toast.success(\"Broker added successfully.\");\r\n      }\r\n      onFormSubmit();\r\n      resetForm();\r\n      handleClose();\r\n    } catch (error) {\r\n      console.error(error?.response?.data);\r\n      toast.error(error?.response?.data?.detail || \"An error occurred.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal open={open} onClose={handleClose}>\r\n      <Box\r\n        sx={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: 600,\r\n          bgcolor: \"background.paper\",\r\n          boxShadow: 24,\r\n          p: 4,\r\n          borderRadius: 2,\r\n          overflowY: \"auto\",\r\n          height: 600,\r\n        }}\r\n      >\r\n        <Typography variant=\"h6\" sx={{ marginBottom: \"20px\" }}>\r\n          {initialValues.id ? \"Update Broker\" : \"Add Broker\"}\r\n        </Typography>\r\n\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={brokerValidationSchema}\r\n          onSubmit={handleSubmit}\r\n          enableReinitialize\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            setFieldValue,\r\n          }) => (\r\n            <Form>\r\n              <div className=\"flex flex-col gap-4\">\r\n                {/* Broker Name */}\r\n                <TextField\r\n                  name=\"brokerName\"\r\n                  label=\"Broker Name\"\r\n                  value={values.brokerName} // Force uppercase\r\n                  onChange={(e) => {\r\n                    const uppercaseValue = e.target.value.toUpperCase();\r\n                    setFieldValue(\"brokerName\", uppercaseValue); // Set uppercase value in Formik\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  error={touched.brokerName && Boolean(errors.brokerName)}\r\n                  helperText={touched.brokerName && errors.brokerName}\r\n                  fullWidth\r\n                  disabled={isDisable}\r\n                  inputProps={{ style: { textTransform: \"uppercase\" } }} // Ensure UI displays uppercase\r\n                />\r\n\r\n                {/* Gross Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"grossFund\"\r\n                    label=\"Gross Fund (1Cr)\"\r\n                    value={values.grossFund}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    disabled={isDisable}\r\n                    error={touched.grossFund && Boolean(errors.grossFund)}\r\n                    helperText={touched.grossFund && errors.grossFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"grossFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.grossFundInterest}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    disabled={isDisable}\r\n                    error={\r\n                      touched.grossFundInterest &&\r\n                      Boolean(errors.grossFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.grossFundInterest && errors.grossFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"grossFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.grossFundSharing}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    disabled={isDisable}\r\n                    error={\r\n                      touched.grossFundSharing &&\r\n                      Boolean(errors.grossFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.grossFundSharing && errors.grossFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* Arbitrage Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"arbitrageFund\"\r\n                    label=\"Arbitrage Fund (1Cr)\"\r\n                    value={values.arbitrageFund}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    disabled={isDisable}\r\n                    error={\r\n                      touched.arbitrageFund && Boolean(errors.arbitrageFund)\r\n                    }\r\n                    helperText={touched.arbitrageFund && errors.arbitrageFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"arbitrageFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.arbitrageFundInterest}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    disabled={isDisable}\r\n                    error={\r\n                      touched.arbitrageFundInterest &&\r\n                      Boolean(errors.arbitrageFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.arbitrageFundInterest &&\r\n                      errors.arbitrageFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"arbitrageFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.arbitrageFundSharing}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    disabled={isDisable}\r\n                    error={\r\n                      touched.arbitrageFundSharing &&\r\n                      Boolean(errors.arbitrageFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.arbitrageFundSharing &&\r\n                      errors.arbitrageFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* Prop Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"propFund\"\r\n                    label=\"Prop Fund (1Cr)\"\r\n                    value={values.propFund}\r\n                    disabled={isDisable}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.propFund && Boolean(errors.propFund)}\r\n                    helperText={touched.propFund && errors.propFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"propFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.propFundInterest}\r\n                    disabled={isDisable}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.propFundInterest &&\r\n                      Boolean(errors.propFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.propFundInterest && errors.propFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"propFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.propFundSharing}\r\n                    disabled={isDisable}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.propFundSharing && Boolean(errors.propFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.propFundSharing && errors.propFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* B2P Fund */}\r\n\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"b2pFund\"\r\n                    label=\"B2P\"\r\n                    value={values.b2pFund}\r\n                    disabled={isDisable}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.b2pFund && Boolean(errors.b2pFund)}\r\n                    helperText={touched.b2pFund && errors.b2pFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"b2pFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.b2pFundInterest}\r\n                    disabled={isDisable}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.b2pFundInterest && Boolean(errors.b2pFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.b2pFundInterest && errors.b2pFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"b2pFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.b2pFundSharing}\r\n                    disabled={isDisable}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.b2pFundSharing && Boolean(errors.b2pFundSharing)\r\n                    }\r\n                    helperText={touched.b2pFundSharing && errors.b2pFundSharing}\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n                {/* Client Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"clientFund\"\r\n                    label=\"Client\"\r\n                    value={values.clientFund}\r\n                    disabled={isDisable}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.clientFund && Boolean(errors.clientFund)}\r\n                    helperText={touched.clientFund && errors.clientFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"clientFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.clientFundInterest}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    disabled={isDisable}\r\n                    error={\r\n                      touched.clientFundInterest &&\r\n                      Boolean(errors.clientFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.clientFundInterest && errors.clientFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"clientFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.clientFundSharing}\r\n                    onChange={handleChange}\r\n                    disabled={isDisable}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.clientFundSharing &&\r\n                      Boolean(errors.clientFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.clientFundSharing && errors.clientFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* Cost Per Cr */}\r\n                <TextField\r\n                  name=\"costPerCr\"\r\n                  label=\"Cost Per Cr\"\r\n                  value={values.costPerCr}\r\n                  onChange={handleChange}\r\n                  disabled={isDisable}\r\n                  onBlur={handleBlur}\r\n                  error={touched.costPerCr && Boolean(errors.costPerCr)}\r\n                  helperText={touched.costPerCr && errors.costPerCr}\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                />\r\n\r\n                {/* Action Buttons */}\r\n                {!isDisable && (\r\n                  <div className=\"flex justify-end gap-4 mt-4\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={handleClose}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                      {initialValues.id ? \"Update Broker\" : \"Add Broker\"}\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BrokerFormPopup;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TableSortLabel,\r\n  CircularProgress,\r\n  Collapse,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from \"@mui/icons-material\";\r\n\r\nconst CollapsableTable = ({\r\n  title = [],\r\n  columnWidths = [],\r\n  tableData = [],\r\n  renderAction,\r\n  loading,\r\n}) => {\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n  const [expandedRow, setExpandedRow] = useState(null);\r\n\r\n  const excludedKeys = [\r\n    \"status\",\r\n    \"id\",\r\n    \"brokerId\",\r\n    \"fundAllocated\",\r\n    \"Record Id\",\r\n    \"Gross Fund Interest\",\r\n    \"Gross Fund Sharing\",\r\n    \"Arbitrage Fund Interest\",\r\n    \"Arbitrage Fund Sharing\",\r\n    \"Prop Fund Interest\",\r\n    \"Prop Fund Sharing\",\r\n    \"Cost Per Cr\",\r\n  ];\r\n\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending =\r\n        prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n    return [...tableData].sort((a, b) => {\r\n      if (a[sortConfig.key] < b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      }\r\n      if (a[sortConfig.key] > b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  const handleExpandClick = (rowIndex) => {\r\n    setExpandedRow((prev) => (prev === rowIndex ? null : rowIndex));\r\n  };\r\n\r\n  return (\r\n    <Paper className=\"custom\">\r\n      <TableContainer className=\"tble-container\">\r\n        <Table className=\"tble-custom\" stickyHeader>\r\n          <TableHead>\r\n            <TableRow className=\"tble-head\">\r\n              <TableCell /> {/* Expand/Collapse Column */}\r\n              {title.map((header, index) => (\r\n                <TableCell\r\n                  key={index}\r\n                  align=\"center\"\r\n                  sx={{\r\n                    // fontWeight: \"bold\",\r\n                    width: columnWidths[index] || \"auto\",\r\n                    minWidth: columnWidths[index] || 150,\r\n                    maxWidth: columnWidths[index] || 300,\r\n                    position: \"sticky\",\r\n                    top: 0,\r\n                    backgroundColor: \"white\",\r\n                    zIndex: 2,\r\n                    padding: \"10px 15px\",\r\n                    height: \"44px\",\r\n                    fontSize: \"16px\",\r\n                    fontWeight: 300,\r\n                  }}\r\n                >\r\n                  <TableSortLabel\r\n                    active={sortConfig.key === header.toLowerCase()}\r\n                    direction={\r\n                      sortConfig.key === header.toLowerCase()\r\n                        ? sortConfig.direction\r\n                        : \"asc\"\r\n                    }\r\n                    onClick={() => handleSort(header.toLowerCase())}\r\n                  >\r\n                    {header?.toUpperCase()}\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody className=\"tble-body\">\r\n            {loading && (\r\n              <TableRow>\r\n                <TableCell colSpan={title.length + 1} align=\"center\">\r\n                  <CircularProgress />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n\r\n            {sortedData.map((rowData, rowIndex) => (\r\n              <React.Fragment key={rowIndex}>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => handleExpandClick(rowIndex)}\r\n                    >\r\n                      {expandedRow === rowIndex ? (\r\n                        <KeyboardArrowUp />\r\n                      ) : (\r\n                        <KeyboardArrowDown />\r\n                      )}\r\n                    </IconButton>\r\n                  </TableCell>\r\n\r\n                  {Object.keys(rowData)\r\n                    .filter((key) => !excludedKeys.includes(key))\r\n                    .map((key, colIndex) => {\r\n                      if (key === \"action\" && renderAction) {\r\n                        return (\r\n                          <TableCell key={colIndex} align=\"center\">\r\n                            <Button\r\n                              isDisabled={rowData.status === 3}\r\n                              onPress={() => renderAction(rowData.id)}\r\n                            >\r\n                              {rowData.status === 1 ? \"Release\" : \"Released\"}\r\n                            </Button>\r\n                          </TableCell>\r\n                        );\r\n                      }\r\n\r\n                      return (\r\n                        <TableCell\r\n                          key={colIndex}\r\n                          align=\"center\"\r\n                          sx={{\r\n                            minWidth: columnWidths[colIndex] || 150,\r\n                            maxWidth: columnWidths[colIndex] || 300,\r\n                            whiteSpace: \"nowrap\",\r\n                            overflow: \"hidden\",\r\n                            textOverflow: \"ellipsis\",\r\n                          }}\r\n                        >\r\n                          {rowData[key]}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                </TableRow>\r\n\r\n                <TableRow>\r\n                  <TableCell colSpan={title.length + 1} sx={{ p: 0 }}>\r\n                    <Collapse\r\n                      in={expandedRow === rowIndex}\r\n                      timeout=\"auto\"\r\n                      unmountOnExit\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          padding: 16,\r\n                          backgroundColor: \"#f9f9f9\",\r\n                          display: \"flex\",\r\n                          gap: 4,\r\n                        }}\r\n                      >\r\n                        {/* <strong>Details:</strong> */}\r\n                        {/* {console.log(JSON.stringify(rowData, null, 2))} */}\r\n                        {/* <pre>{JSON.stringify(rowData, null, 2)}</pre> */}\r\n                        <Paper className=\"flex-1\">\r\n                          <TableContainer>\r\n                            <Table>\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell\r\n                                    colSpan={3}\r\n                                    sx={{ textAlign: \"center\" }}\r\n                                  >\r\n                                    Gross Fund\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                <TableRow>\r\n                                  <TableCell>Fund</TableCell>\r\n                                  <TableCell>Intrest %</TableCell>\r\n                                  <TableCell>Sharing %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                  <TableCell>{rowData[\"Gross Fund\"]}</TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Gross Fund Interest\"]}%\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Gross Fund Sharing\"]}%\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                        </Paper>\r\n\r\n                        <Paper className=\"flex-1\">\r\n                          <TableContainer>\r\n                            <Table>\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell\r\n                                    colSpan={3}\r\n                                    sx={{ textAlign: \"center\" }}\r\n                                  >\r\n                                    Arbitrage Fund\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                <TableRow>\r\n                                  <TableCell>Fund</TableCell>\r\n                                  <TableCell>Intrest %</TableCell>\r\n                                  <TableCell>Sharing %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                  <TableCell>\r\n                                    {rowData[\"Arbitrage Fund\"]}\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Arbitrage Fund Interest\"]}%\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Arbitrage Fund Sharing\"]}%\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                        </Paper>\r\n\r\n                        <Paper className=\"flex-1\">\r\n                          <TableContainer>\r\n                            <Table>\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell\r\n                                    colSpan={3}\r\n                                    sx={{ textAlign: \"center\" }}\r\n                                  >\r\n                                    Prop Fund\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                <TableRow>\r\n                                  <TableCell>Fund</TableCell>\r\n                                  <TableCell>Intrest %</TableCell>\r\n                                  <TableCell>Sharing %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                  <TableCell>{rowData[\"Prop Fund\"]}</TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Prop Fund Interest\"]}%\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Prop Fund Sharing\"]}%\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                        </Paper>\r\n\r\n                        {/* <TableContainer>\r\n                          <Table>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>Column</TableCell>\r\n                                <TableCell>Value</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {Object.keys(rowData).map((key) => (\r\n                                <TableRow key={key}>\r\n                                  <TableCell>{key}</TableCell>\r\n                                  <TableCell>{rowData[key]}</TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer> */}\r\n                      </div>\r\n                      <Paper sx={{ margin: \"1rem\" }}>\r\n                        <TableContainer>\r\n                          <Table>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>Cost per CR</TableCell>\r\n                                <TableCell>Total Fund</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              <TableRow>\r\n                                <TableCell>{rowData[\"Cost Per Cr\"]}</TableCell>\r\n                                <TableCell>{rowData[\"Total Fund\"]}</TableCell>\r\n                              </TableRow>\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      </Paper>\r\n                    </Collapse>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </React.Fragment>\r\n            ))}\r\n\r\n            {!loading && sortedData.length === 0 && (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={title.length + 1}\r\n                  align=\"center\"\r\n                  className=\"middle-noData\"\r\n                >\r\n                  No data found.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CollapsableTable;\r\n","import {Modal, Box } from \"@mui/material\";\r\n\r\n\r\n\r\nconst CommonPopup = ({ open, handleClose, children }) => {\r\n  return (\r\n    <Modal open={open} onClose={handleClose}>\r\n      <Box\r\n        sx={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: 600,\r\n          bgcolor: \"background.paper\",\r\n          boxShadow: 24,\r\n          p: 2,\r\n          borderRadius: 2,\r\n          overflowY: \"auto\",\r\n          height: \"80%\",\r\n        }}\r\n      >\r\n        {children}\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CommonPopup;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Button,\r\n  TextField,\r\n  IconButton,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport CustomTable from \"../table/CustomTable.jsx\";\r\nimport AdminLayout from \"../layouts/AdminLayout.jsx\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport BrokerFormPopup from \"../popups/BrokerFormPopup.jsx\";\r\nimport { Card } from \"@nextui-org/react\";\r\nimport { IoSearch, IoAddCircleOutline } from \"react-icons/io5\";\r\nimport { CiMenuKebab } from \"react-icons/ci\";\r\nimport {\r\n  Dropdown,\r\n  DropdownTrigger,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"@nextui-org/react\";\r\nimport CollapsableTable from \"../table/CollapsableTable.jsx\";\r\nimport CommonPopup from \"../popups/commonPopup/CommonPopup.jsx\";\r\nimport { IoClose } from \"react-icons/io5\";\r\n\r\n// Column Titles\r\n// const brokerTableTitle = [\r\n//   \"Broker Name\",\r\n//   \"Start Date\",\r\n//   \"Release Date\",\r\n//   \"Gross Fund\",\r\n//   \"Arbitrage Fund\",\r\n//   \"Total Fund\",\r\n//   \"Prop Fund\",\r\n//   \"Action\",\r\n// ];\r\n\r\nconst brokerTableTitle = [\r\n  \"Broker Name\",\r\n  \"Gross\",\r\n  \"Arbitrage\",\r\n  \"Prop\",\r\n  // \"Interest\",\r\n  // \"Sharing\",\r\n  // \"Cost Per Cr\",\r\n  \"B2P\",\r\n  \"Client\",\r\n  \"Total \",\r\n  // \"Start Date\",\r\n  // \"Realease Date\",\r\n  \"Action\",\r\n];\r\n\r\nconst AdminSettings = () => {\r\n  const [brokerData, setBrokerData] = useState([]);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [loader, setLoader] = useState(false);\r\n  const [selectedBroker, setSelectedBroker] = useState(null);\r\n  const [rowPopups, setRowPopups] = useState(false);\r\n  const [rowData, setRowData] = useState({});\r\n  const [brokerTotel, setBrokerTotel] = useState([]);\r\n  const [viewByPopup, setViewByPopup] = useState(false);\r\n\r\n  // Fetch Brokers Data\r\n  const getBrokerData = useCallback(async () => {\r\n    setLoader(true);\r\n    try {\r\n      const response = await api.get(\"/getAllBroker\");\r\n      if (response.status === 200) {\r\n        console.log(response.data?.data);\r\n        const formattedData = response.data?.data?.map((broker) => ({\r\n          \"Broker Name\": broker.brokerName,\r\n\r\n          \"Gross Fund Interest\": broker.grossFundInterest || 0,\r\n          \"Gross Fund\": broker.grossFund || 0,\r\n          \"Gross Fund Sharing\": broker.grossFundSharing || 0,\r\n\r\n          \"Arbitrage Fund Interest\": broker.arbitrageFundInterest || 0,\r\n          \"Arbitrage Fund\": broker.arbitrageFund || 0,\r\n          \"Arbitrage Fund Sharing\": broker.arbitrageFundSharing || 0,\r\n\r\n          \"Prop Fund Interest\": broker.propFundInterest || 0,\r\n          \"Prop Fund\": broker.propFund || 0,\r\n          \"Prop Fund Sharing\": broker.propFundSharing || 0,\r\n          \"Cost Per Cr\": broker.costPerCr || 0,\r\n\r\n          b2pFund: broker.b2pFund || 0,\r\n          b2pFundsharing: broker.b2pFundsharing || 0,\r\n          b2pFundInterest: broker.b2pFundInterest || 0,\r\n\r\n          clientFund: broker.clientFund,\r\n          clientFundSharing: broker.clientFundSharing,\r\n          clientFundInterest: broker.clientFundInterest,\r\n\r\n          // Total Fund Calculation (Summing all fund values)\r\n          \"Total Fund\":\r\n            broker.grossFund !== undefined &&\r\n            broker.arbitrageFund !== undefined &&\r\n            broker.propFund !== undefined\r\n              ? broker.grossFund + broker.arbitrageFund + broker.propFund\r\n              : 0,\r\n\r\n          // \"Start Date\": broker.startDate || \"-\",\r\n          // \"Release Date\": broker.releaseDate || \"-\",\r\n\r\n          Action: (\r\n            <Dropdown>\r\n              <DropdownTrigger>\r\n                <IconButton>\r\n                  <CiMenuKebab />\r\n                </IconButton>\r\n              </DropdownTrigger>\r\n              <DropdownMenu\r\n                aria-label=\"Action menu\"\r\n                onAction={(key) => handleDropdownAction(key, broker)}\r\n              >\r\n                <DropdownItem key=\"release\" isDisabled={broker.status === 3}>\r\n                  Release\r\n                </DropdownItem>\r\n                <DropdownItem key=\"edit\" isDisabled={broker.status === 3}>\r\n                  Edit\r\n                </DropdownItem>\r\n                <DropdownItem key=\"delete\">Delete</DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          ),\r\n        }));\r\n\r\n        const brokerTable = response?.data?.totals?.map((brokerTotal) => ({\r\n          Gross: brokerTotal.totalGrossFund,\r\n          Arbitrage: brokerTotal.totalArbitrageFund,\r\n          Prop: brokerTotal.totalPropFund,\r\n          B2P: brokerTotal.totalB2pFund,\r\n          Client: brokerTotal.totalClientFund,\r\n        }));\r\n        setBrokerTotel(brokerTable);\r\n        setBrokerData(formattedData);\r\n      } else {\r\n        toast.error(\"Failed to fetch broker data.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching broker data.\");\r\n    } finally {\r\n      setLoader(false);\r\n    }\r\n  }, []);\r\n\r\n  const deleteBroker = async (broker) => {\r\n    try {\r\n      console.warn(broker);\r\n      const response = await api.put(`/softDeleteBroker/${broker.id}`);\r\n      if (response.status === 200) {\r\n        toast.success(`Broker \"${broker.brokerName}\" deleted successfully.`);\r\n        getBrokerData();\r\n      } else {\r\n        toast.error(`Failed to delete broker \"${broker.brokerName}\".`);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error deleting broker.\");\r\n    }\r\n  };\r\n\r\n  // Handle Dropdown Actions\r\n  const handleDropdownAction = (action, broker) => {\r\n    if (action === \"release\") {\r\n      releaseBroker(broker);\r\n    } else if (action === \"edit\") {\r\n      setSelectedBroker(broker);\r\n      setAnchorEl(document.body);\r\n    } else if (action === \"delete\") {\r\n      deleteBroker(broker);\r\n    }\r\n  };\r\n\r\n  // Release Broker\r\n  const releaseBroker = async (broker) => {\r\n    try {\r\n      const response = await api.put(`/releaseBroker/${broker.id}/3`);\r\n      if (response.status === 200) {\r\n        toast.success(`Broker \"${broker.brokerName}\" released successfully.`);\r\n        getBrokerData();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error releasing broker.\");\r\n    }\r\n  };\r\n\r\n  // Open and Close Popover\r\n  const handleClickPopover = (event) => setAnchorEl(event.currentTarget);\r\n  const handleClosePopover = () => {\r\n    setAnchorEl(null);\r\n    setSelectedBroker(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrokerData();\r\n  }, [getBrokerData]);\r\n\r\n  const handlePopupClose = () => {\r\n    setRowPopups(false);\r\n  };\r\n\r\n  return (\r\n    <AdminLayout\r\n      pageTitle=\"Brokers\"\r\n      pageSubtitle=\"Add, view, and release brokers\"\r\n    >\r\n      <CommonPopup open={rowPopups} handleClose={handlePopupClose}>\r\n        <div className=\"flex justify-between align-middle mb-2\">\r\n          <Typography className=\"mt-2\">\r\n            Broker Name - {rowData[\"Broker Name\"]}\r\n            {console.log(\"Broker Name\", rowData)}\r\n          </Typography>\r\n          <IconButton onClick={handlePopupClose}>\r\n            <IoClose />\r\n          </IconButton>\r\n        </div>\r\n        <div\r\n          style={{\r\n            padding: 10,\r\n            // backgroundColor: \"#f9f9f9\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            gap: 5,\r\n          }}\r\n        >\r\n          <div className=\"flex flex-col gap-4\">\r\n            {/* Broker Name */}\r\n            <TextField\r\n              name=\"brokerName\"\r\n              label=\"Broker Name\"\r\n              value={rowData[\"Broker Name\"]}\r\n              sx={{\r\n                '& .Mui-disabled': { \r\n                  color: \"black\",\r\n                }\r\n              }}\r\n              disabled\r\n              inputProps={{\r\n                style: {\r\n                  textTransform: \"uppercase\",\r\n                  color: \"black\"\r\n                }\r\n              }}\r\n            />\r\n\r\n            {/* Gross Fund */}\r\n            <div className=\"flex gap-4\">\r\n              <TextField\r\n                name=\"grossFund\"\r\n                label=\"Gross Fund (1Cr)\"\r\n                value={rowData[\"Gross Fund\"]}\r\n                disabled\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                name=\"grossFundInterest\"\r\n                label=\"Interest (%)\"\r\n                value={rowData[\"Gross Fund Interest\"]}\r\n                disabled\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                name=\"grossFundSharing\"\r\n                label=\"Sharing (%)\"\r\n                value={rowData[\"Gross Fund Sharing\"]}\r\n                disabled\r\n                fullWidth\r\n              />\r\n            </div>\r\n\r\n            {/* Arbitrage Fund */}\r\n            <div className=\"flex gap-4\">\r\n              <TextField\r\n                name=\"arbitrageFund\"\r\n                label=\"Arbitrage Fund (1Cr)\"\r\n                value={rowData[\"Arbitrage Fund\"]}\r\n                disabled\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                name=\"arbitrageFundInterest\"\r\n                label=\"Interest (%)\"\r\n                value={rowData[\"Arbitrage Fund Interest\"]}\r\n                disabled\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                name=\"arbitrageFundSharing\"\r\n                label=\"Sharing (%)\"\r\n                value={rowData[\"Arbitrage Fund Sharing\"]}\r\n                disabled\r\n                fullWidth\r\n              />\r\n            </div>\r\n\r\n            {/* Prop Fund */}\r\n            <div className=\"flex gap-4\">\r\n              <TextField \r\n              name=\"propFund\" \r\n              label=\"Prop Fund (1Cr)\" \r\n              value={rowData[\"Prop Fund\"]}\r\n              disabled\r\n              fullWidth />\r\n              <TextField\r\n                name=\"propFundInterest\"\r\n                label=\"Interest (%)\"\r\n                value={rowData[\"Prop Fund Interest\"]}\r\n                disabled\r\n                fullWidth\r\n              />\r\n              <TextField \r\n              name=\"propFundSharing\" \r\n              label=\"Sharing (%)\" \r\n              value={rowData[\"Prop Fund Sharing\"]}\r\n              disabled\r\n              fullWidth />\r\n            </div>\r\n\r\n            {/* B2P Fund */}\r\n\r\n            <div className=\"flex gap-4\">\r\n              <TextField name=\"b2pFund\" \r\n              value={rowData[\"b2pFund\"]}\r\n              label=\"B2P\" \r\n              disabled\r\n              fullWidth />\r\n              <TextField\r\n                name=\"b2pFundInterest\"\r\n                label=\"Interest (%)\"\r\n                value={rowData[\"b2pFundInterest\"]}\r\n                disabled\r\n                fullWidth\r\n              />\r\n              <TextField name=\"b2pFundSharing\" \r\n              value={rowData[\"b2pFundsharing\"]}\r\n              label=\"Sharing (%)\"\r\n              disabled fullWidth />\r\n            </div>\r\n            {/* Client Fund */}\r\n            <div className=\"flex gap-4\">\r\n              <TextField name=\"clientFund\"\r\n              value={rowData[\"clientFund\"]}\r\n              label=\"Client\"\r\n              disabled\r\n              fullWidth />\r\n              <TextField\r\n                name=\"clientFundInterest\"\r\n                label=\"Interest (%)\"\r\n                value={rowData[\"clientFundInterest\"]}\r\n                disabled\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                name=\"clientFundSharing\"\r\n                label=\"Sharing (%)\"\r\n                value={rowData[\"clientFundSharing\"]}\r\n                fullWidth\r\n                disabled\r\n              />\r\n            </div>\r\n\r\n            {/* Cost Per Cr */}\r\n            <TextField\r\n              name=\"costPerCr\"\r\n              label=\"Cost Per Cr\"\r\n              value={rowData[\"Cost Per Cr\"]}\r\n              fullWidth\r\n              margin=\"normal\"\r\n              disabled\r\n            />\r\n          </div>\r\n          {/* <div className=\"flex gap-2\">\r\n            <Paper className=\"flex-1\">\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={3} sx={{ textAlign: \"center\" }}>\r\n                        Gross Fund\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell>Fund</TableCell>\r\n                      <TableCell>Intrest %</TableCell>\r\n                      <TableCell>Sharing %</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell>{rowData[\"Gross Fund\"]}</TableCell>\r\n                      <TableCell>{rowData[\"Gross Fund Interest\"]}%</TableCell>\r\n                      <TableCell>{rowData[\"Gross Fund Sharing\"]}%</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Paper>\r\n\r\n            <Paper className=\"flex-1\">\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={3} sx={{ textAlign: \"center\" }}>\r\n                        Arbitrage Fund\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell>Fund</TableCell>\r\n                      <TableCell>Intrest %</TableCell>\r\n                      <TableCell>Sharing %</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell>{rowData[\"Arbitrage Fund\"]}</TableCell>\r\n                      <TableCell>\r\n                        {rowData[\"Arbitrage Fund Interest\"]}%\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {rowData[\"Arbitrage Fund Sharing\"]}%\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Paper>\r\n          </div>\r\n\r\n          <div className=\"flex gap-2\">\r\n            <Paper className=\"flex-1\">\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={3} sx={{ textAlign: \"center\" }}>\r\n                        Prop Fund\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell>Fund</TableCell>\r\n                      <TableCell>Intrest %</TableCell>\r\n                      <TableCell>Sharing %</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell>{rowData[\"Prop Fund\"]}</TableCell>\r\n                      <TableCell>{rowData[\"Prop Fund Interest\"]}%</TableCell>\r\n                      <TableCell>{rowData[\"Prop Fund Sharing\"]}%</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Paper>\r\n\r\n            <Paper className=\"flex-1\">\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell colSpan={3} sx={{ textAlign: \"center\" }}>\r\n                        B2P Fund\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell>Fund</TableCell>\r\n                      <TableCell>Intrest %</TableCell>\r\n                      <TableCell>Sharing %</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell>{rowData[\"b2pFund\"]}</TableCell>\r\n                      <TableCell>{rowData[\"b2pFundInterest\"]}%</TableCell>\r\n                      <TableCell>{rowData[\"b2pFundsharing\"]}%</TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Paper>\r\n          </div>\r\n          <Paper className=\"flex-1\">\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell colSpan={3} sx={{ textAlign: \"center\" }}>\r\n                      Client Fund\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell>Fund</TableCell>\r\n                    <TableCell>Intrest %</TableCell>\r\n                    <TableCell>Sharing %</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell>{rowData[\"clientFund\"]}</TableCell>\r\n                    <TableCell>{rowData[\"clientFundInterest\"]}%</TableCell>\r\n                    <TableCell>{rowData[\"clientFundSharing\"]}%</TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Paper> */}\r\n        </div>\r\n      </CommonPopup>\r\n      <Card\r\n        className=\"settings-mainCard\"\r\n        style={{ marginTop: \"1rem\", width: \"100%\", overflowY: \"scroll\" }}\r\n      >\r\n        <div className=\"flex justify-between p-2 align-middle broker-form\">\r\n          <TextField\r\n            className=\"searchUser\"\r\n            placeholder=\"Search\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <IoSearch />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleClickPopover}\r\n            startIcon={<IoAddCircleOutline />}\r\n          >\r\n            Add Broker\r\n          </Button>\r\n        </div>\r\n\r\n        <BrokerFormPopup\r\n          anchorEl={anchorEl}\r\n          open={Boolean(anchorEl)}\r\n          handleClose={handleClosePopover}\r\n          onFormSubmit={getBrokerData}\r\n          brokerData={selectedBroker}\r\n          isDisable={viewByPopup}\r\n        />\r\n\r\n        <div className=\"mt-4\">\r\n          <CustomTable\r\n            title={brokerTableTitle}\r\n            tableData={brokerData}\r\n            headerTotal={brokerTotel}\r\n            loading={loader}\r\n            onRowClick={(rowData) => {\r\n              setRowPopups(true);\r\n              // setViewByPopup(true)\r\n              // handleDropdownAction(\"edit\",rowData)\r\n              setRowData(rowData);\r\n            }}\r\n          />\r\n          {/* <CollapsableTable\r\n            title={brokerTableTitle}\r\n            tableData={brokerData}\r\n            loading={loader}\r\n          /> */}\r\n        </div>\r\n      </Card>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminSettings;\r\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"\n}), 'ArrowDownward');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableSortLabelUtilityClass(slot) {\n  return generateUtilityClass('MuiTableSortLabel', slot);\n}\nconst tableSortLabelClasses = generateUtilityClasses('MuiTableSortLabel', ['root', 'active', 'icon', 'iconDirectionDesc', 'iconDirectionAsc', 'directionDesc', 'directionAsc']);\nexport default tableSortLabelClasses;","'use client';\n\nimport composeClasses from '@mui/utils/composeClasses';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport ArrowDownwardIcon from \"../internal/svg-icons/ArrowDownward.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport tableSortLabelClasses, { getTableSortLabelUtilityClass } from \"./tableSortLabelClasses.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    direction,\n    active\n  } = ownerState;\n  const slots = {\n    root: ['root', active && 'active', `direction${capitalize(direction)}`],\n    icon: ['icon', `iconDirection${capitalize(direction)}`]\n  };\n  return composeClasses(slots, getTableSortLabelUtilityClass, classes);\n};\nconst TableSortLabelRoot = styled(ButtonBase, {\n  name: 'MuiTableSortLabel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.active && styles.active];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  cursor: 'pointer',\n  display: 'inline-flex',\n  justifyContent: 'flex-start',\n  flexDirection: 'inherit',\n  alignItems: 'center',\n  '&:focus': {\n    color: (theme.vars || theme).palette.text.secondary\n  },\n  '&:hover': {\n    color: (theme.vars || theme).palette.text.secondary,\n    [`& .${tableSortLabelClasses.icon}`]: {\n      opacity: 0.5\n    }\n  },\n  [`&.${tableSortLabelClasses.active}`]: {\n    color: (theme.vars || theme).palette.text.primary,\n    [`& .${tableSortLabelClasses.icon}`]: {\n      opacity: 1,\n      color: (theme.vars || theme).palette.text.secondary\n    }\n  }\n})));\nconst TableSortLabelIcon = styled('span', {\n  name: 'MuiTableSortLabel',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.icon, styles[`iconDirection${capitalize(ownerState.direction)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  fontSize: 18,\n  marginRight: 4,\n  marginLeft: 4,\n  opacity: 0,\n  transition: theme.transitions.create(['opacity', 'transform'], {\n    duration: theme.transitions.duration.shorter\n  }),\n  userSelect: 'none',\n  variants: [{\n    props: {\n      direction: 'desc'\n    },\n    style: {\n      transform: 'rotate(0deg)'\n    }\n  }, {\n    props: {\n      direction: 'asc'\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n})));\n\n/**\n * A button based label for placing inside `TableCell` for column sorting.\n */\nconst TableSortLabel = /*#__PURE__*/React.forwardRef(function TableSortLabel(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableSortLabel'\n  });\n  const {\n    active = false,\n    children,\n    className,\n    direction = 'asc',\n    hideSortIcon = false,\n    IconComponent = ArrowDownwardIcon,\n    slots = {},\n    slotProps = {},\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    active,\n    direction,\n    hideSortIcon,\n    IconComponent\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    slots,\n    slotProps\n  };\n  const [RootSlot, rootProps] = useSlot('root', {\n    elementType: TableSortLabelRoot,\n    externalForwardedProps,\n    ownerState,\n    className: clsx(classes.root, className),\n    ref\n  });\n  const [IconSlot, iconProps] = useSlot('icon', {\n    elementType: TableSortLabelIcon,\n    externalForwardedProps,\n    ownerState,\n    className: classes.icon\n  });\n  return /*#__PURE__*/_jsxs(RootSlot, {\n    disableRipple: true,\n    component: \"span\",\n    ...rootProps,\n    ...other,\n    children: [children, hideSortIcon && !active ? null : /*#__PURE__*/_jsx(IconSlot, {\n      as: IconComponent,\n      ...iconProps\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableSortLabel.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the label will have the active styling (should be true for the sorted column).\n   * @default false\n   */\n  active: PropTypes.bool,\n  /**\n   * Label contents, the arrow will be appended automatically.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The current sort direction.\n   * @default 'asc'\n   */\n  direction: PropTypes.oneOf(['asc', 'desc']),\n  /**\n   * Hide sort icon when active is false.\n   * @default false\n   */\n  hideSortIcon: PropTypes.bool,\n  /**\n   * Sort icon to use.\n   * @default ArrowDownwardIcon\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    icon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    icon: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableSortLabel;","import React, { useState, useMemo } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TableSortLabel,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\n\r\nconst CustomTable = ({\r\n  title = [],\r\n  columnWidths = [],\r\n  tableData = [],\r\n  renderAction,\r\n  loading,\r\n  headerTotal,\r\n  onRowClick,\r\n}) => {\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n\r\n  const excludedKeys = [\r\n    \"status\",\r\n    \"id\",\r\n    \"brokerId\",\r\n    \"fundAllocated\",\r\n    \"Record Id\",\r\n    \"Gross Fund Interest\",\r\n    \"Gross Fund Sharing\",\r\n    \"Arbitrage Fund Interest\",\r\n    \"Arbitrage Fund Sharing\",\r\n    \"Prop Fund Interest\",\r\n    \"Prop Fund Sharing\",\r\n    \"Cost Per Cr\",\r\n    \"b2pFundsharing\",\r\n    \"b2pFundInterest\",\r\n    \"clientFundSharing\",\r\n    \"clientFundInterest\",\r\n  ];\r\n\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending = prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  const sortedData = useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n\r\n    return [...tableData].sort((a, b) => {\r\n      const aValue = a[sortConfig.key] ?? \"\";\r\n      const bValue = b[sortConfig.key] ?? \"\";\r\n\r\n      if (typeof aValue === \"number\" && typeof bValue === \"number\") {\r\n        return sortConfig.direction === \"asc\" ? aValue - bValue : bValue - aValue;\r\n      }\r\n      return sortConfig.direction === \"asc\"\r\n        ? String(aValue).localeCompare(String(bValue))\r\n        : String(bValue).localeCompare(String(aValue));\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  return (\r\n    <Paper className=\"custom\">\r\n      <TableContainer className=\"tble-container\">\r\n        <Table className=\"tble-custom\" stickyHeader>\r\n          <TableHead>\r\n            <TableRow className=\"tble-head\">\r\n              {title\r\n                .filter((header) => !excludedKeys.includes(header))\r\n                .map((header, index) => (\r\n                  <TableCell\r\n                    key={index}\r\n                    align=\"center\"\r\n                    sx={{\r\n                      width: columnWidths[index] || \"auto\",\r\n                      minWidth: columnWidths[index] || 150,\r\n                      maxWidth: columnWidths[index] || 300,\r\n                      position: \"sticky\",\r\n                      top: 0,\r\n                      backgroundColor: \"white\",\r\n                      zIndex: 2,\r\n                    }}\r\n                  >\r\n                    <TableSortLabel\r\n                      active={sortConfig.key === header}\r\n                      direction={sortConfig.key === header ? sortConfig.direction : \"asc\"}\r\n                      onClick={() => handleSort(header)}\r\n                    >\r\n                      <div className=\"flex flex-col\">\r\n                        <div className=\"headertext\">{header?.toUpperCase()}</div>\r\n                        <div className=\"total-div\">\r\n                          {headerTotal && headerTotal?.length > 0 &&\r\n                          Object.keys(headerTotal[0]).includes(header)\r\n                            ? headerTotal[0][header]\r\n                            : null}\r\n                        </div>\r\n                      </div>\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody className=\"tble-body\">\r\n            {loading && (\r\n              <TableRow>\r\n                <TableCell colSpan={title.length} className=\"middle-noData\">\r\n                  <CircularProgress />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n            {sortedData.map((rowData, rowIndex) => (\r\n              <TableRow\r\n                key={rowIndex}\r\n                onClick={() => onRowClick && onRowClick(rowData)}\r\n                sx={{\r\n                  cursor: onRowClick ? \"pointer\" : \"default\",\r\n                  \"&:hover\": onRowClick ? { backgroundColor: \"#f0f0f0\" } : {},\r\n                }}\r\n              >\r\n                {Object.keys(rowData)\r\n                  .filter((key) => !excludedKeys.includes(key))\r\n                  .map((key, colIndex) => (\r\n                    <TableCell\r\n                      key={`${rowIndex}-${colIndex}`}\r\n                      align=\"center\"\r\n                      sx={{\r\n                        width: columnWidths[colIndex] || \"auto\",\r\n                        whiteSpace: \"nowrap\",\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\",\r\n                      }}\r\n                    >\r\n                      {key === \"action\" && renderAction ? (\r\n                        <Button\r\n                          isDisabled={rowData[\"status\"] === 3}\r\n                          onPress={(e) => {\r\n                            e.stopPropagation();\r\n                            renderAction(rowData[\"id\"]);\r\n                          }}\r\n                        >\r\n                          {rowData[\"status\"] === 1 ? \"Release\" : \"Released\"}\r\n                        </Button>\r\n                      ) : (\r\n                        rowData[key]\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n              </TableRow>\r\n            ))}\r\n            {!loading && sortedData.length === 0 && (\r\n              <TableRow>\r\n                <TableCell colSpan={title.length} className=\"middle-noData\" align=\"center\">\r\n                  No data found.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:'http://43.204.150.47:8000',\r\n  // baseURL:'http://localhost:8000',\r\n  timeout:5000\r\n})\r\n\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      window.location.href = \"/\";  \r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api"],"names":["brokerValidationSchema","Yup","shape","brokerName","required","grossFund","typeError","min","grossFundInterest","max","grossFundSharing","arbitrageFund","arbitrageFundInterest","arbitrageFundSharing","propFund","propFundInterest","propFundSharing","b2pFund","b2pFundInterest","b2pFundSharing","clientFund","clientFundInterest","clientFundSharing","costPerCr","_ref","open","handleClose","onFormSubmit","brokerData","isDisable","initialValues","id","_jsx","Modal","onClose","children","_jsxs","Box","sx","position","top","left","transform","width","bgcolor","boxShadow","p","borderRadius","overflowY","height","Typography","variant","marginBottom","Formik","validationSchema","onSubmit","async","values","_ref2","resetForm","api","put","concat","toast","success","post","error","_error$response","_error$response2","_error$response2$data","console","response","data","detail","enableReinitialize","_ref3","errors","touched","handleChange","handleBlur","setFieldValue","Form","className","TextField","name","label","value","onChange","e","uppercaseValue","target","toUpperCase","onBlur","Boolean","helperText","fullWidth","disabled","inputProps","style","textTransform","margin","Button","color","onClick","type","brokerTableTitle","AdminSettings","setBrokerData","useState","anchorEl","setAnchorEl","loader","setLoader","selectedBroker","setSelectedBroker","rowPopups","setRowPopups","rowData","setRowData","brokerTotel","setBrokerTotel","viewByPopup","setViewByPopup","getBrokerData","useCallback","get","status","_response$data","_response$data2","_response$data2$data","_response$data3","_response$data3$total","log","formattedData","map","broker","b2pFundsharing","undefined","Action","Dropdown","DropdownTrigger","IconButton","CiMenuKebab","DropdownMenu","onAction","key","handleDropdownAction","DropdownItem","isDisabled","brokerTable","totals","brokerTotal","Gross","totalGrossFund","Arbitrage","totalArbitrageFund","Prop","totalPropFund","B2P","totalB2pFund","Client","totalClientFund","action","releaseBroker","document","body","warn","deleteBroker","useEffect","handlePopupClose","AdminLayout","pageTitle","pageSubtitle","CommonPopup","IoClose","padding","display","flexDirection","gap","Card","marginTop","placeholder","InputProps","startAdornment","InputAdornment","IoSearch","event","currentTarget","startIcon","IoAddCircleOutline","BrokerFormPopup","handleClosePopover","CustomTable","title","tableData","headerTotal","loading","onRowClick","createSvgIcon","d","getTableSortLabelUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableSortLabelRoot","styled","ButtonBase","overridesResolver","props","styles","ownerState","root","active","memoTheme","theme","cursor","justifyContent","alignItems","vars","palette","text","secondary","tableSortLabelClasses","icon","opacity","primary","TableSortLabelIcon","capitalize","direction","fontSize","marginRight","marginLeft","transition","transitions","create","duration","shorter","userSelect","variants","React","inProps","ref","useDefaultProps","hideSortIcon","IconComponent","ArrowDownwardIcon","slots","slotProps","other","_objectWithoutProperties","_objectSpread","classes","composeClasses","useUtilityClasses","externalForwardedProps","RootSlot","rootProps","useSlot","elementType","clsx","IconSlot","iconProps","disableRipple","component","as","columnWidths","renderAction","sortConfig","setSortConfig","excludedKeys","sortedData","useMemo","sort","a","b","_a$sortConfig$key","_b$sortConfig$key","aValue","bValue","String","localeCompare","Paper","TableContainer","Table","stickyHeader","TableHead","TableRow","filter","header","includes","index","TableCell","align","minWidth","maxWidth","backgroundColor","zIndex","TableSortLabel","handleSort","columnKey","prevConfig","isAscending","length","Object","keys","TableBody","colSpan","CircularProgress","rowIndex","colIndex","whiteSpace","overflow","textOverflow","onPress","stopPropagation","axios","baseURL","timeout","interceptors","request","use","config","headers","Authorization","localStorage","getItem","Promise","reject","window","location","href","message"],"sourceRoot":""}