{"version":3,"file":"static/js/925.c4271e32.chunk.js","mappings":"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","sources":["component/pages/HomePage.jsx","config/AxiosCofig.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Card } from \"@nextui-org/react\";\r\nimport MainPage from \"../layouts/MainPage\";\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableColumn,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Pagination,\r\n  Input,\r\n  Select,\r\n  SelectItem,\r\n} from \"@nextui-org/react\";\r\nimport axios from \"axios\";\r\nimport { Typography } from \"@mui/material\";\r\nimport AdminLayout from \"../layouts/AdminLayout\";\r\nimport api from \"../../config/AxiosCofig\"\r\n\r\nconst HomePage = () => {\r\n  const [tradeData, setTradeData] = useState([]);\r\n  const token = localStorage.getItem(\"token\");\r\n  const [userData, setUserData] = useState([]);\r\n\r\n  const getAllUsers = async () => {\r\n    const allusers = await api.get(\"/users\", {\r\n      headers: {\r\n        Authorization: `bearer ${token}`,\r\n      },\r\n    });\r\n    if (allusers.status === 200) {\r\n      setUserData(allusers.data);\r\n    }\r\n  };\r\n\r\n  const fetchTrade = async () => {\r\n    const tradeData = await api.get(\"/getAllTrade\", {\r\n      headers: {\r\n        Authorization: `bearer ${token}`,\r\n      },\r\n    });\r\n    if (tradeData.status === 200) {\r\n      setTradeData(tradeData.data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTrade();\r\n    getAllUsers();\r\n  }, [token]);\r\n\r\n  const [page, setPage] = useState(1);\r\n\r\n  const rowsPerPage = 4; // Number of rows per page\r\n  const pages = Math.ceil(tradeData.length / rowsPerPage);\r\n\r\n  // Calculate items for the current page\r\n  const paginatedData = React.useMemo(() => {\r\n    const startIndex = (page - 1) * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    return tradeData.slice(startIndex, endIndex);\r\n  }, [page, tradeData]);\r\n  \r\n  return (\r\n    <AdminLayout pageTitle=\"Dashboard\" pageSubtitle=\"All details\">\r\n      <Card className=\"p-2 mt-3\">\r\n        <div className=\"flex flex-col gap-4 flex-1\">\r\n          <div className=\"flex gap-2\">\r\n            <Card className=\"flex-1 p-3 border-none\">\r\n              <Table\r\n                removeWrapper\r\n                aria-label=\"Example table with client-side pagination\"\r\n                bottomContent={\r\n                  <div className=\"flex w-full justify-center\">\r\n                    <Pagination\r\n                      isCompact\r\n                      showControls\r\n                      showShadow\r\n                      color=\"secondary\"\r\n                      page={page}\r\n                      total={pages}\r\n                      onChange={(newPage) => setPage(newPage)}\r\n                    />\r\n                  </div>\r\n                }\r\n                classNames={{\r\n                  wrapper: \"min-h-[222px]\",\r\n                }}\r\n              >\r\n                <TableHeader>\r\n                  <TableColumn key=\"Date\">Date</TableColumn>\r\n                  <TableColumn key=\"buyValue\">Buy Value</TableColumn>\r\n                  <TableColumn key=\"sellValue\">Sell Value</TableColumn>\r\n                </TableHeader>\r\n                <TableBody\r\n                  items={paginatedData}\r\n                  emptyContent={\"No Data to display.\"}\r\n                >\r\n                  {(item) => (\r\n                    <TableRow key={item.name}>\r\n                      {(columnKey) => <TableCell>{item[columnKey]}</TableCell>}\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </Card>\r\n\r\n            <Card className=\"flex-1 p-3\">\r\n              <Typography variant=\"subtitle1\" className=\"mb-3\">\r\n                Trade Details\r\n              </Typography>\r\n              <Select className=\"mb-2\" placeholder=\"User Name\">\r\n                {userData &&\r\n                  userData.map((item, index) => (\r\n                    <SelectItem key={item.id} value={item}>\r\n                      {item.firstName + \"\" + item.lastName}\r\n                    </SelectItem>\r\n                  ))}\r\n              </Select>\r\n            </Card>\r\n          </div>\r\n          <div className=\"flex  gap-2 p-3\">\r\n            <Card className=\"flex-1\">\r\n              <h1>Home Page</h1>\r\n            </Card>\r\n            <Card className=\"flex-1 p-3\">\r\n              <Typography variant=\"subtitle1\" className=\"mb-3\">\r\n                User Details\r\n              </Typography>\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableColumn key=\"firstName\">FirstName</TableColumn>\r\n                  <TableColumn key=\"lastName\">LastName</TableColumn>\r\n                  <TableColumn key=\"role\">Role</TableColumn>\r\n                  <TableColumn key=\"userStatus\">Status</TableColumn>\r\n                </TableHeader>\r\n                <TableBody\r\n                  items={userData}\r\n                  emptyContent={\"No Data to display.\"}\r\n                >\r\n                  {(item) => (\r\n                    <TableRow key={item.id}>\r\n                      {(columnKey) => <TableCell>{item[columnKey]}</TableCell>}\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:'http://43.204.150.47:8000',\r\n  // baseURL:'http://localhost:8000',\r\n  timeout:5000\r\n})\r\n\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      window.location.href = \"/\";  \r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api"],"names":["HomePage","tradeData","setTradeData","useState","token","localStorage","getItem","userData","setUserData","useEffect","async","api","get","headers","Authorization","concat","status","data","fetchTrade","allusers","getAllUsers","page","setPage","pages","Math","ceil","length","paginatedData","React","startIndex","endIndex","slice","_jsx","AdminLayout","pageTitle","pageSubtitle","children","Card","className","_jsxs","Table","removeWrapper","bottomContent","Pagination","isCompact","showControls","showShadow","color","total","onChange","newPage","classNames","wrapper","TableHeader","TableColumn","TableBody","items","emptyContent","item","TableRow","columnKey","TableCell","name","Typography","variant","Select","placeholder","map","index","SelectItem","value","firstName","lastName","id","axios","create","baseURL","timeout","interceptors","request","use","config","error","console","Promise","reject","response","log","window","location","href","message"],"sourceRoot":""}