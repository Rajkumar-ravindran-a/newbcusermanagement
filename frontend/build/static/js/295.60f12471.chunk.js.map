{"version":3,"file":"static/js/295.60f12471.chunk.js","mappings":"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","sources":["component/pages/IdPage.jsx","component/table/CustomTable.jsx","config/AxiosCofig.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Modal,\r\n  TextField,\r\n  IconButton,\r\n  Button,\r\n  MenuItem,\r\n  InputAdornment,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  FormHelperText,\r\n} from \"@mui/material\";\r\nimport CustomTable from \"../table/CustomTable.jsx\";\r\nimport AdminLayout from \"../layouts/AdminLayout.jsx\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Card } from \"@nextui-org/react\";\r\nimport { IoSearch } from \"react-icons/io5\";\r\nimport { CiMenuKebab } from \"react-icons/ci\";\r\nimport {\r\n  Dropdown,\r\n  DropdownTrigger,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"@nextui-org/react\";\r\n\r\nconst brokerValidationSchema = Yup.object().shape({\r\n  brokerName: Yup.string().required(\"Broker Name is required\"),\r\n  id: Yup.string().required(\"ID is required\"),\r\n  startDate: Yup.date().required(\"Start Date is required\"),\r\n  employee: Yup.string().required(\"Employee is required\"),\r\n  nism: Yup.string().required(\"NISM is required\"),\r\n  idType: Yup.string().required(\"ID Type is required\"),\r\n});\r\n\r\nconst brokerTableTitle = [\r\n  \"Id\",\r\n  \"Broker Name\",\r\n  \"Start Date\",\r\n  \"Releases Date\",\r\n  \"Employee\",\r\n  \"Nism\",\r\n  \"IdType\",\r\n  \"Action\",\r\n];\r\n\r\nconst AdminSettings = () => {\r\n  const [brokerData, setBrokerData] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [getUserList, setGetUserList] = useState([]);\r\n  const [idData, setIdData] = useState([]);\r\n  const [selectedBroker, setSelectedBroker] = useState(null);\r\n  const [menuAnchor, setMenuAnchor] = useState(null);\r\n  const [selectedRecordId, setSelectedRecordId] = useState(null);\r\n\r\n  const getBrokerData = async () => {\r\n    try {\r\n      const response = await api.get(\"/getAllBroker\");\r\n      if (response.status === 200) {\r\n        setBrokerData(response?.data?.data.filter((data) => data.status === 1));\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching broker data.\");\r\n    }\r\n  };\r\n\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setEditMode(false);\r\n    setSelectedBroker(null);\r\n  };\r\n\r\n  const handleMenuClick = (event, recordId) => {\r\n    setMenuAnchor(event.currentTarget);\r\n    setSelectedRecordId(recordId);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setMenuAnchor(null);\r\n    setSelectedRecordId(null);\r\n  };\r\n\r\n  const getuserData = async () => {\r\n    try {\r\n      const response = await api.get(\"/users\");\r\n      if (response.status === 200) {\r\n        setGetUserList(response.data);\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Error fetching user data.\");\r\n    }\r\n  };\r\n\r\n  const getIdData = async () => {\r\n    try {\r\n      const response = await api.get(\"/getIds\");\r\n      if (response.status === 200) {\r\n        const structureData = response.data.data.map((data) => ({\r\n          Id: data.idNumber,\r\n          \"Broker Name\": data.brokerName,\r\n          \"Start Date\": data.startDate,\r\n          \"Releases Date\": data.releaseDate || \"-\",\r\n          \"Record Id\": data.recordId,\r\n          Employee: data?.employee || \"-\",\r\n          Nism: data.nism,\r\n          IdType: data.idType,\r\n          Action: (\r\n            <Dropdown>\r\n              <DropdownTrigger>\r\n                <IconButton\r\n                  onClick={(event) => handleMenuClick(event, data.recordId)}\r\n                >\r\n                  <CiMenuKebab />\r\n                </IconButton>\r\n              </DropdownTrigger>\r\n              <DropdownMenu\r\n                aria-label=\"Action event example\"\r\n                onAction={(key) => {\r\n                  if (key === \"release\") {\r\n                    releaseId(data);\r\n                  } else if (key === \"edit\") {\r\n                    editBroker(data);\r\n                  }\r\n                }}\r\n              >\r\n                <DropdownItem key=\"release\" isDisabled={data.status === 3}>\r\n                  Release\r\n                </DropdownItem>\r\n                <DropdownItem key=\"edit\" isDisabled={data.status === 3}>Edit</DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          ),\r\n        }));\r\n        setIdData(structureData);\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Error fetching ID data.\");\r\n    }\r\n  };\r\n\r\n  const editBroker = (broker) => {\r\n    console.log(broker)\r\n    setSelectedBroker(broker);\r\n    setEditMode(true);\r\n    handleOpen();\r\n  };\r\n\r\n  const releaseId = async (broker) => {\r\n    try {\r\n      await api.put(`/releaseId/${broker.recordId}/3`);\r\n      toast.success(`Released Id: ${broker.recordId}`);\r\n      getIdData();\r\n    } catch (error) {\r\n      toast.error(\"Error releasing broker.\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      if (editMode) {\r\n        await api.put(`/updateId/${selectedBroker.recordId}`, values);\r\n        toast.success(\"ID updated successfully.\");\r\n      } else {\r\n        await api.post(\"/createId\", values);\r\n        toast.success(\"ID added successfully.\");\r\n      }\r\n      getIdData();\r\n      resetForm();\r\n      handleClose();\r\n    } catch (error) {\r\n      toast.error(\"Error saving broker.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getuserData();\r\n    getIdData();\r\n    getBrokerData();\r\n  }, []);\r\n\r\n  const initialValues = {\r\n    brokerName: selectedBroker?.brokerId || \"\",\r\n    id: selectedBroker?.idNumber ||\"\",\r\n    startDate: selectedBroker?.startDate || \"\",\r\n    employee: selectedBroker?.employeeId || \"\",\r\n    nism: selectedBroker?.nism ||\"\",\r\n    idType: selectedBroker?.idType ||\"\",\r\n  };\r\n\r\n  return (\r\n    <AdminLayout pageTitle=\"ID Management\" pageSubtitle=\"Manage ID details\">\r\n      <Card style={{ marginTop: \"1rem\" }}>\r\n        <div className=\"flex justify-between p-4 align-middle\">\r\n          <TextField\r\n            className=\"searchUser\"\r\n            placeholder=\"Search\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <IoSearch />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <Button onClick={handleOpen} variant=\"contained\" color=\"primary\">\r\n            Add ID\r\n          </Button>\r\n        </div>\r\n\r\n        <Box mt={4}>\r\n          <CustomTable title={brokerTableTitle} tableData={idData} />\r\n        </Box>\r\n      </Card>\r\n\r\n      <Modal open={open} onClose={handleClose}>\r\n        <Box\r\n          className=\"modal-box\"\r\n          sx={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: 600,\r\n            bgcolor: \"background.paper\",\r\n            boxShadow: 24,\r\n            p: 4,\r\n            borderRadius: 2,\r\n            overflowY: \"scroll\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\">\r\n            {editMode ? \"Edit ID\" : \"Add New ID\"}\r\n          </Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={brokerValidationSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({ values, handleChange, errors, touched, handleBlur }) => (\r\n              <Form>\r\n                <div className=\"flex gap-2\">\r\n                  <TextField\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    name=\"id\"\r\n                    label=\"ID\"\r\n                    value={values.id || \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.id && Boolean(errors.id)}\r\n                    helperText={touched.id && errors.id}\r\n                  />\r\n                  <FormControl\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    error={touched.brokerName && Boolean(errors.brokerName)}\r\n                  >\r\n                    <InputLabel id=\"brokerName-label\">Broker Name</InputLabel>\r\n                    <Select\r\n                      labelId=\"brokerName-label\"\r\n                      id=\"brokerName\"\r\n                      name=\"brokerName\"\r\n                      label=\"Broker Name\"\r\n                      value={values.brokerName || \"\"}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    >\r\n                      {brokerData &&\r\n                        brokerData.map((data, index) => (\r\n                          <MenuItem key={index} value={data.id}>\r\n                            {data.brokerName}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                    {touched.brokerName && Boolean(errors.brokerName) && (\r\n                      <FormHelperText>{errors.brokerName}</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <TextField\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    name=\"startDate\"\r\n                    label=\"Start Date\"\r\n                    type=\"date\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={values.startDate || \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.startDate && Boolean(errors.startDate)}\r\n                    helperText={touched.startDate && errors.startDate}\r\n                  />\r\n                  <FormControl\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    error={touched.employee && Boolean(errors.employee)}\r\n                  >\r\n                    <InputLabel id=\"employee-label\">Employee</InputLabel>\r\n                    <Select\r\n                      labelId=\"employee-label\"\r\n                      id=\"employee\"\r\n                      name=\"employee\"\r\n                      label=\"Employee\"\r\n                      value={values.employee || \"\"}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    >\r\n                      {console.log(getUserList)}\r\n                      {getUserList &&\r\n                        getUserList.map((data, index) => (\r\n                          <MenuItem key={index} value={data.id}>\r\n                            {data.firstName + \" \" + data.lastName}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                    {touched.employee && errors.employee && (\r\n                      <FormHelperText>{errors.employee}</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    name=\"nism\"\r\n                    label=\"NISM\"\r\n                    value={values.nism || \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.nism && Boolean(errors.nism)}\r\n                    helperText={touched.nism && errors.nism}\r\n                  />\r\n                  <TextField\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    name=\"idType\"\r\n                    label=\"ID Type\"\r\n                    value={values.idType || \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.idType && Boolean(errors.idType)}\r\n                    helperText={touched.idType && errors.idType}\r\n                  />\r\n                </div>\r\n                <div className=\"flex gap-2 mt-2 justify-start flex-row-reverse\">\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>Cancel</Button>\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">{editMode ? \"Update Id\" : \"Add Id\"}</Button>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </Modal>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminSettings;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  TableSortLabel,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\n\r\nconst CustomTable = ({ title = [], tableData = [], renderAction }) => {\r\n  // State for pagination\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  // State for sorting\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n\r\n  // Handle page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  // Handle rows per page change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Handle sorting\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending =\r\n        prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  // Sort data based on the sort configuration\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n    return [...tableData].sort((a, b) => {\r\n      if (a[sortConfig.key] < b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      }\r\n      if (a[sortConfig.key] > b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  // Paginate the sorted data\r\n  const paginatedData = sortedData.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const handleButtonClick = (status, id) => {\r\n    if (status === 1) {\r\n      renderAction(id);\r\n    } else {\r\n      renderAction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper} className=\"custom\">\r\n      <Table>\r\n        {/* Table Header with Sorting */}\r\n        <TableHead>\r\n          <TableRow>\r\n            {title.map((header, index) => (\r\n              <TableCell key={index} align=\"center\" sx={{ fontWeight: \"bold\" }}>\r\n                <TableSortLabel\r\n                  active={sortConfig.key === header.toLowerCase()}\r\n                  direction={\r\n                    sortConfig.key === header.toLowerCase()\r\n                      ? sortConfig.direction\r\n                      : \"asc\"\r\n                  }\r\n                  onClick={() => handleSort(header.toLowerCase())}\r\n                >\r\n                  {header}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        {/* Table Body */}\r\n        <TableBody>\r\n          {paginatedData.map((rowData, rowIndex) => (\r\n            <TableRow key={rowIndex}>\r\n              {Object.keys(rowData).map((key, colIndex) => {\r\n                // Skip specific keys dynamically\r\n                \r\n                if ([\"status\", \"id\", \"brokerId\", \"fundAllocated\", \"Record Id\"].includes(key)) return null;\r\n                return (\r\n                  <TableCell key={`${rowIndex}-${colIndex}`} align=\"center\">\r\n                    {key === \"action\" && renderAction ? (\r\n                      <Button\r\n                        isDisabled={rowData[\"status\"] === 3}\r\n                        onPress={() =>\r\n                          handleButtonClick(rowData[\"status\"], rowData[\"id\"])\r\n                        }\r\n                      >\r\n                        {rowData[\"status\"] === 1 ? \"Release\" : \"Released\"}\r\n                      </Button>\r\n                    ) : (\r\n                      rowData[key]\r\n                    )}\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n          {\r\n            paginatedData && paginatedData.length === 0 && (\r\n              <TableRow style={{ textAlign: 'center' }}>\r\n                <TableCell colSpan={title.length} className=\"middle-noData\">No data found.</TableCell>\r\n              </TableRow>\r\n            )\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* Pagination Controls */}\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={tableData.length}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        rowsPerPage={rowsPerPage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 15]}\r\n      />\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:'http://43.204.150.47:8000',\r\n  timeout:5000\r\n})\r\n\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api"],"names":["brokerValidationSchema","Yup","shape","brokerName","required","id","startDate","employee","nism","idType","brokerTableTitle","AdminSettings","brokerData","setBrokerData","useState","open","setOpen","editMode","setEditMode","getUserList","setGetUserList","idData","setIdData","selectedBroker","setSelectedBroker","menuAnchor","setMenuAnchor","selectedRecordId","setSelectedRecordId","handleOpen","handleClose","getIdData","async","response","api","get","status","structureData","data","map","Id","idNumber","releaseDate","recordId","Employee","Nism","IdType","Action","_jsxs","Dropdown","children","_jsx","DropdownTrigger","IconButton","onClick","event","handleMenuClick","currentTarget","CiMenuKebab","DropdownMenu","onAction","key","releaseId","editBroker","DropdownItem","isDisabled","error","toast","broker","console","log","put","concat","success","useEffect","getuserData","_response$data","filter","getBrokerData","initialValues","brokerId","employeeId","AdminLayout","pageTitle","pageSubtitle","Card","style","marginTop","className","TextField","placeholder","InputProps","startAdornment","InputAdornment","position","IoSearch","Button","variant","color","Box","mt","CustomTable","title","tableData","Modal","onClose","sx","top","left","transform","width","bgcolor","boxShadow","p","borderRadius","overflowY","Typography","Formik","validationSchema","onSubmit","values","_ref","resetForm","post","_ref2","handleChange","errors","touched","handleBlur","Form","fullWidth","margin","name","label","value","onChange","onBlur","Boolean","helperText","FormControl","InputLabel","Select","labelId","index","MenuItem","FormHelperText","type","InputLabelProps","shrink","firstName","lastName","renderAction","page","setPage","rowsPerPage","setRowsPerPage","sortConfig","setSortConfig","direction","paginatedData","React","sort","a","b","slice","TableContainer","component","Paper","Table","TableHead","TableRow","header","TableCell","align","fontWeight","TableSortLabel","active","toLowerCase","handleSort","columnKey","prevConfig","isAscending","TableBody","rowData","rowIndex","Object","keys","colIndex","includes","onPress","handleButtonClick","length","textAlign","colSpan","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","axios","create","baseURL","timeout","interceptors","request","use","config","headers","Authorization","localStorage","getItem","Promise","reject","message"],"sourceRoot":""}