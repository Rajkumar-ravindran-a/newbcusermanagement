{"version":3,"file":"static/js/295.a94973ef.chunk.js","mappings":"kWAoBA,MAAMA,EAAyBC,EAAAA,KAAaC,MAAM,CAChDC,WAAYF,EAAAA,KAAaG,SAAS,2BAClCC,GAAIJ,EAAAA,KAAaG,SAAS,kBAC1BE,UAAWL,EAAAA,KAAWG,SAAS,0BAC/BG,SAAUN,EAAAA,KAAaG,SAAS,wBAChCI,KAAMP,EAAAA,KAAaG,SAAS,oBAC5BK,OAAQR,EAAAA,KAAaG,SAAS,wBAI1BM,EAAmB,CACvB,KACA,cACA,aACA,gBAEA,WACA,OACA,SACA,UAoTF,EAjTsBC,KACpB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAMC,IAAWF,EAAAA,EAAAA,WAAS,IAC1BG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,KACxCK,EAAQC,IAAaN,EAAAA,EAAAA,UAAS,IAG/BO,EAAcA,IAAML,GAAQ,GA0D5BM,EAAgBC,UACpB,IACE,MAAMC,QAAiBC,EAAAA,EAAIC,IAAI,iBACD,IAADC,EAA7B,GAAwB,MAApBH,EAASI,OACXf,EAAsB,OAARW,QAAQ,IAARA,GAAc,QAANG,EAARH,EAAUK,YAAI,IAAAF,OAAN,EAARA,EAAgBE,KAAKC,QAAQD,GAAyB,IAAhBA,EAAKD,SAE7D,CAAE,MAAOG,GACPC,QAAQD,MAAMA,GACdE,EAAAA,GAAMF,MAAM,8BACd,IAiBFG,EAAAA,EAAAA,YAAU,KACRZ,IAlFkBC,WAClB,IACE,MAAMC,QAAiBC,EAAAA,EAAIC,IAAI,UACP,MAApBF,EAASI,OACXV,EAAeM,EAASK,OAExBG,QAAQG,IAAI,wBACZjB,EAAe,IAEnB,CAAE,MAAOa,GACPC,QAAQD,MAAMA,GACdE,EAAAA,GAAMF,MAAM,4BACd,GAuEAK,GApEgBb,WAChB,IACE,MAAMC,QAAiBC,EAAAA,EAAIC,IAAI,WAC/B,GAAwB,MAApBF,EAASI,OAAgB,CAC3BI,QAAQG,IAAIX,EAASK,MACrB,MAAMQ,EAAgBb,EAASK,KAAKA,KAAKS,KAAKT,IAAI,CAChDU,GAAIV,EAAKW,SACT,cAAeX,EAAK1B,WACpB,aAAc0B,EAAKvB,UACnB,gBAAiBuB,EAAKY,aAAeZ,EAAKY,aAAe,IACzDC,SAAc,OAAJb,QAAI,IAAJA,GAAAA,EAAMtB,SAAWsB,EAAKtB,SAAW,IAC3CoC,KAAMd,EAAKrB,KACXoC,OAAQf,EAAKpB,OACboC,QACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BF,EAAAA,EAAAA,KAACG,EAAAA,EAEC,CACAC,KAAK,QACLH,UAAU,aACVC,SAEsD,kBAM9D5B,EAAUiB,EACZ,MACEL,QAAQG,IAAI,sBACZf,EAAU,GAEd,CAAE,MAAOW,GACPC,QAAQD,MAAMA,GACdE,EAAAA,GAAMF,MAAM,0BACd,GAiCAoB,EAAW,GACV,IA4BH,OACEL,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CACVC,UAAU,gBACVC,aAAa,iCAAgCN,UAE7CO,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,WAAW,oBAAoBC,MAAO,CAAEC,UAAW,QAASX,SAAA,EAChEO,EAAAA,EAAAA,MAAA,OAAKR,UAAU,oDAAmDC,SAAA,EAChEF,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRb,UAAU,aACVc,YAAY,SACZC,WAAY,CACVC,gBACEjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,CAACC,SAAS,QAAOjB,UAC9BF,EAAAA,EAAAA,KAACoB,EAAAA,IAAQ,UAKjBpB,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACkB,QAvIGC,IAAMpD,GAAQ,GAuII+B,UAAU,iBAAgBC,SAAC,eAM1DF,EAAAA,EAAAA,KAACuB,EAAAA,EAAK,CAACtD,KAAMA,EAAMuD,QAASjD,EAAY2B,UACtCO,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CACFC,GAAI,CACFP,SAAU,WACVQ,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,MAAO,IACPC,QAAS,mBACTC,UAAW,GACXC,EAAG,EACHC,aAAc,GACdhC,SAAA,EAEFF,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAApC,SAAC,YAGrDF,EAAAA,EAAAA,KAACuC,EAAAA,GAAM,CACLC,cAnEU,CACpBnF,WAAY,GACZE,GAAI,GACJC,UAAW,GACXC,SAAU,GACVC,KAAM,GACNC,OAAQ,IA8DE8E,iBAAkBvF,EAClBwF,SA3DSjE,MAAOkE,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,EAC/C,IAE0B,aADDjE,EAAAA,EAAImE,KAAK,YAAaH,IAChC7D,SACXK,EAAAA,GAAM4D,QAAQ,0BACdvE,IACAqE,IACAtE,IAEJ,CAAE,MAAOU,GACPC,QAAQD,MAAMA,GACdE,EAAAA,GAAMF,MAAM,uBACd,GA+CiCiB,SAEtB8C,IAAA,IAAC,OAAEL,EAAM,OAAEM,EAAM,QAAEC,EAAO,aAAEC,EAAY,WAAEC,GAAYJ,EAAA,OACrDvC,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAAAnD,SAAA,EACHO,EAAAA,EAAAA,MAAA,OAAKR,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRwC,WAAS,EACTC,OAAO,SACPC,KAAK,KACLC,MAAM,KACNC,MAAOf,EAAOpF,IAAM,GACpBoG,SAAUR,EACVS,OAAQR,EACRnE,MAAOiE,EAAQ3F,IAAMsG,QAAQZ,EAAO1F,IACpCuG,WAAYZ,EAAQ3F,IAAM0F,EAAO1F,MAEnCkD,EAAAA,EAAAA,MAACsD,EAAAA,EAAW,CACVT,WAAS,EACTC,OAAO,SACPtE,MAAOiE,EAAQ7F,YAAcwG,QAAQZ,EAAO5F,YAAY6C,SAAA,EAExDF,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzG,GAAG,mBAAkB2C,SAAC,iBAClCF,EAAAA,EAAAA,KAACiE,EAAAA,EAAM,CACLC,QAAQ,mBACR3G,GAAG,aACHiG,KAAK,aACLC,MAAM,cACNC,MAAOf,EAAOtF,YAAc,GAC5BsG,SAAUR,EACVS,OAAQR,EAAWlD,SAElBpC,GACCA,EAAW0B,KAAI,CAACT,EAAMoF,KACpBnE,EAAAA,EAAAA,KAACoE,EAAAA,EAAQ,CAAaV,MAAO3E,EAAKxB,GAAG2C,SAClCnB,EAAK1B,YADO8G,OAKpBjB,EAAQ7F,YAAcwG,QAAQZ,EAAO5F,cACpC2C,EAAAA,EAAAA,KAACqE,EAAAA,EAAc,CAAAnE,SAAE+C,EAAO5F,oBAI9BoD,EAAAA,EAAAA,MAAA,OAAKR,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRwC,WAAS,EACTC,OAAO,SACPC,KAAK,YACLC,MAAM,aACNa,KAAK,OACLC,gBAAiB,CAAEC,QAAQ,GAC3Bd,MAAOf,EAAOnF,WAAa,GAC3BmG,SAAUR,EACVS,OAAQR,EACRnE,MAAOiE,EAAQ1F,WAAaqG,QAAQZ,EAAOzF,WAC3CsG,WAAYZ,EAAQ1F,WAAayF,EAAOzF,aAE1CiD,EAAAA,EAAAA,MAACsD,EAAAA,EAAW,CACVT,WAAS,EACTC,OAAO,SACPtE,MAAOiE,EAAQzF,UAAYoG,QAAQZ,EAAOxF,UAAUyC,SAAA,EAEpDF,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzG,GAAG,iBAAgB2C,SAAC,cAChCO,EAAAA,EAAAA,MAACwD,EAAAA,EAAM,CACLC,QAAQ,iBACR3G,GAAG,WACHiG,KAAK,WACLC,MAAM,WACNC,MAAOf,EAAOlF,UAAY,GAC1BkG,SAAUR,EACVS,OAAQR,EAAWlD,SAAA,CAElBhB,QAAQG,IAAIlB,GACZA,GACCA,EAAYqB,KAAI,CAACT,EAAMoF,KACrBnE,EAAAA,EAAAA,KAACoE,EAAAA,EAAQ,CAAaV,MAAO3E,EAAKxB,GAAG2C,SAClCnB,EAAK0F,UAAY,IAAM1F,EAAK2F,UADhBP,QAKpBjB,EAAQzF,UAAYwF,EAAOxF,WAC1BuC,EAAAA,EAAAA,KAACqE,EAAAA,EAAc,CAAAnE,SAAE+C,EAAOxF,kBAI9BgD,EAAAA,EAAAA,MAAA,OAAAP,SAAA,EACEF,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRwC,WAAS,EACTC,OAAO,SACPC,KAAK,OACLC,MAAM,OACNC,MAAOf,EAAOjF,MAAQ,GACtBiG,SAAUR,EACVS,OAAQR,EACRnE,MAAOiE,EAAQxF,MAAQmG,QAAQZ,EAAOvF,MACtCoG,WAAYZ,EAAQxF,MAAQuF,EAAOvF,QAErCsC,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRwC,WAAS,EACTC,OAAO,SACPC,KAAK,SACLC,MAAM,UACNC,MAAOf,EAAOhF,QAAU,GACxBgG,SAAUR,EACVS,OAAQR,EACRnE,MAAOiE,EAAQvF,QAAUkG,QAAQZ,EAAOtF,QACxCmG,WAAYZ,EAAQvF,QAAUsF,EAAOtF,aAIzC8C,EAAAA,EAAAA,MAACgB,EAAAA,EAAG,CACFC,GAAI,CACFiD,QAAS,OACTC,eAAgB,WAChB/D,UAAW,EACXgE,IAAK,GACL3E,SAAA,EAEFF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACmE,KAAK,SAASjD,QAAS9C,EAAY2B,SAAC,YAG5CF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACmE,KAAK,SAAQpE,SAAC,oBAEnB,UAOfF,EAAAA,EAAAA,KAACyB,EAAAA,EAAG,CAACC,GAAI,CAAEb,UAAW,GAAIX,UACxBF,EAAAA,EAAAA,KAAC8E,EAAAA,EAAW,CAACC,MAAOnH,EAAkBoH,UAAW3G,UAGzC,C,0JCzUlB,MAqIA,EArIoBuE,IAAmD,IAAlD,MAAEmC,EAAQ,GAAE,UAAEC,EAAY,GAAE,aAAEC,GAAcrC,EAE/D,MAAOsC,EAAMC,IAAWnH,EAAAA,EAAAA,UAAS,IAC1BoH,EAAaC,IAAkBrH,EAAAA,EAAAA,UAAS,IAGxCsH,EAAYC,IAAiBvH,EAAAA,EAAAA,UAAS,CAAEwH,IAAK,GAAIC,UAAW,QAwC7DC,EAdaC,EAAAA,SAAc,IAC1BL,EAAWE,IACT,IAAIR,GAAWY,MAAK,CAACC,EAAGC,IACzBD,EAAEP,EAAWE,KAAOM,EAAER,EAAWE,KACH,QAAzBF,EAAWG,WAAuB,EAAI,EAE3CI,EAAEP,EAAWE,KAAOM,EAAER,EAAWE,KACH,QAAzBF,EAAWG,UAAsB,GAAK,EAExC,IARmBT,GAU3B,CAACA,EAAWM,IAGkBS,MAC/Bb,EAAOE,EACPF,EAAOE,EAAcA,GAWvB,OACE3E,EAAAA,EAAAA,MAACuF,EAAAA,EAAc,CAAC3D,UAAW4D,EAAAA,EAAOhG,UAAU,SAAQC,SAAA,EAClDO,EAAAA,EAAAA,MAACyF,EAAAA,EAAK,CAAAhG,SAAA,EAEJF,EAAAA,EAAAA,KAACmG,EAAAA,EAAS,CAAAjG,UACRF,EAAAA,EAAAA,KAACoG,EAAAA,EAAQ,CAAAlG,SACN6E,EAAMvF,KAAI,CAAC6G,EAAQlC,KAClBnE,EAAAA,EAAAA,KAACsG,EAAAA,EAAS,CAAaC,MAAM,SAAS7E,GAAI,CAAE8E,WAAY,QAAStG,UAC/DF,EAAAA,EAAAA,KAACyG,EAAAA,EAAc,CACbC,OAAQpB,EAAWE,MAAQa,EAAOM,cAClClB,UACEH,EAAWE,MAAQa,EAAOM,cACtBrB,EAAWG,UACX,MAENmB,QAASA,KAAMC,OAtDXC,EAsDsBT,EAAOM,mBArD/CpB,GAAewB,IACb,MAAMC,EACJD,EAAWvB,MAAQsB,GAAsC,QAAzBC,EAAWtB,UAC7C,MAAO,CACLD,IAAKsB,EACLrB,UAAWuB,EAAc,OAAS,MACnC,IAPeF,KAsD4C,EAAA5G,SAE/CmG,KAVWlC,UAkBtB1D,EAAAA,EAAAA,MAACwG,EAAAA,EAAS,CAAA/G,SAAA,CACPwF,EAAclG,KAAI,CAAC0H,EAASC,KAC3BnH,EAAAA,EAAAA,KAACoG,EAAAA,EAAQ,CAAAlG,SACNkH,OAAOC,KAAKH,GAAS1H,KAAI,CAACgG,EAAK8B,IAE1B,CAAC,SAAU,KAAM,WAAW,iBAAiBC,SAAS/B,GAAa,MAErExF,EAAAA,EAAAA,KAACsG,EAAAA,EAAS,CAAiCC,MAAM,SAAQrG,SAC9C,WAARsF,GAAoBP,GACnBjF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CACLqH,WAAkC,IAAtBN,EAAgB,OAC5B7F,QAASA,KACPoG,OA7CG3I,EA6CeoI,EAAgB,OA7CvB3J,EA6C0B2J,EAAY,QA5CxD,IAAXpI,EACFmG,EAAa1H,GAEb0H,KAJsBwC,IAAC3I,EAAQvB,CA8CZ,EAAA2C,SAEsB,IAAtBgH,EAAgB,OAAU,UAAY,aAGzCA,EAAQ1B,IACT,GAAAkC,OAZgBP,EAAQ,KAAAO,OAAIJ,OALtBH,KAwBfzB,GAA0C,IAAzBA,EAAciC,SAC7B3H,EAAAA,EAAAA,KAACoG,EAAAA,EAAQ,CAACxF,MAAO,CAAEgH,UAAW,UAAW1H,UACvCF,EAAAA,EAAAA,KAACsG,EAAAA,EAAS,CAACuB,QAAS9C,EAAM4C,OAAQ1H,UAAU,gBAAeC,SAAC,4BAQtEF,EAAAA,EAAAA,KAAC8H,EAAAA,EAAe,CACdzF,UAAU,MACV0F,MAAO/C,EAAU2C,OACjBzC,KAAMA,EACN8C,aAnHmBC,CAACC,EAAOC,KAC/BhD,EAAQgD,EAAQ,EAmHZ/C,YAAaA,EACbgD,oBAhH2BF,IAC/B7C,EAAegD,SAASH,EAAMI,OAAO5E,MAAO,KAC5CyB,EAAQ,EAAE,EA+GNoD,mBAAoB,CAAC,EAAG,GAAI,QAEf,C,kCC7IrB,MAAM5J,E,QAAM6J,EAAMC,OAAO,CACvBC,QAAQ,4BACRC,QAAQ,MAIVhK,EAAIiK,aAAaC,QAAQC,KACtBC,IACCA,EAAOC,QAAQC,cAAa,UAAAvB,OAAawB,aAAaC,QAAQ,UACvDJ,KAER9J,IAECC,QAAQD,MAAM,6BAA8BA,GACrCmK,QAAQC,OAAOpK,MAI1BN,EAAIiK,aAAalK,SAASoK,KACvBpK,IACCQ,QAAQG,IAAI,2CACLX,KAERO,IACKA,EAAMP,UAAsC,MAA1BO,EAAMP,SAASI,OACnCI,QAAQD,MAAM,oEAEdC,QAAQD,MAAM,8BAA+BA,EAAMqK,SAE9CF,QAAQC,OAAOpK,MAI1B,S","sources":["component/pages/IdPage.jsx","component/table/CustomTable.jsx","config/AxiosCofig.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Typography, Box, Modal, TextField } from \"@mui/material\";\r\nimport CustomTable from \"../table/CustomTable.jsx\";\r\nimport AdminLayout from \"../layouts/AdminLayout.jsx\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Card } from \"@nextui-org/react\";\r\nimport { Button } from \"@nextui-org/react\";\r\nimport { IoSearch } from \"react-icons/io5\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport FormHelperText from \"@mui/material/FormHelperText\";\r\nimport { data } from \"react-router-dom\";\r\n\r\n// Validation Schema\r\nconst brokerValidationSchema = Yup.object().shape({\r\n  brokerName: Yup.string().required(\"Broker Name is required\"),\r\n  id: Yup.string().required(\"ID is required\"),\r\n  startDate: Yup.date().required(\"Start Date is required\"),\r\n  employee: Yup.string().required(\"employee is required\"),\r\n  nism: Yup.string().required(\"nism is required\"),\r\n  idType: Yup.string().required(\"idType is required\"),\r\n});\r\n\r\n// Column Titles\r\nconst brokerTableTitle = [\r\n  \"Id\",\r\n  \"Broker Name\",\r\n  \"Start Date\",\r\n  \"Releases Date\",\r\n  // \"Funds Fund\",\r\n  \"Employee\",\r\n  \"Nism\",\r\n  \"IdType\",\r\n  \"Action\",\r\n];\r\n\r\nconst AdminSettings = () => {\r\n  const [brokerData, setBrokerData] = useState([]);\r\n  const [open, setOpen] = useState(false); // Modal open state\r\n  const [getUserList, setGetuserList] = useState([]);\r\n  const [idData, setIdData] = useState([]);\r\n\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  // Fetch User Data\r\n  const getuserData = async () => {\r\n    try {\r\n      const response = await api.get(\"/users\");\r\n      if (response.status === 200) {\r\n        setGetuserList(response.data);\r\n      } else {\r\n        console.log(\"error in getUserData\");\r\n        setGetuserList([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching user data.\");\r\n    }\r\n  };\r\n\r\n  const getIdData = async () => {\r\n    try {\r\n      const response = await api.get(\"/getIds\");\r\n      if (response.status === 200) {\r\n        console.log(response.data);\r\n        const structureData = response.data.data.map((data) => ({\r\n          Id: data.idNumber,\r\n          \"Broker Name\": data.brokerName,\r\n          \"Start Date\": data.startDate,\r\n          \"Releases Date\": data.releasesDate ? data.releasesDate : \"-\",\r\n          Employee: data?.employee ? data.employee : \"-\",\r\n          Nism: data.nism,\r\n          IdType: data.idType,\r\n          Action: (\r\n            <div className=\"action-buttons\">\r\n              <Button\r\n                // key={`release-${broker.id}`}\r\n                // onPress={() => releaseBroker(broker)}\r\n                size=\"small\"\r\n                className=\"submit-btn\"\r\n                // isDisabled={broker.status === 3}\r\n              >\r\n                {/* {broker.status === 3 ? \"Released\" : \"Release\"} */}\r\n                Release\r\n              </Button>\r\n            </div>\r\n          ),\r\n        }));\r\n        setIdData(structureData);\r\n      } else {\r\n        console.log(\"error in getIdData\");\r\n        setIdData([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching id data.\");\r\n    }\r\n  };\r\n\r\n  // Fetch Brokers Data\r\n  const getBrokerData = async () => {\r\n    try {\r\n      const response = await api.get(\"/getAllBroker\");\r\n      if (response.status === 200) {\r\n        setBrokerData(response?.data?.data.filter((data) => data.status === 1));\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching broker data.\");\r\n    }\r\n  };\r\n\r\n  // Release Broker Function\r\n  const releaseBroker = async (broker) => {\r\n    try {\r\n      const response = await api.put(`/releaseBroker/${broker.id}/3`);\r\n      if (response.status === 200) {\r\n        toast.success(`Released broker: ${broker.brokerName}`);\r\n        getBrokerData();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error releasing broker.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrokerData();\r\n    getuserData();\r\n    getIdData();\r\n  }, []);\r\n\r\n  // Form Initial Values\r\n  const initialValues = {\r\n    brokerName: \"\",\r\n    id: \"\",\r\n    startDate: \"\",\r\n    employee: \"\",\r\n    nism: \"\",\r\n    idType: \"\",\r\n  };\r\n\r\n  // Form Submission Handler\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      const response = await api.post(\"/createId\", values);\r\n      if (response.status === 200) {\r\n        toast.success(\"Id added successfully.\");\r\n        getBrokerData();\r\n        resetForm();\r\n        handleClose(); // Close modal after successful submission\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error adding broker.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AdminLayout\r\n      pageTitle=\"Id Management\"\r\n      pageSubtitle=\"Manage Id details, map brokers\"\r\n    >\r\n      <Card classNames=\"settings-mainCard\" style={{ marginTop: \"1rem\" }}>\r\n        <div className=\"flex justify-between p-4 align-middle broker-form\">\r\n          <TextField\r\n            className=\"searchUser\"\r\n            placeholder=\"Search\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <IoSearch />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <Button onPress={handleOpen} className=\"submit-btn p-4\">\r\n            Add Id\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Modal for Form */}\r\n        <Modal open={open} onClose={handleClose}>\r\n          <Box\r\n            sx={{\r\n              position: \"absolute\",\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              transform: \"translate(-50%, -50%)\",\r\n              width: 600,\r\n              bgcolor: \"background.paper\",\r\n              boxShadow: 24,\r\n              p: 4,\r\n              borderRadius: 2,\r\n            }}\r\n          >\r\n            <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n              Add Id\r\n            </Typography>\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={brokerValidationSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({ values, errors, touched, handleChange, handleBlur }) => (\r\n                <Form>\r\n                  <div className=\"flex gap-2\">\r\n                    <TextField\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      name=\"id\"\r\n                      label=\"ID\"\r\n                      value={values.id || \"\"}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      error={touched.id && Boolean(errors.id)}\r\n                      helperText={touched.id && errors.id}\r\n                    />\r\n                    <FormControl\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      error={touched.brokerName && Boolean(errors.brokerName)}\r\n                    >\r\n                      <InputLabel id=\"brokerName-label\">Broker Name</InputLabel>\r\n                      <Select\r\n                        labelId=\"brokerName-label\"\r\n                        id=\"brokerName\"\r\n                        name=\"brokerName\"\r\n                        label=\"Broker Name\"\r\n                        value={values.brokerName || \"\"}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      >\r\n                        {brokerData &&\r\n                          brokerData.map((data, index) => (\r\n                            <MenuItem key={index} value={data.id}>\r\n                              {data.brokerName}\r\n                            </MenuItem>\r\n                          ))}\r\n                      </Select>\r\n                      {touched.brokerName && Boolean(errors.brokerName) && (\r\n                        <FormHelperText>{errors.brokerName}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  </div>\r\n                  <div className=\"flex gap-2\">\r\n                    <TextField\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      name=\"startDate\"\r\n                      label=\"Start Date\"\r\n                      type=\"date\"\r\n                      InputLabelProps={{ shrink: true }}\r\n                      value={values.startDate || \"\"}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      error={touched.startDate && Boolean(errors.startDate)}\r\n                      helperText={touched.startDate && errors.startDate}\r\n                    />\r\n                    <FormControl\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      error={touched.employee && Boolean(errors.employee)}\r\n                    >\r\n                      <InputLabel id=\"employee-label\">Employee</InputLabel>\r\n                      <Select\r\n                        labelId=\"employee-label\"\r\n                        id=\"employee\"\r\n                        name=\"employee\"\r\n                        label=\"Employee\"\r\n                        value={values.employee || \"\"}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      >\r\n                        {console.log(getUserList)}\r\n                        {getUserList &&\r\n                          getUserList.map((data, index) => (\r\n                            <MenuItem key={index} value={data.id}>\r\n                              {data.firstName + \" \" + data.lastName}\r\n                            </MenuItem>\r\n                          ))}\r\n                      </Select>\r\n                      {touched.employee && errors.employee && (\r\n                        <FormHelperText>{errors.employee}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  </div>\r\n                  <div>\r\n                    <TextField\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      name=\"nism\"\r\n                      label=\"NISM\"\r\n                      value={values.nism || \"\"}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      error={touched.nism && Boolean(errors.nism)}\r\n                      helperText={touched.nism && errors.nism}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      name=\"idType\"\r\n                      label=\"ID Type\"\r\n                      value={values.idType || \"\"}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      error={touched.idType && Boolean(errors.idType)}\r\n                      helperText={touched.idType && errors.idType}\r\n                    />\r\n                  </div>\r\n\r\n                  <Box\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-end\",\r\n                      marginTop: 2,\r\n                      gap: 2,\r\n                    }}\r\n                  >\r\n                    <Button type=\"button\" onPress={handleClose}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Button type=\"submit\">Add Broker</Button>\r\n                  </Box>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </Box>\r\n        </Modal>\r\n\r\n        {/* Broker Table */}\r\n        <Box sx={{ marginTop: 4 }}>\r\n          <CustomTable title={brokerTableTitle} tableData={idData} />\r\n        </Box>\r\n      </Card>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminSettings;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  TableSortLabel,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\n\r\nconst CustomTable = ({ title = [], tableData = [], renderAction }) => {\r\n  // State for pagination\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  // State for sorting\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n\r\n  // Handle page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  // Handle rows per page change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Handle sorting\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending =\r\n        prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  // Sort data based on the sort configuration\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n    return [...tableData].sort((a, b) => {\r\n      if (a[sortConfig.key] < b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      }\r\n      if (a[sortConfig.key] > b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  // Paginate the sorted data\r\n  const paginatedData = sortedData.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const handleButtonClick = (status, id) => {\r\n    if (status === 1) {\r\n      renderAction(id);\r\n    } else {\r\n      renderAction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper} className=\"custom\">\r\n      <Table>\r\n        {/* Table Header with Sorting */}\r\n        <TableHead>\r\n          <TableRow>\r\n            {title.map((header, index) => (\r\n              <TableCell key={index} align=\"center\" sx={{ fontWeight: \"bold\" }}>\r\n                <TableSortLabel\r\n                  active={sortConfig.key === header.toLowerCase()}\r\n                  direction={\r\n                    sortConfig.key === header.toLowerCase()\r\n                      ? sortConfig.direction\r\n                      : \"asc\"\r\n                  }\r\n                  onClick={() => handleSort(header.toLowerCase())}\r\n                >\r\n                  {header}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        {/* Table Body */}\r\n        <TableBody>\r\n          {paginatedData.map((rowData, rowIndex) => (\r\n            <TableRow key={rowIndex}>\r\n              {Object.keys(rowData).map((key, colIndex) => {\r\n                // Skip specific keys dynamically\r\n                if ([\"status\", \"id\", \"brokerId\",\"fundAllocated\"].includes(key)) return null;\r\n                return (\r\n                  <TableCell key={`${rowIndex}-${colIndex}`} align=\"center\">\r\n                    {key === \"action\" && renderAction ? (\r\n                      <Button\r\n                        isDisabled={rowData[\"status\"] === 3}\r\n                        onPress={() =>\r\n                          handleButtonClick(rowData[\"status\"], rowData[\"id\"])\r\n                        }\r\n                      >\r\n                        {rowData[\"status\"] === 1 ? \"Release\" : \"Released\"}\r\n                      </Button>\r\n                    ) : (\r\n                      rowData[key]\r\n                    )}\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n          {\r\n            paginatedData && paginatedData.length === 0 && (\r\n              <TableRow style={{ textAlign: 'center' }}>\r\n                <TableCell colSpan={title.length} className=\"middle-noData\">No data found.</TableCell>\r\n              </TableRow>\r\n            )\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* Pagination Controls */}\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={tableData.length}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        rowsPerPage={rowsPerPage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 15]}\r\n      />\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:'http://43.204.150.47:8000',\r\n  timeout:5000\r\n})\r\n\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api"],"names":["brokerValidationSchema","Yup","shape","brokerName","required","id","startDate","employee","nism","idType","brokerTableTitle","AdminSettings","brokerData","setBrokerData","useState","open","setOpen","getUserList","setGetuserList","idData","setIdData","handleClose","getBrokerData","async","response","api","get","_response$data","status","data","filter","error","console","toast","useEffect","log","getuserData","structureData","map","Id","idNumber","releasesDate","Employee","Nism","IdType","Action","_jsx","className","children","Button","size","getIdData","AdminLayout","pageTitle","pageSubtitle","_jsxs","Card","classNames","style","marginTop","TextField","placeholder","InputProps","startAdornment","InputAdornment","position","IoSearch","onPress","handleOpen","Modal","onClose","Box","sx","top","left","transform","width","bgcolor","boxShadow","p","borderRadius","Typography","variant","component","gutterBottom","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","post","success","_ref2","errors","touched","handleChange","handleBlur","Form","fullWidth","margin","name","label","value","onChange","onBlur","Boolean","helperText","FormControl","InputLabel","Select","labelId","index","MenuItem","FormHelperText","type","InputLabelProps","shrink","firstName","lastName","display","justifyContent","gap","CustomTable","title","tableData","renderAction","page","setPage","rowsPerPage","setRowsPerPage","sortConfig","setSortConfig","key","direction","paginatedData","React","sort","a","b","slice","TableContainer","Paper","Table","TableHead","TableRow","header","TableCell","align","fontWeight","TableSortLabel","active","toLowerCase","onClick","handleSort","columnKey","prevConfig","isAscending","TableBody","rowData","rowIndex","Object","keys","colIndex","includes","isDisabled","handleButtonClick","concat","length","textAlign","colSpan","TablePagination","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","axios","create","baseURL","timeout","interceptors","request","use","config","headers","Authorization","localStorage","getItem","Promise","reject","message"],"sourceRoot":""}