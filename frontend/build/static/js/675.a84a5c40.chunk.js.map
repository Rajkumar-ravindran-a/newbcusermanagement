{"version":3,"file":"static/js/675.a84a5c40.chunk.js","mappings":"sXA4BA,MAAMA,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,aAAcF,EAAAA,KAAaG,SAAS,+BA+MtC,EA5MqBC,KACnB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,WAAS,IAE1BC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAE1CG,EAAUC,IAAeJ,EAAAA,EAAAA,WAAS,IAElCK,EAAkBC,IAAuBN,EAAAA,EAAAA,UAAS,MAQnDO,EAAcA,KAClBR,GAAQ,GACRK,GAAY,GACZE,EAAoB,KAAK,EAMrBE,EAAkBC,UACtB,IACE,MAAMC,QAAiBC,EAAAA,EAAIC,IAAI,kBAE/B,GADAC,QAAQC,IAAIJ,GACY,MAApBA,EAASK,OAAgB,CAC3B,MAAMC,EAAgBN,EAASO,KAAKC,KAAKD,IAAI,CAC3C,cAAeA,EAAKE,GACpB,gBAAiBF,EAAKG,aACtBC,QACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAAAF,UACdC,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAAAH,UACTC,EAAAA,EAAAA,KAACG,EAAAA,IAAW,SAGhBN,EAAAA,EAAAA,MAACO,EAAAA,EAAY,CACX,aAAW,uBACXC,SAAWC,IACG,WAARA,EACFC,EAAef,EAAKE,IACH,SAARY,GACTE,EAAahB,EACf,EACAO,SAAA,EAEFC,EAAAA,EAAAA,KAACS,EAAAA,EAAY,CAAAV,SAAc,UAAT,WAClBC,EAAAA,EAAAA,KAACS,EAAAA,EAAY,CAAAV,SAAY,QAAP,kBAK1BtB,EAAgBc,EAClB,CACF,CAAE,MAAOmB,GACPtB,QAAQsB,MAAM,6BAA8BA,EAC9C,IAGFC,EAAAA,EAAAA,YAAU,KACR5B,GAAiB,GAChB,IAGH,MAAMwB,EAAiBvB,UACrB,IAE0B,aADDE,EAAAA,EAAI0B,OAAO,eAADC,OAAgBnB,KACpCJ,QAEXP,GAEJ,CAAE,MAAO2B,GACPtB,QAAQsB,MAAM,2BAA4BA,EAC5C,GAIIF,EAAgBhB,IACpBb,GAAY,GACZE,EAAoBW,GACpBlB,GAAQ,EAAK,EAGf,OACEuB,EAAAA,EAAAA,MAACiB,EAAAA,EAAW,CAACC,UAAU,WAAWC,aAAa,kBAAiBjB,SAAA,EAC9DF,EAAAA,EAAAA,MAACoB,EAAAA,EAAI,CAACC,UAAU,WAAUnB,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKqB,UAAU,4BAA2BnB,SAAA,EACxCC,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CACRD,UAAU,aACVE,YAAY,SACZC,WAAY,CACVC,gBACEtB,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAACC,SAAS,QAAOzB,UAC9BC,EAAAA,EAAAA,KAACyB,EAAAA,IAAQ,UAKjBzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CACLC,QAAQ,YACRC,WAAW5B,EAAAA,EAAAA,KAAC6B,EAAAA,IAAkB,IAC9BC,QA/FSC,KACjBpD,GAAY,GACZE,EAAoB,MACpBP,GAAQ,EAAK,EA4FeyB,SACrB,qBAIHC,EAAAA,EAAAA,KAACgC,EAAAA,EAAW,CAACC,MAxFL,CAAC,cAAe,gBAAiB,UAwFdC,UAAW1D,QAGxCwB,EAAAA,EAAAA,KAACmC,EAAAA,EAAK,CAAC9D,KAAMA,EAAM+D,QAAStD,EAAYiB,UACtCF,EAAAA,EAAAA,MAACwC,EAAAA,EAAG,CACFC,GAAI,CACFd,SAAU,WACVe,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,MAAO,IACPC,QAAS,mBACTC,UAAW,GACXC,aAAc,OACdC,EAAG,GACH/C,SAAA,EAEFC,EAAAA,EAAAA,KAAC+C,EAAAA,EAAU,CAACpB,QAAQ,KAAKqB,UAAU,KAAKC,GAAI,EAAElD,SAC3CrB,EAAW,gBAAkB,kBAEhCsB,EAAAA,EAAAA,KAACkD,EAAAA,GACC,CAEAC,cAAe,CACbjF,aACEQ,GAAYE,EACRA,EAA+B,aAC/B,IAERwE,oBAAkB,EAClBC,iBAAkBtF,EAClBuF,SAAUtE,MAAOuE,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,EAEpC,IACE,GAAI9E,GAAYE,EAAkB,CAMR,aAJDM,EAAAA,EAAIwE,IAAI,eAAD7C,OACbjC,EAAqB,IACpC,CAAEe,aAAc4D,EAAOrF,gBAEZoB,SACXqE,EAAAA,GAAMC,QAAQ,iCACd7E,IAEJ,KAAO,CAKmB,aAHDG,EAAAA,EAAI2E,KAAK,cAAe,CAC7ClE,aAAc4D,EAAOrF,gBAEVoB,SACXqE,EAAAA,GAAMC,QAAQ,iCACd7E,IAEJ,CACF,CAAE,MAAO2B,GACPtB,QAAQsB,MAAM,yBAA0BA,EAC1C,CACA+C,IACA3E,GAAa,EACbiB,SAED+D,IAAA,IAAC,OAAEC,EAAM,QAAEC,GAASF,EAAA,OACnBjE,EAAAA,EAAAA,MAACoE,EAAAA,GAAI,CAAAlE,SAAA,CACFX,QAAQC,IAAIT,IACboB,EAAAA,EAAAA,KAACkE,EAAAA,EAAW,CAACC,WAAS,EAACC,OAAO,SAAQrE,UACpCC,EAAAA,EAAAA,KAACqE,EAAAA,GAAK,CACJC,GAAInD,EAAAA,EACJoD,KAAK,eACLC,MAAM,gBACN9D,MAAOsD,EAAQ9F,cAAgBuG,QAAQV,EAAO7F,cAC9CwG,WAAYV,EAAQ9F,cAAgB6F,EAAO7F,kBAG/C2B,EAAAA,EAAAA,MAACwC,EAAAA,EAAG,CAACsC,GAAI,EAAGC,QAAQ,OAAOC,eAAe,WAAU9E,SAAA,EAClDC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CACLC,QAAQ,YACRmD,MAAM,YACNhD,QAAShD,EAAYiB,SACtB,YAGDC,EAAAA,EAAAA,KAACqC,EAAAA,EAAG,CAAC0C,GAAI,KACT/E,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CAACC,QAAQ,YAAYqD,KAAK,SAAQjF,SACtCrB,EAAW,SAAW,gBAGtB,WAKH,C","sources":["component/pages/StratagyPage.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport AdminLayout from \"../layouts/AdminLayout\";\r\nimport { Card } from \"@nextui-org/react\";\r\nimport CustomTable from \"../table/CustomTable\";\r\nimport { IoSearch, IoAddCircleOutline } from \"react-icons/io5\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Modal,\r\n  TextField,\r\n  IconButton,\r\n  Button,\r\n  InputAdornment,\r\n  FormControl,\r\n} from \"@mui/material\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport api from \"../../config/AxiosCofig\";\r\nimport {\r\n  Dropdown,\r\n  DropdownTrigger,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"@nextui-org/react\";\r\nimport { CiMenuKebab } from \"react-icons/ci\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Define validation schema\r\nconst StrategySchema = Yup.object().shape({\r\n  strategyName: Yup.string().required(\"Strategy Name is required\"),\r\n});\r\n\r\nconst StratagyPage = () => {\r\n  const [open, setOpen] = useState(false);\r\n  // Used to hold all strategies for the table\r\n  const [strategyData, setStrategyData] = useState([]);\r\n  // Track whether we are editing an existing strategy\r\n  const [editMode, setEditMode] = useState(false);\r\n  // Hold the currently selected strategy (for editing)\r\n  const [selectedStrategy, setSelectedStrategy] = useState(null);\r\n\r\n  const handleOpen = () => {\r\n    setEditMode(false);\r\n    setSelectedStrategy(null);\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setEditMode(false);\r\n    setSelectedStrategy(null);\r\n  };\r\n\r\n  const title = [\"Strategy Id\", \"Strategy Name\", \"Action\"];\r\n\r\n  // Function to fetch strategies from the API\r\n  const getStrategyData = async () => {\r\n    try {\r\n      const response = await api.get(\"/getStrategies\");\r\n      console.log(response);\r\n      if (response.status === 200) {\r\n        const formattedData = response.data.map((data) => ({\r\n          \"Strategy Id\": data.id,\r\n          \"Strategy Name\": data.StrategyName,\r\n          Action: (\r\n            <Dropdown>\r\n              <DropdownTrigger>\r\n                <IconButton>\r\n                  <CiMenuKebab />\r\n                </IconButton>\r\n              </DropdownTrigger>\r\n              <DropdownMenu\r\n                aria-label=\"Action event example\"\r\n                onAction={(key) => {\r\n                  if (key === \"Delete\") {\r\n                    deleteStrategy(data.id);\r\n                  } else if (key === \"Edit\") {\r\n                    editStrategy(data);\r\n                  }\r\n                }}\r\n              >\r\n                <DropdownItem key=\"Delete\">Delete</DropdownItem>\r\n                <DropdownItem key=\"Edit\">Edit</DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          ),\r\n        }));\r\n        setStrategyData(formattedData);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching strategies:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getStrategyData();\r\n  }, []);\r\n\r\n  // Function to delete a strategy\r\n  const deleteStrategy = async (id) => {\r\n    try {\r\n      const response = await api.delete(`/strategies/${id}`);\r\n      if (response.status === 204) {\r\n        // After deletion, refresh the strategy list\r\n        getStrategyData();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting strategy:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to initiate editing a strategy\r\n  const editStrategy = (data) => {\r\n    setEditMode(true);\r\n    setSelectedStrategy(data);\r\n    setOpen(true);\r\n  };\r\n\r\n  return (\r\n    <AdminLayout pageTitle=\"Strategy\" pageSubtitle=\"Manage strategy\">\r\n      <Card className=\"mt-3 p-3\">\r\n        <div className=\"flex mb-2 justify-between\">\r\n          <TextField\r\n            className=\"searchUser\"\r\n            placeholder=\"Search\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <IoSearch />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<IoAddCircleOutline />}\r\n            onClick={handleOpen}\r\n          >\r\n            Add Strategy\r\n          </Button>\r\n        </div>\r\n        <CustomTable title={title} tableData={strategyData} />\r\n      </Card>\r\n\r\n      <Modal open={open} onClose={handleClose}>\r\n        <Box\r\n          sx={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: 400,\r\n            bgcolor: \"background.paper\",\r\n            boxShadow: 24,\r\n            borderRadius: \"1rem\",\r\n            p: 4,\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" component=\"h2\" mb={2}>\r\n            {editMode ? \"Edit Strategy\" : \"Add Strategy\"}\r\n          </Typography>\r\n          <Formik\r\n            // Set initial values based on edit mode\r\n            \r\n            initialValues={{\r\n              strategyName:\r\n                editMode && selectedStrategy\r\n                  ? selectedStrategy[\"StrategyName\"]\r\n                  : \"\",\r\n            }}\r\n            enableReinitialize\r\n            validationSchema={StrategySchema}\r\n            onSubmit={async (values, { resetForm }) => {\r\n\r\n              try {\r\n                if (editMode && selectedStrategy) {\r\n                  // Update API call for editing\r\n                  const response = await api.put(\r\n                    `/strategies/${selectedStrategy[\"id\"]}`,\r\n                    { StrategyName: values.strategyName }\r\n                  );\r\n                  if (response.status === 200) {\r\n                    toast.success(\"Strategy updated successfully\");\r\n                    getStrategyData();\r\n                  }\r\n                } else {\r\n                  // Create API call for new strategy\r\n                  const response = await api.post(\"/strategies\", {\r\n                    StrategyName: values.strategyName,\r\n                  });\r\n                  if (response.status === 201) {\r\n                    toast.success(\"Strategy created successfully\")\r\n                    getStrategyData();\r\n                  }\r\n                }\r\n              } catch (error) {\r\n                console.error(\"Error saving strategy:\", error);\r\n              }\r\n              resetForm();\r\n              handleClose();\r\n            }}\r\n          >\r\n            {({ errors, touched }) => (\r\n              <Form>\r\n                {console.log(selectedStrategy)}\r\n                <FormControl fullWidth margin=\"normal\">\r\n                  <Field\r\n                    as={TextField}\r\n                    name=\"strategyName\"\r\n                    label=\"Strategy Name\"\r\n                    error={touched.strategyName && Boolean(errors.strategyName)}\r\n                    helperText={touched.strategyName && errors.strategyName}\r\n                  />\r\n                </FormControl>\r\n                <Box mt={2} display=\"flex\" justifyContent=\"flex-end\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={handleClose}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Box ml={2} />\r\n                  <Button variant=\"contained\" type=\"submit\">\r\n                    {editMode ? \"Update\" : \"Submit\"}\r\n                  </Button>\r\n                </Box>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </Modal>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default StratagyPage;\r\n"],"names":["StrategySchema","Yup","shape","strategyName","required","StratagyPage","open","setOpen","useState","strategyData","setStrategyData","editMode","setEditMode","selectedStrategy","setSelectedStrategy","handleClose","getStrategyData","async","response","api","get","console","log","status","formattedData","data","map","id","StrategyName","Action","_jsxs","Dropdown","children","_jsx","DropdownTrigger","IconButton","CiMenuKebab","DropdownMenu","onAction","key","deleteStrategy","editStrategy","DropdownItem","error","useEffect","delete","concat","AdminLayout","pageTitle","pageSubtitle","Card","className","TextField","placeholder","InputProps","startAdornment","InputAdornment","position","IoSearch","Button","variant","startIcon","IoAddCircleOutline","onClick","handleOpen","CustomTable","title","tableData","Modal","onClose","Box","sx","top","left","transform","width","bgcolor","boxShadow","borderRadius","p","Typography","component","mb","Formik","initialValues","enableReinitialize","validationSchema","onSubmit","values","_ref","resetForm","put","toast","success","post","_ref2","errors","touched","Form","FormControl","fullWidth","margin","Field","as","name","label","Boolean","helperText","mt","display","justifyContent","color","ml","type"],"sourceRoot":""}