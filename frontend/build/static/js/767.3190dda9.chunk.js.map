{"version":3,"file":"static/js/767.3190dda9.chunk.js","mappings":"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","sources":["component/popups/BrokerFormPopup.jsx","component/table/CollapsableTable.jsx","component/pages/SettingsPage.jsx","component/table/CustomTable.jsx","config/AxiosCofig.js"],"sourcesContent":["import { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Button, TextField, Typography, Modal, Box } from \"@mui/material\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Validation Schema\r\nconst brokerValidationSchema = Yup.object().shape({\r\n  brokerName: Yup.string().required(\"Broker Name is required\"),\r\n  grossFund: Yup.number()\r\n    .typeError(\"Gross Fund must be a number\")\r\n    .min(0, \"Gross Fund must be greater than or equal to 0\")\r\n    .required(\"Gross Fund is required\"),\r\n  grossFundInterest: Yup.number()\r\n    .typeError(\"Gross Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Gross Fund Interest is required\"),\r\n  grossFundSharing: Yup.number()\r\n    .typeError(\"Gross Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Gross Fund Sharing is required\"),\r\n\r\n  arbitrageFund: Yup.number()\r\n    .typeError(\"Arbitrage Fund must be a number\")\r\n    .min(0, \"Arbitrage Fund must be greater than or equal to 0\")\r\n    .required(\"Arbitrage Fund is required\"),\r\n  arbitrageFundInterest: Yup.number()\r\n    .typeError(\"Arbitrage Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Arbitrage Fund Interest is required\"),\r\n  arbitrageFundSharing: Yup.number()\r\n    .typeError(\"Arbitrage Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Arbitrage Fund Sharing is required\"),\r\n\r\n  propFund: Yup.number()\r\n    .typeError(\"Prop Fund must be a number\")\r\n    .min(0, \"Prop Fund must be greater than or equal to 0\")\r\n    .required(\"Prop Fund is required\"),\r\n  propFundInterest: Yup.number()\r\n    .typeError(\"Prop Fund Interest must be a number\")\r\n    .min(0, \"Interest must be at least 0%\")\r\n    .max(100, \"Interest cannot exceed 100%\")\r\n    .required(\"Prop Fund Interest is required\"),\r\n  propFundSharing: Yup.number()\r\n    .typeError(\"Prop Fund Sharing must be a number\")\r\n    .min(0, \"Sharing must be at least 0%\")\r\n    .max(100, \"Sharing cannot exceed 100%\")\r\n    .required(\"Prop Fund Sharing is required\"),\r\n\r\n  costPerCr: Yup.number()\r\n    .typeError(\"Cost must be a number\")\r\n    .min(0, \"Cost must be greater than or equal to 0\")\r\n    .required(\"Cost is required\"),\r\n});\r\n\r\n// Broker Form Popup Component\r\nconst BrokerFormPopup = ({ open, handleClose, onFormSubmit, brokerData }) => {\r\n  const initialValues = {\r\n    id: brokerData?.id || null,\r\n    brokerName: brokerData?.brokerName || \"\",\r\n    grossFund: brokerData?.grossFund || 0,\r\n    grossFundInterest: brokerData?.grossFundInterest || 0,\r\n    grossFundSharing: brokerData?.grossFundSharing || 0,\r\n    arbitrageFund: brokerData?.arbitrageFund || 0,\r\n    arbitrageFundInterest: brokerData?.arbitrageFundInterest || 0,\r\n    arbitrageFundSharing: brokerData?.arbitrageFundSharing || 0,\r\n    propFund: brokerData?.propFund || 0,\r\n    propFundInterest: brokerData?.propFundInterest || 0,\r\n    propFundSharing: brokerData?.propFundSharing || 0,\r\n    costPerCr: brokerData?.costPerCr || 0,\r\n  };\r\n\r\n  const handleSubmit = async (values, { resetForm }) => {\r\n    try {\r\n      if (values.id) {\r\n        await api.put(`/updateBroker/${values.id}`, values);\r\n        toast.success(\"Broker updated successfully.\");\r\n      } else {\r\n        await api.post(\"/createBroker\", values);\r\n        toast.success(\"Broker added successfully.\");\r\n      }\r\n      onFormSubmit();\r\n      resetForm();\r\n      handleClose();\r\n    } catch (error) {\r\n      console.error(error?.response?.data);\r\n      toast.error(error?.response?.data?.detail || \"An error occurred.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal open={open} onClose={handleClose}>\r\n      <Box\r\n        sx={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: 600,\r\n          bgcolor: \"background.paper\",\r\n          boxShadow: 24,\r\n          p: 4,\r\n          borderRadius: 2,\r\n          overflowY: \"auto\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h6\" sx={{ marginBottom: \"20px\" }}>\r\n          {initialValues.id ? \"Update Broker\" : \"Add Broker\"}\r\n        </Typography>\r\n\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={brokerValidationSchema}\r\n          onSubmit={handleSubmit}\r\n          enableReinitialize\r\n        >\r\n          {({ values, errors, touched, handleChange, handleBlur, setFieldValue }) => (\r\n            <Form>\r\n              <div className=\"flex flex-col gap-4\">\r\n                {/* Broker Name */}\r\n                <TextField\r\n                  name=\"brokerName\"\r\n                  label=\"Broker Name\"\r\n                  value={values.brokerName} // Force uppercase\r\n                  onChange={(e) => {\r\n                    const uppercaseValue = e.target.value.toUpperCase();\r\n                    setFieldValue(\"brokerName\", uppercaseValue); // Set uppercase value in Formik\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  error={touched.brokerName && Boolean(errors.brokerName)}\r\n                  helperText={touched.brokerName && errors.brokerName}\r\n                  fullWidth\r\n                  inputProps={{ style: { textTransform: \"uppercase\" } }} // Ensure UI displays uppercase\r\n                />\r\n\r\n                {/* Gross Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"grossFund\"\r\n                    label=\"Gross Fund (1Cr)\"\r\n                    value={values.grossFund}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.grossFund && Boolean(errors.grossFund)}\r\n                    helperText={touched.grossFund && errors.grossFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"grossFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.grossFundInterest}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.grossFundInterest &&\r\n                      Boolean(errors.grossFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.grossFundInterest && errors.grossFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"grossFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.grossFundSharing}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.grossFundSharing &&\r\n                      Boolean(errors.grossFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.grossFundSharing && errors.grossFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* Arbitrage Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"arbitrageFund\"\r\n                    label=\"Arbitrage Fund (1Cr)\"\r\n                    value={values.arbitrageFund}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.arbitrageFund && Boolean(errors.arbitrageFund)\r\n                    }\r\n                    helperText={touched.arbitrageFund && errors.arbitrageFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"arbitrageFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.arbitrageFundInterest}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.arbitrageFundInterest &&\r\n                      Boolean(errors.arbitrageFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.arbitrageFundInterest &&\r\n                      errors.arbitrageFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"arbitrageFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.arbitrageFundSharing}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.arbitrageFundSharing &&\r\n                      Boolean(errors.arbitrageFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.arbitrageFundSharing &&\r\n                      errors.arbitrageFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* Prop Fund */}\r\n                <div className=\"flex gap-4\">\r\n                  <TextField\r\n                    name=\"propFund\"\r\n                    label=\"Prop Fund (1Cr)\"\r\n                    value={values.propFund}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.propFund && Boolean(errors.propFund)}\r\n                    helperText={touched.propFund && errors.propFund}\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"propFundInterest\"\r\n                    label=\"Interest (%)\"\r\n                    value={values.propFundInterest}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.propFundInterest &&\r\n                      Boolean(errors.propFundInterest)\r\n                    }\r\n                    helperText={\r\n                      touched.propFundInterest && errors.propFundInterest\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                  <TextField\r\n                    name=\"propFundSharing\"\r\n                    label=\"Sharing (%)\"\r\n                    value={values.propFundSharing}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={\r\n                      touched.propFundSharing && Boolean(errors.propFundSharing)\r\n                    }\r\n                    helperText={\r\n                      touched.propFundSharing && errors.propFundSharing\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n\r\n                {/* Cost Per Cr */}\r\n                <TextField\r\n                  name=\"costPerCr\"\r\n                  label=\"Cost Per Cr\"\r\n                  value={values.costPerCr}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  error={touched.costPerCr && Boolean(errors.costPerCr)}\r\n                  helperText={touched.costPerCr && errors.costPerCr}\r\n                  fullWidth\r\n                  margin=\"normal\"\r\n                />\r\n\r\n                {/* Action Buttons */}\r\n                <div className=\"flex justify-end gap-4 mt-4\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={handleClose}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                    {initialValues.id ? \"Update Broker\" : \"Add Broker\"}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BrokerFormPopup;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TableSortLabel,\r\n  CircularProgress,\r\n  Collapse,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from \"@mui/icons-material\";\r\n\r\nconst CollapsableTable = ({\r\n  title = [],\r\n  columnWidths = [],\r\n  tableData = [],\r\n  renderAction,\r\n  loading,\r\n}) => {\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n  const [expandedRow, setExpandedRow] = useState(null);\r\n\r\n  const excludedKeys = [\r\n    \"status\",\r\n    \"id\",\r\n    \"brokerId\",\r\n    \"fundAllocated\",\r\n    \"Record Id\",\r\n    \"Gross Fund Interest\",\r\n    \"Gross Fund Sharing\",\r\n    \"Arbitrage Fund Interest\",\r\n    \"Arbitrage Fund Sharing\",\r\n    \"Prop Fund Interest\",\r\n    \"Prop Fund Sharing\",\r\n    \"Cost Per Cr\",\r\n  ];\r\n\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending =\r\n        prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n    return [...tableData].sort((a, b) => {\r\n      if (a[sortConfig.key] < b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      }\r\n      if (a[sortConfig.key] > b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  const handleExpandClick = (rowIndex) => {\r\n    setExpandedRow((prev) => (prev === rowIndex ? null : rowIndex));\r\n  };\r\n\r\n  return (\r\n    <Paper className=\"custom\">\r\n      <TableContainer className=\"tble-container\">\r\n        <Table className=\"tble-custom\" stickyHeader>\r\n          <TableHead>\r\n            <TableRow className=\"tble-head\">\r\n              <TableCell /> {/* Expand/Collapse Column */}\r\n              {title.map((header, index) => (\r\n                <TableCell\r\n                  key={index}\r\n                  align=\"center\"\r\n                  sx={{\r\n                    fontWeight: \"bold\",\r\n                    width: columnWidths[index] || \"auto\",\r\n                    minWidth: columnWidths[index] || 150,\r\n                    maxWidth: columnWidths[index] || 300,\r\n                    position: \"sticky\",\r\n                    top: 0,\r\n                    backgroundColor: \"white\",\r\n                    zIndex: 2,\r\n                  }}\r\n                >\r\n                  <TableSortLabel\r\n                    active={sortConfig.key === header.toLowerCase()}\r\n                    direction={\r\n                      sortConfig.key === header.toLowerCase()\r\n                        ? sortConfig.direction\r\n                        : \"asc\"\r\n                    }\r\n                    onClick={() => handleSort(header.toLowerCase())}\r\n                  >\r\n                    {header?.toUpperCase()}\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody className=\"tble-body\">\r\n            {loading && (\r\n              <TableRow>\r\n                <TableCell colSpan={title.length + 1} align=\"center\">\r\n                  <CircularProgress />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n\r\n            {sortedData.map((rowData, rowIndex) => (\r\n              <React.Fragment key={rowIndex}>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => handleExpandClick(rowIndex)}\r\n                    >\r\n                      {expandedRow === rowIndex ? (\r\n                        <KeyboardArrowUp />\r\n                      ) : (\r\n                        <KeyboardArrowDown />\r\n                      )}\r\n                    </IconButton>\r\n                  </TableCell>\r\n\r\n                  {Object.keys(rowData)\r\n                    .filter((key) => !excludedKeys.includes(key))\r\n                    .map((key, colIndex) => {\r\n                      if (key === \"action\" && renderAction) {\r\n                        return (\r\n                          <TableCell key={colIndex} align=\"center\">\r\n                            <Button\r\n                              isDisabled={rowData.status === 3}\r\n                              onPress={() => renderAction(rowData.id)}\r\n                            >\r\n                              {rowData.status === 1 ? \"Release\" : \"Released\"}\r\n                            </Button>\r\n                          </TableCell>\r\n                        );\r\n                      }\r\n\r\n                      return (\r\n                        <TableCell\r\n                          key={colIndex}\r\n                          align=\"center\"\r\n                          sx={{\r\n                            minWidth: columnWidths[colIndex] || 150,\r\n                            maxWidth: columnWidths[colIndex] || 300,\r\n                            whiteSpace: \"nowrap\",\r\n                            overflow: \"hidden\",\r\n                            textOverflow: \"ellipsis\",\r\n                          }}\r\n                        >\r\n                          {rowData[key]}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                </TableRow>\r\n\r\n                <TableRow>\r\n                  <TableCell colSpan={title.length + 1} sx={{ p: 0 }}>\r\n                    <Collapse\r\n                      in={expandedRow === rowIndex}\r\n                      timeout=\"auto\"\r\n                      unmountOnExit\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          padding: 16,\r\n                          backgroundColor: \"#f9f9f9\",\r\n                          display: \"flex\",\r\n                          gap: 4,\r\n                        }}\r\n                      >\r\n                        {/* <strong>Details:</strong> */}\r\n                        {/* {console.log(JSON.stringify(rowData, null, 2))} */}\r\n                        {/* <pre>{JSON.stringify(rowData, null, 2)}</pre> */}\r\n                        <Paper className=\"flex-1\">\r\n                          <TableContainer>\r\n                            <Table>\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell\r\n                                    colSpan={3}\r\n                                    sx={{ textAlign: \"center\" }}\r\n                                  >\r\n                                    Gross Fund\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                <TableRow>\r\n                                  <TableCell>Fund</TableCell>\r\n                                  <TableCell>Intrest %</TableCell>\r\n                                  <TableCell>Sharing %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                  <TableCell>{rowData[\"Gross Fund\"]}</TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Gross Fund Interest\"]}%\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Gross Fund Sharing\"]}%\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                        </Paper>\r\n\r\n                        <Paper className=\"flex-1\">\r\n                          <TableContainer>\r\n                            <Table>\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell\r\n                                    colSpan={3}\r\n                                    sx={{ textAlign: \"center\" }}\r\n                                  >\r\n                                    Arbitrage Fund\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                <TableRow>\r\n                                  <TableCell>Fund</TableCell>\r\n                                  <TableCell>Intrest %</TableCell>\r\n                                  <TableCell>Sharing %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                  <TableCell>\r\n                                    {rowData[\"Arbitrage Fund\"]}\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Arbitrage Fund Interest\"]}%\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Arbitrage Fund Sharing\"]}%\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                        </Paper>\r\n\r\n                        <Paper className=\"flex-1\">\r\n                          <TableContainer>\r\n                            <Table>\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell\r\n                                    colSpan={3}\r\n                                    sx={{ textAlign: \"center\" }}\r\n                                  >\r\n                                    Prop Fund\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                <TableRow>\r\n                                  <TableCell>Fund</TableCell>\r\n                                  <TableCell>Intrest %</TableCell>\r\n                                  <TableCell>Sharing %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                  <TableCell>{rowData[\"Prop Fund\"]}</TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Prop Fund Interest\"]}%\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    {rowData[\"Prop Fund Sharing\"]}%\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                        </Paper>\r\n                        \r\n                        {/* <TableContainer>\r\n                          <Table>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>Column</TableCell>\r\n                                <TableCell>Value</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {Object.keys(rowData).map((key) => (\r\n                                <TableRow key={key}>\r\n                                  <TableCell>{key}</TableCell>\r\n                                  <TableCell>{rowData[key]}</TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer> */}\r\n                      </div>\r\n                      <Paper sx={{margin:\"1rem\"}}>\r\n                          <TableContainer>\r\n                            <Table>\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell>Cost per CR</TableCell>\r\n                                  <TableCell>Total Fund</TableCell>\r\n                                </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                <TableRow>\r\n                                  <TableCell>\r\n                                    {rowData[\"Cost Per Cr\"]}\r\n                                  </TableCell>\r\n                                  <TableCell>{rowData[\"Total Fund\"]}</TableCell>\r\n                                </TableRow>\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                        </Paper>\r\n                    </Collapse>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </React.Fragment>\r\n            ))}\r\n\r\n            {!loading && sortedData.length === 0 && (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={title.length + 1}\r\n                  align=\"center\"\r\n                  className=\"middle-noData\"\r\n                >\r\n                  No data found.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CollapsableTable;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { Button, TextField, IconButton } from \"@mui/material\";\r\nimport CustomTable from \"../table/CustomTable.jsx\";\r\nimport AdminLayout from \"../layouts/AdminLayout.jsx\";\r\nimport api from \"../../config/AxiosCofig.js\";\r\nimport { toast } from \"react-toastify\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport BrokerFormPopup from \"../popups/BrokerFormPopup.jsx\";\r\nimport { Card } from \"@nextui-org/react\";\r\nimport { IoSearch, IoAddCircleOutline } from \"react-icons/io5\";\r\nimport { CiMenuKebab } from \"react-icons/ci\";\r\nimport {\r\n  Dropdown,\r\n  DropdownTrigger,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"@nextui-org/react\";\r\nimport CollapsableTable from \"../table/CollapsableTable.jsx\";\r\n\r\n// Column Titles\r\n// const brokerTableTitle = [\r\n//   \"Broker Name\",\r\n//   \"Start Date\",\r\n//   \"Release Date\",\r\n//   \"Gross Fund\",\r\n//   \"Arbitrage Fund\",\r\n//   \"Total Fund\",\r\n//   \"Prop Fund\",\r\n//   \"Action\",\r\n// ];\r\n\r\nconst brokerTableTitle = [\r\n  \"BrokerName\",\r\n  \"GrossFund\",\r\n  \"ArbitrageFund\",\r\n  \"PropFund\",\r\n  // \"Interest\",\r\n  // \"Sharing\",\r\n  // \"Cost Per Cr\",\r\n  \"Total Fund\",\r\n  // \"Start Date\",\r\n  // \"Realease Date\",\r\n  \"Action\",\r\n];\r\n\r\nconst AdminSettings = () => {\r\n  const [brokerData, setBrokerData] = useState([]);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [loader, setLoader] = useState(false);\r\n  const [selectedBroker, setSelectedBroker] = useState(null);\r\n\r\n  // Fetch Brokers Data\r\n  const getBrokerData = useCallback(async () => {\r\n    setLoader(true);\r\n    try {\r\n      const response = await api.get(\"/getAllBroker\");\r\n      if (response.status === 200) {\r\n        const formattedData = response.data?.data?.map((broker) => ({\r\n          \"Broker Name\": broker.brokerName,\r\n          \r\n          \"Gross Fund Interest\": broker.grossFundInterest || \"-\",\r\n          \"Gross Fund\": broker.grossFund || \"-\",\r\n          \"Gross Fund Sharing\": broker.grossFundSharing || \"-\",\r\n\r\n          \"Arbitrage Fund Interest\": broker.arbitrageFundInterest || \"-\",\r\n          \"Arbitrage Fund\": broker.arbitrageFund || \"-\",\r\n          \"Arbitrage Fund Sharing\": broker.arbitrageFundSharing || \"-\",\r\n\r\n          \"Prop Fund Interest\": broker.propFundInterest || \"-\",\r\n          \"Prop Fund\": broker.propFund || \"-\",\r\n          \"Prop Fund Sharing\": broker.propFundSharing || \"-\",\r\n          \"Cost Per Cr\": broker.costPerCr || \"-\",\r\n\r\n          // Total Fund Calculation (Summing all fund values)\r\n          \"Total Fund\":\r\n            broker.grossFund !== undefined &&\r\n            broker.arbitrageFund !== undefined &&\r\n            broker.propFund !== undefined\r\n              ? broker.grossFund + broker.arbitrageFund + broker.propFund\r\n              : \"-\",\r\n\r\n          // \"Start Date\": broker.startDate || \"-\",\r\n          // \"Release Date\": broker.releaseDate || \"-\",\r\n\r\n          Action: (\r\n            <Dropdown>\r\n              <DropdownTrigger>\r\n                <IconButton>\r\n                  <CiMenuKebab />\r\n                </IconButton>\r\n              </DropdownTrigger>\r\n              <DropdownMenu\r\n                aria-label=\"Action menu\"\r\n                onAction={(key) => handleDropdownAction(key, broker)}\r\n              >\r\n                <DropdownItem key=\"release\" isDisabled={broker.status === 3}>\r\n                  Release\r\n                </DropdownItem>\r\n                <DropdownItem key=\"edit\" isDisabled={broker.status === 3}>\r\n                  Edit\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          ),\r\n        }));\r\n        setBrokerData(formattedData);\r\n      } else {\r\n        toast.error(\"Failed to fetch broker data.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error fetching broker data.\");\r\n    } finally {\r\n      setLoader(false);\r\n    }\r\n  }, []);\r\n\r\n  // Handle Dropdown Actions\r\n  const handleDropdownAction = (action, broker) => {\r\n    if (action === \"release\") {\r\n      releaseBroker(broker);\r\n    } else if (action === \"edit\") {\r\n      setSelectedBroker(broker);\r\n      setAnchorEl(document.body);\r\n    }\r\n  };\r\n\r\n  // Release Broker\r\n  const releaseBroker = async (broker) => {\r\n    try {\r\n      const response = await api.put(`/releaseBroker/${broker.id}/3`);\r\n      if (response.status === 200) {\r\n        toast.success(`Broker \"${broker.brokerName}\" released successfully.`);\r\n        getBrokerData();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Error releasing broker.\");\r\n    }\r\n  };\r\n\r\n  // Open and Close Popover\r\n  const handleClickPopover = (event) => setAnchorEl(event.currentTarget);\r\n  const handleClosePopover = () => {\r\n    setAnchorEl(null);\r\n    setSelectedBroker(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrokerData();\r\n  }, [getBrokerData]);\r\n\r\n  return (\r\n    <AdminLayout\r\n      pageTitle=\"Brokers\"\r\n      pageSubtitle=\"Add, view, and release brokers\"\r\n    >\r\n      <Card\r\n        className=\"settings-mainCard\"\r\n        style={{ marginTop: \"1rem\", width: \"100%\", overflowY: \"scroll\" }}\r\n      >\r\n        <div className=\"flex justify-between p-2 align-middle broker-form\">\r\n          <TextField\r\n            className=\"searchUser\"\r\n            placeholder=\"Search\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <IoSearch />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleClickPopover}\r\n            startIcon={<IoAddCircleOutline />}\r\n          >\r\n            Add Broker\r\n          </Button>\r\n        </div>\r\n\r\n        <BrokerFormPopup\r\n          anchorEl={anchorEl}\r\n          open={Boolean(anchorEl)}\r\n          handleClose={handleClosePopover}\r\n          onFormSubmit={getBrokerData}\r\n          brokerData={selectedBroker}\r\n        />\r\n\r\n        <div className=\"mt-4\">\r\n          {/* <CustomTable\r\n            columnWidths={[\r\n              \"10%\",\r\n              \"10%\",\r\n              \"10%\",\r\n              \"10%\",\r\n              \"15%\",\r\n              \"10%\",\r\n              \"10%\",\r\n              \"10%\",\r\n              \"40%\",\r\n              \"15%\",\r\n              \"10%\",\r\n            ]}\r\n            title={brokerTableTitle}\r\n            tableData={brokerData}\r\n            loading={loader}\r\n          /> */}\r\n          <CollapsableTable\r\n            title={brokerTableTitle}\r\n            tableData={brokerData}\r\n            loading={loader}\r\n          />\r\n        </div>\r\n      </Card>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminSettings;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TableSortLabel,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { Button } from \"@nextui-org/react\";\r\n\r\nconst CustomTable = ({\r\n  title = [],\r\n  columnWidths = [],\r\n  tableData = [],\r\n  renderAction,\r\n  loading,\r\n}) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n\r\n  const handleSort = (columnKey) => {\r\n    setSortConfig((prevConfig) => {\r\n      const isAscending =\r\n        prevConfig.key === columnKey && prevConfig.direction === \"asc\";\r\n      return {\r\n        key: columnKey,\r\n        direction: isAscending ? \"desc\" : \"asc\",\r\n      };\r\n    });\r\n  };\r\n\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortConfig.key) return tableData;\r\n    return [...tableData].sort((a, b) => {\r\n      if (a[sortConfig.key] < b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      }\r\n      if (a[sortConfig.key] > b[sortConfig.key]) {\r\n        return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }, [tableData, sortConfig]);\r\n\r\n  const handleButtonClick = (status, id) => {\r\n    if (status === 1) {\r\n      renderAction(id);\r\n    } else {\r\n      renderAction();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper className=\"custom\">\r\n      <TableContainer className=\"tble-container\">\r\n        <Table className=\"tble-custom\" stickyHeader>\r\n          <TableHead>\r\n            <TableRow className=\"tble-head\">\r\n              {title.map((header, index) => {\r\n                if (header === \"Gross Fund\") {\r\n                  return (\r\n                    <TableCell\r\n                      key=\"grossFund\"\r\n                      align=\"center\"\r\n                      sx={{\r\n                        // fontWeight: \"bold\",\r\n                        // minWidth: 200,\r\n                        // maxWidth: 300,\r\n                        position: \"sticky\",\r\n                        top: 0,\r\n                        backgroundColor: \"white\",\r\n                        zIndex: 1,\r\n                      }}\r\n                    >\r\n                      <TableSortLabel\r\n                        active={sortConfig.key === \"grossFund\"}\r\n                        direction={\r\n                          sortConfig.key === \"grossFund\"\r\n                            ? sortConfig.direction\r\n                            : \"asc\"\r\n                        }\r\n                        onClick={() => handleSort(\"grossFund\")}\r\n                      >\r\n                        Gross Fund (Fund | Interest | Sharing)\r\n                      </TableSortLabel>\r\n                    </TableCell>\r\n                  );\r\n                }\r\n                return (\r\n                  <TableCell\r\n                    key={index}\r\n                    align=\"center\"\r\n                    sx={{\r\n                      fontWeight: \"bold\",\r\n                      width: columnWidths[index] || \"auto\",\r\n                      minWidth: columnWidths[index] || 150,\r\n                      maxWidth: columnWidths[index] || 300,\r\n                      position: \"sticky\",\r\n                      top: 0,\r\n                      backgroundColor: \"white\",\r\n                      zIndex: 2,\r\n                    }}\r\n                  >\r\n                    <TableSortLabel\r\n                      active={sortConfig.key === header.toLowerCase()}\r\n                      direction={\r\n                        sortConfig.key === header.toLowerCase()\r\n                          ? sortConfig.direction\r\n                          : \"asc\"\r\n                      }\r\n                      onClick={() => handleSort(header.toLowerCase())}\r\n                    >\r\n                      {header?.toUpperCase()}\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody className=\"tble-body\">\r\n            {loading && (\r\n              <TableRow>\r\n                <TableCell colSpan={title.length} className=\"middle-noData\">\r\n                  <CircularProgress />\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n            {sortedData.map((rowData, rowIndex) => (\r\n              <TableRow key={rowIndex}>\r\n                {Object.keys(rowData).map((key, colIndex) => {\r\n                  if (\r\n                    [\r\n                      \"status\",\r\n                      \"id\",\r\n                      \"brokerId\",\r\n                      \"fundAllocated\",\r\n                      \"Record Id\",\r\n                    ].includes(key)\r\n                  )\r\n                    return null;\r\n\r\n                  if (key === \"grossFund\") {\r\n                    return (\r\n                      <TableCell\r\n                        key={`${rowIndex}-grossFund`}\r\n                        align=\"center\"\r\n                        sx={{\r\n                          minWidth: 200,\r\n                          maxWidth: 300,\r\n                          whiteSpace: \"nowrap\",\r\n                          overflow: \"hidden\",\r\n                          textOverflow: \"ellipsis\",\r\n                        }}\r\n                      >\r\n                        {`${rowData[\"grossFund\"].toUpperCase()} | ${rowData[\"grossFundInterest\"].toUpperCase()} | ${rowData[\"grossFundSharing\"].toUpperCase()}`}\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  return (\r\n                    <TableCell\r\n                      key={`${rowIndex}-${colIndex}`}\r\n                      align=\"center\"\r\n                      sx={{\r\n                        width: columnWidths[colIndex] || \"auto\",\r\n                        minWidth: columnWidths[colIndex] || 150,\r\n                        maxWidth: columnWidths[colIndex] || 300,\r\n                        whiteSpace: \"nowrap\",\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\",\r\n                        // backgroundColor: \"white\"\r\n                      }}\r\n                    >\r\n                      {key === \"action\" && renderAction ? (\r\n                        <Button\r\n                          isDisabled={rowData[\"status\"] === 3}\r\n                          onPress={() =>\r\n                            handleButtonClick(rowData[\"status\"], rowData[\"id\"])\r\n                          }\r\n                        >\r\n                          {rowData[\"status\"] === 1 ? \"Release\" : \"Released\"}\r\n                        </Button>\r\n                      ) : (\r\n                        rowData[key]\r\n                      )}\r\n                    </TableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n            {!loading && sortedData.length === 0 && (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={title.length}\r\n                  className=\"middle-noData\"\r\n                  align=\"center\"\r\n                >\r\n                  No data found.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CustomTable;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  // baseURL:'http://43.204.150.47:8000',\r\n  baseURL:'http://localhost:8000',\r\n  timeout:5000\r\n})\r\n\r\n\r\napi.interceptors.request.use(\r\n  (config)=>{\r\n    config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n)\r\n\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(\"Response Interceptor: Response received\");\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      window.location.href = \"/\";  \r\n      console.error(\"Response Interceptor: Unauthorized access - Redirecting to login\");\r\n    } else {\r\n      console.error(\"Response Interceptor Error:\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api"],"names":["brokerValidationSchema","Yup","shape","brokerName","required","grossFund","typeError","min","grossFundInterest","max","grossFundSharing","arbitrageFund","arbitrageFundInterest","arbitrageFundSharing","propFund","propFundInterest","propFundSharing","costPerCr","_ref","open","handleClose","onFormSubmit","brokerData","initialValues","id","_jsx","Modal","onClose","children","_jsxs","Box","sx","position","top","left","transform","width","bgcolor","boxShadow","p","borderRadius","overflowY","Typography","variant","marginBottom","Formik","validationSchema","onSubmit","async","values","_ref2","resetForm","api","put","concat","toast","success","post","error","_error$response","_error$response2","_error$response2$data","console","response","data","detail","enableReinitialize","_ref3","errors","touched","handleChange","handleBlur","setFieldValue","Form","className","TextField","name","label","value","onChange","e","uppercaseValue","target","toUpperCase","onBlur","Boolean","helperText","fullWidth","inputProps","style","textTransform","margin","Button","color","onClick","type","title","columnWidths","tableData","renderAction","loading","sortConfig","setSortConfig","useState","key","direction","expandedRow","setExpandedRow","excludedKeys","sortedData","React","sort","a","b","Paper","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","map","header","index","align","fontWeight","minWidth","maxWidth","backgroundColor","zIndex","TableSortLabel","active","toLowerCase","handleSort","columnKey","prevConfig","isAscending","TableBody","colSpan","length","CircularProgress","rowData","rowIndex","IconButton","size","prev","handleExpandClick","KeyboardArrowUp","KeyboardArrowDown","Object","keys","filter","includes","colIndex","isDisabled","status","onPress","whiteSpace","overflow","textOverflow","Collapse","in","timeout","unmountOnExit","padding","display","gap","textAlign","brokerTableTitle","AdminSettings","setBrokerData","anchorEl","setAnchorEl","loader","setLoader","selectedBroker","setSelectedBroker","getBrokerData","useCallback","get","_response$data","_response$data$data","formattedData","broker","undefined","Action","Dropdown","DropdownTrigger","CiMenuKebab","DropdownMenu","onAction","handleDropdownAction","DropdownItem","action","releaseBroker","document","body","useEffect","AdminLayout","pageTitle","pageSubtitle","Card","marginTop","placeholder","InputProps","startAdornment","InputAdornment","IoSearch","event","currentTarget","startIcon","IoAddCircleOutline","BrokerFormPopup","handleClosePopover","CollapsableTable","page","setPage","rowsPerPage","setRowsPerPage","handleButtonClick","axios","create","baseURL","interceptors","request","use","config","headers","Authorization","localStorage","getItem","Promise","reject","log","window","location","href","message"],"sourceRoot":""}